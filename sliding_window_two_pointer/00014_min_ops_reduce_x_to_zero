https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/description/

Minimum Operations to Reduce X to Zero
You are given an integer array nums and an integer x. In one operation,
you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. 
Note that this modifies the array for future operations.
Return the minimum number of operations to reduce x to exactly 0 if it is possible, otherwise, return -1.

Example 1:
Input: nums = [1,1,4,2,3], x = 5
Output: 2
Explanation: The optimal solution is to remove the last two elements to reduce x to zero.

Example 2:
Input: nums = [5,6,7,8,9], x = 4
Output: -1

Example 3:
Input: nums = [3,2,20,1,1,3], x = 10
Output: 5
Explanation: The optimal solution is to remove the last three elements and the first two elements 
(5 operations in total) to reduce x to zero.

# java

class Solution {
    public int minOperations(int[] nums, int x) {
	int sum = 0;
	for (int num: nums) sum += num;

	int maxLength = -1, currSum = 0;
	for (int l=0, r=0; r<nums.length; r++) {
		currSum += nums[r];
		while (l <= r && currSum > sum - x) currSum -= nums[l++];
		if (currSum == sum - x) maxLength = Math.max(maxLength, r-l+1);
	}

	if(maxLength == -1) return -1;
    else return nums.length - maxLength;
  }
}

class Solution {
    public int minOperations(int[] nums, int x) {
        int n = nums.length;
        int sum = 0;
        HashMap<Integer,Integer> map = new HashMap<>();
        map.put(0,-1);
        for(int i=0;i<n;i++)
        {
            sum = sum + nums[i];
            map.put(sum,i);
        }

        if(sum < x)
        {
            return -1;
        }

        int target = sum - x;
        int longest = Integer.MIN_VALUE;
        sum = 0;
        for(int i=0;i<n;i++)
        {
            sum = sum + nums[i];
            if(map.containsKey(sum - target))
            {
                longest = Math.max(longest , i - map.get(sum - target));
            }
        }

        return longest == Integer.MIN_VALUE ? -1 : n - longest;
    }
}

class Solution {

    public int minOperations(int[] nums, int x) {
        int sum = 0;
        for (int elem : nums) sum += elem;
        if (x > sum) return -1;
        if (x == sum) return nums.length;
        int target = sum - x;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 1; i < nums.length; i++) {
            nums[i] += nums[i - 1];
        }
        int ans = Integer.MIN_VALUE;
        map.put(0, -1);
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i] - target)) {
                ans = Math.max(ans, i - map.get(nums[i] - target));
            }
            map.put(nums[i], i);
        }
        if (ans == Integer.MIN_VALUE) return -1;
        return nums.length - ans;
    }
}
