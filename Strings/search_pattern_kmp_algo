https://www.geeksforgeeks.org/problems/search-pattern0205/1

class Solution
{ private int[] computeLPSArray(String pat) {
        int m = pat.length();
        int[] lps = new int[m];
        int length = 0;  // length of the previous longest prefix suffix
        int i = 1;
        
        lps[0] = 0; // lps[0] is always 0
        
        while (i < m) {
            if (pat.charAt(i) == pat.charAt(length)) {
                length++;
                lps[i] = length;
                i++;
            } else {
                // mismatch after length matches
                if (length != 0) {
                    length = lps[length - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }
    
    ArrayList<Integer> search(String pat, String txt)
    {
       ArrayList<Integer> result = new ArrayList<>();
        int n = txt.length();
        int m = pat.length();
        
        if (m == 0 || n == 0) {
            return result;  // Empty pattern or text case
        }
        
        int[] lps = computeLPSArray(pat);
        
        int i = 0;  // index for txt
        int j = 0;  // index for pat
        
        while (i < n) {
            if (pat.charAt(j) == txt.charAt(i)) {
                i++;
                j++;
            }
            
            if (j == m) {
                // Found a match, add the starting index (1-based)
                result.add(i - j + 1);
                j = lps[j - 1];
            } else if (i < n && pat.charAt(j) != txt.charAt(i)) {
                // mismatch after j matches
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }
        
        if (result.isEmpty()) {
            result.add(-1);  // Add -1 if no occurrences were found
        }
        
        return result;
    }
}
