https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/

You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

# java

public class Solution {
     public int maxProfit(int[] prices) {
        int maxPro = 0;
        int minPrice = Integer.MAX_VALUE;
        
        for (int price : prices) {
            minPrice = Math.min(minPrice, price);
            maxPro = Math.max(maxPro, price - minPrice);
        }
        
        return maxPro;
    }
}

or

public class Solution {
    public int maxProfit(int[] prices) {
        int maxPro = 0;
        int n = prices.length;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (prices[j] > prices[i]) {
                    maxPro = Math.max(prices[j] - prices[i], maxPro);
                }
            }
        }
        return maxPro;
    }
}

# PYTHON

brute:

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        arr=prices
        maxPro = 0
        n = len(arr)
        for i in range(n):
            for j in range(i + 1, n):
                if arr[j] > arr[i]:
                    maxPro = max(arr[j] - arr[i], maxPro)
        return maxPro

optimal:

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        arr=prices
        maxPro = 0
        minPrice = float('inf')
        for i in range(len(arr)):
            minPrice = min(minPrice, arr[i])
            maxPro = max(maxPro, arr[i] - minPrice)
        return maxPro
