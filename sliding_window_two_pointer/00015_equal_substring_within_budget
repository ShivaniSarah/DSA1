https://leetcode.com/problems/get-equal-substrings-within-budget/description/

Get Equal Substrings Within Budget

You are given two strings s and t of the same length and an integer maxCost.

You want to change s to t. Changing the ith character of s to ith character of t costs |s[i] - t[i]| (i.e., the absolute difference between the ASCII values of the characters).

Return the maximum length of a substring of s that can be changed to be the same as the corresponding substring of t with a cost less than or equal to maxCost. If there is no substring from s that can be changed to its corresponding substring from t, return 0.

Example 1:
Input: s = "abcd", t = "bcdf", maxCost = 3
Output: 3
Explanation: "abc" of s can change to "bcd".
That costs 3, so the maximum length is 3.

Example 2:
Input: s = "abcd", t = "cdef", maxCost = 3
Output: 1
Explanation: Each character in s costs 2 to change to character in t,  so the maximum length is 1.

Example 3:
Input: s = "abcd", t = "acde", maxCost = 0
Output: 1
Explanation: You cannot make any change, so the maximum length is 1.

# java

class Solution {
  public int equalSubstring(String s, String t, int maxCost) {
    var len = 0;
    var cost = 0;
    var i = 0;
    var j = 0;

    while (j < s.length()) {
      if (cost <= maxCost) {
        cost += Math.abs(s.charAt(j) - t.charAt(j));
        j++;
      }
      while (cost > maxCost) {
        cost -= Math.abs(s.charAt(i) - t.charAt(i));
        i++;
      }
      len = Math.max(len, j-i);
    }
    return len;
  }
}

or

class Solution {
    public int equalSubstring(String s, String t, int maxCost) {
        int[] pref = new int[s.length()];
        for ( int i = 0 ; i < s.length() ; i++ ) {
            pref[i] = Math.abs( ((int)s.charAt(i)) - ((int)t.charAt(i)) );
            if ( i > 0 ) {
                pref[i] += pref[i-1];
            }
        }
        int ans = 0, j = 0;
        for ( int i = 0 ; i < s.length() ; i++ ) {
            int curr = maxCost;
            if ( i - 1 >= 0 ) {
                curr += pref[i-1];
            }
            while ( j < s.length() && curr >= pref[j] ) {
                j++;
            }
            ans = Math.max( ans, j - i );
        }
        return ans;
    }
}

