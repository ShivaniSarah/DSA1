https://leetcode.com/problems/maximum-score-of-a-good-subarray/description/

You are given an array of integers nums (0-indexed) and an integer k.

The score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). A good subarray is a subarray where i <= k <= j.

Return the maximum possible score of a good subarray.

Example 1:

Input: nums = [1,4,3,7,4,5], k = 3
Output: 15
Explanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. 
Example 2:

Input: nums = [5,5,4,5,4,1,1,1], k = 0
Output: 20
Explanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.

# java

class Solution {
    public int maximumScore(int[] nums, int k) {
        int left = k, right = k;
        int min_val = nums[k];
        int max_score = min_val;

        while (left > 0 || right < nums.length - 1) {
            if (left == 0 || (right < nums.length - 1 && nums[right + 1] > nums[left - 1])) {
                right++;
            } else {
                left--;
            }
            min_val = Math.min(min_val, Math.min(nums[left], nums[right]));
            max_score = Math.max(max_score, min_val * (right - left + 1));
        }
        
        return max_score;
    }
}

or

class Solution {
    public int maximumScore(int[] nums, int k) {
        int n = nums.length;
        int[] min = new int[n];
        min[k] = nums[k];
        for(int i=k+1;i<n;i++){
            min[i] = Math.min(min[i-1],nums[i]);
        }
        for(int i=k-1;i>=0;i--){
            min[i] = Math.min(min[i+1],nums[i]);
        }
        int i = 0;
        int j = n-1;
        int ans = 0;
        while(i<=k && j>=k){
            ans = Math.max(ans,Math.min(min[i],min[j])*(j-i+1));
            if(min[i]>min[j]){
                j--;
            }else if(min[j]>min[i]){
                i++;
            }else{
                i++;
                j--;
            }
        }
        return ans;
    }
}

or

class Solution {
    public int maximumScore(int[] nums, int k) {
        int ans = nums[k], res = nums[k], lo = k, hi = k;

        while(lo > 0 || hi < nums.length-1){

            if(((lo > 0) ? nums[lo-1]:0) < ((hi < nums.length-1) ? nums[hi+1]:0)){
                res = Math.min(res, nums[++hi]);
            }
            else{
                res = Math.min(res, nums[--lo]);
            }

            ans = Math.max(ans, res*(hi-lo+1));
        }

        return ans;
    }
}
