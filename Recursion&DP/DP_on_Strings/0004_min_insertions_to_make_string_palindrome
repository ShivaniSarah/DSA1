https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/

Given a string s. In one step you can insert any character at any index of the string.
Return the minimum number of steps to make s palindrome.
A Palindrome String is one that reads the same backward as well as forward.

Example 1:
Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we do not need any insertions.

Example 2:
Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".

Example 3:
Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".

# java

class Solution {

    // Helper function to find the length of the longest common subsequence
    private int lcs(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();
        
        int[][] dp = new int[n + 1][m + 1];

        // Fill the dp table
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[n][m];
    }

    public int minInsertions(String s) {
        String reversedS = new StringBuilder(s).reverse().toString();
        int lcsLength = lcs(s, reversedS);
        return s.length() - lcsLength;
    }
}


# python

class Solution(object):
    def minInsertions(self, s):
        def lcs(s1, s2):
            n = len(s1)
            m = len(s2)

            # Initialize a 2D array to store the length of the LCS
            dp = [[-1] * (m + 1) for i in range(n + 1)]

            # Initialize the first row and first column with 0
            for i in range(n + 1):
                dp[i][0] = 0
            for i in range(m + 1):
                dp[0][i] = 0

            # Fill in the dp array using dynamic programming
            for ind1 in range(1, n + 1):
                for ind2 in range(1, m + 1):
                    if s1[ind1 - 1] == s2[ind2 - 1]:
                        dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1]
                    else:
                        dp[ind1][ind2] = max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1])

            # The final value in dp will be the length of the LCS
            return dp[n][m]

        t = s
        s = s[::-1]

        l=lcs(s, t)
        return len(s)-l
