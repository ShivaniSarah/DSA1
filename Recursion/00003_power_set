https://leetcode.com/problems/subsets/

Given an integer array nums of unique elements, return all possible subsets(the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), nums, 0);
        return result;
    }
    
    // Helper function for backtracking
    private static void backtrack(List<List<Integer>> result, List<Integer> tempList, int[] nums, int start) {
        // Add the current subset (tempList) to the result
        result.add(new ArrayList<>(tempList));
        
        // Explore further subsets
        for (int i = start; i < nums.length; i++) {
            // Add the current number to the subset
            tempList.add(nums[i]);
            // Recur with the remaining elements
            backtrack(result, tempList, nums, i + 1);
            // Remove the last added element (backtrack)
            tempList.remove(tempList.size() - 1);
        }
    }
}
