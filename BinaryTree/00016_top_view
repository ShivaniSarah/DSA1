https://www.geeksforgeeks.org/problems/top-view-of-binary-tree/1

Top View of Binary Tree


Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node. Also if 2 nodes are outside the shadow of the tree and are at same position then consider the left ones only(i.e. leftmost). 
For ex - 1 2 3 N 4 5 N 6 N 7 N 8 N 9 N N N N N will give 8 2 1 3 as answer. Here 8 and 9 are on the same position but 9 will get shadowed.

Example 1:

Input:
      1
   /    \
  2      3
Output: 2 1 3

# java

/*
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}
*/

class Solution {
    // Function to return a list of nodes visible from the top view
    // from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root) {
        // add your code
        ArrayList<Integer> result = new ArrayList<>();
        if(root == null){
            return result;
        }
        Map<Integer,Integer> map = new TreeMap<>();
        Queue<Node> q = new LinkedList<>();
        Queue<Integer> hdq = new LinkedList<>();
        
        
        q.add(root);
        hdq.add(0);
        
        while(!q.isEmpty()){
        Node current = q.poll();
        int hd = hdq.poll();
        if(!map.containsKey(hd)){
           map.put(hd,current.data); 
        }
        if(current.left != null){
        q.add(current.left);
        hdq.add(hd-1);
        }
       
       
       if(current.right != null){
         q.add(current.right);
         hdq.add(hd+1);
        }
          
        }
        
        for (Integer value : map.values()) {
           result.add(value);
        }
        
        return result;
    }
   
}

or

import java.util.*;
class Solution {
    static class Info{
        Node node;
        int hd;
        
        public Info(Node node, int hd){
            this.node = node;
            this.hd = hd;
        }
    }
    
    // Function to return a list of nodes visible from the top view
    // from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root) {
        // add your code
        int min =0;
        int max =0;
        ArrayList<Integer> list = new ArrayList<>();
        Queue<Info> q = new LinkedList<>();
        HashMap<Integer, Node> map = new HashMap<>();
        q.add(new Info(root, 0));
        q.add(null);
        
        while(!q.isEmpty()){
            Info curr = q.remove();
            if(curr == null){
               if(q.isEmpty()){
                    break;
            } else {
                q.add(null);
            }
        }
        else{
        if(!map.containsKey(curr.hd)){
            map.put(curr.hd, curr.node);
            
        }  
        if(curr.node.left!=null){
                q.add(new Info(curr.node.left, curr.hd-1));
                min = Math.min(min, curr.hd-1);
        }    
        if(curr.node.right!=null){
                q.add(new Info(curr.node.right, curr.hd+1));
                max = Math.max(max, curr.hd+1);
                
            }
        } 
    }
    for(int i = min;i<=max;i++){
            list.add(map.get(i).data);
    }
    return list;
}
    
}

or

class Tuple{
    Node root;
    int x;
    
    public Tuple(Node _root,int _x){
        root = _root;
        x = _x;
       
    }
}

class Solution {
    // Function to return a list of nodes visible from the top view
    // from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root) {
        TreeMap<Integer,Integer>mp = new TreeMap<>();
        ArrayList<Integer> li = new ArrayList<>();
        Queue<Tuple> q = new LinkedList<>();
        q.add(new Tuple(root,0));
        
        while(!q.isEmpty()){
            Tuple t = q.poll();
            Node n = t.root;
            int r = t.x;
            
            if(!mp.containsKey(r)){
                mp.put(r,n.data);
            }
            if(n.left!=null){
                q.add(new Tuple(n.left,r-1));
            }
            if(n.right!=null){
                q.add(new Tuple(n.right,r+1));
            }
            
        }
        Collection<Integer>values = mp.values();
        for (Integer value : values) {
           li.add(value);
        }
        return li;
    }      
}


