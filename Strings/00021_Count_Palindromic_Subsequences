Count Palindromic Subsequences
https://www.geeksforgeeks.org/problems/count-palindromic-subsequences/1

Given a string str of length N, you have to find number of palindromic subsequence (need not necessarily be distinct) present in the string str.
Note: You have to return the answer module 109+7;

Example 1:
Input: 
Str = "abcd"
Output: 
4
Explanation:
palindromic subsequence are : "a" ,"b", "c" ,"d"

Using DP

class Solution
{   private static final int MOD = 1000000007;
    long countPS(String str)
    {
        int n = str.length();
        long[][] dp = new long[n][n];
        
        // Base case: Single character substrings
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 1;
        }
        
        // Fill the table for substrings of length > 1
        for (int length = 2; length <= n; ++length) {
            for (int i = 0; i <= n - length; ++i) {
                int j = i + length - 1;
                if (str.charAt(i) == str.charAt(j)) {
                    dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] + 1) % MOD;
                } else {
                    dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1] + MOD) % MOD;
                }
            }
        }
        
        return dp[0][n - 1];
    }
}

or

Initial Values : i= 0, j= n-1;
CountPS(i,j)
// Every single character of a string is a palindrome 
// subsequence 
if i == j
   return 1 // palindrome of length 1
// If first and last characters are same, then we 
// consider it as palindrome subsequence and check
// for the rest subsequence (i+1, j), (i, j-1)
Else if (str[i] == str[j])
   return   countPS(i+1, j) + countPS(i, j-1) + 1;
else
   // check for rest sub-sequence and  remove common
   // palindromic subsequences as they are counted
   // twice when we do countPS(i+1, j) + countPS(i,j-1)
   return countPS(i+1, j) + countPS(i, j-1) - countPS(i+1, j-1)



   // Function return the total
    // palindromic subsequence
    static int countPS(int i, int j)
    {

        if (i > j)
            return 0;

        if (dp[i][j] != -1)
            return dp[i][j];
    
        if (i == j)
            return dp[i][j] = 1;

        else if (str.charAt(i) == str.charAt(j))
            return dp[i][j]
                = countPS(i + 1, j) + 
                    countPS(i, j - 1) + 1;

        else
            return dp[i][j] = countPS(i + 1, j) + 
                              countPS(i, j - 1) -
                              countPS(i + 1, j - 1);
    }

    // Driver code
    public static void main(String[] args)
    {
        for (int i = 0; i < 1000; i++)
            for (int j = 0; j < 1000; j++)
                dp[i][j] = -1;

        n = str.length();
        System.out.println("Total palindromic subsequence"
                           + "are : " + countPS(0, n - 1));
    }
