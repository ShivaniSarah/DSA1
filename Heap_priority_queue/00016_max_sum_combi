https://www.geeksforgeeks.org/problems/maximum-sum-combination/0

Given two integer array A and B of size N each.
A sum combination is made by adding one element from array A and another element of array B.
Return the maximum K valid sum combinations from all the possible sum combinations.

Note : Output array must be sorted in non-increasing order.

Example 1:

Input:
N = 2
K = 2
A [ ] = {3, 2}
B [ ] = {1, 4}
Output: {7, 6}
Explanation: 
7 -> (A : 3) + (B : 4)
6 -> (A : 2) + (B : 4)

# java

class Solution {
    static List<Integer> maxCombinations(int N, int K, int A[], int B[]) {
        
        Arrays.sort(A);
        Arrays.sort(B);
        
        List<Integer> list = new ArrayList<>();
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->b[0]-a[0]);
        
        for(int i=N-1;i>=0;i--)
        {
            pq.offer(new int[]{A[N-1]+B[i],N-1,i});
        }
        while(K-->0)
        {
            int[] arr = pq.poll();
            list.add(arr[0]);
            if(arr[1]>0)
                pq.offer(new int[]{A[arr[1]-1]+B[arr[2]],arr[1]-1,arr[2]});
        }
        return list;
    }
}

or

class Solution {
    static void reverse(int arr[]) {
        int left = 0;
        int right = arr.length - 1;

        // Swap elements from the start and end moving towards the center
        while (left < right) {
            int temp = arr[left];
            arr[left] = arr[right];
            arr[right] = temp;

            left++;
            right--;
        }
    }

    static void addToQueue(PriorityQueue<Integer> qu, int val, int C) {
        if (qu.size() < C) {
            qu.add(val);
        } else if (qu.peek() < val) {
            qu.poll();
            qu.add(val);
        }
    }

    static List<Integer> maxCombinations(int N, int K, int A[], int B[]) {
        List<Integer> list = new ArrayList<>();
        Arrays.sort(A);
        Arrays.sort(B);
        PriorityQueue<Integer> pq = new PriorityQueue<>();

        for (int i = N - 1; i >= 0; i--) {
            for (int j = N - 1; j >= 0; j--) {
                int sum = A[i] + B[j];

                if (pq.size() < K) {
                    pq.add(sum);
                } else if (sum > pq.peek()) {
                    pq.poll();
                    pq.add(sum);
                } else
                    break;      // No need to go ahead becouse array is sorted and will always find smaller elements ahead
            }
        }

        while (pq.size() > 0 && K > 0) {
            list.add(0, pq.poll());
        }

        return list;
    }

}

or

class triplet{
    int f;
    int s;
    int t;
    
    public triplet(int f , int s , int t){
        this.f = f;
        this.s = s;
        this.t = t;
    }
}
class Solution {
    static List<Integer> maxCombinations(int n, int k, int a[], int b[]) {
        Arrays.sort(a);
        Arrays.sort(b);
        PriorityQueue<triplet> pq = new PriorityQueue<triplet>((x,y) -> y.f - x.f);
        HashSet<String> visited = new HashSet<>();
        pq.add(new triplet(a[n-1] + b[n-1] , n-1 , n-1));
        List<Integer> arr = new ArrayList<>();
        visited.add((n-1) +":" + (n-1));
        while(!pq.isEmpty()){
            int i = pq.peek().s;
            int j = pq.peek().t;
            arr.add(pq.peek().f);
            pq.poll();
            if(arr.size()==k) break;
            
            if(i-1>= 0 && visited.add((i-1) +":" + (j))){
                pq.add(new triplet(a[i-1]+ b[j] , i-1 ,j));
            }
            if(j-1>=0 && visited.add((i) +":" + (j-1))){
                pq.add(new triplet(a[i] + b[j-1] , i , j-1));
            }
        }
        return arr;
    }
}

or

class Pair{
    int sum;
    int i1;
    int i2;
    Pair(int sum,int i1,int i2){
        this.sum=sum;
        this.i1=i1;
        this.i2=i2;
    }
}
class Solution {
    static List<Integer> maxCombinations(int n, int k, int a[], int b[]) {
        // code here
        Arrays.sort(a);
        Arrays.sort(b);
        PriorityQueue<Pair> pq=new PriorityQueue<>((i,j)->(j.sum-i.sum));
        pq.offer(new Pair(a[n-1]+b[n-1],n-1,n-1));
        
        List<Integer> list=new ArrayList<>();
        HashSet<String> vis=new HashSet<>();
        vis.add((n-1)+","+(n-1));
        
        while(!pq.isEmpty() && k>0){
            int ind1=pq.peek().i1;
            int ind2=pq.peek().i2;
            int cursum=pq.peek().sum;
            pq.poll();
            list.add(cursum);
            k--;
            
            if(ind1-1>=0 && !vis.contains((ind1-1)+","+ind2)){
                pq.offer(new Pair(a[ind1-1]+b[ind2],ind1-1,ind2));
                vis.add((ind1-1)+","+ind2);
            }
            
            if(ind2-1>=0 && !vis.contains(ind1+","+(ind2-1))){
                pq.offer(new Pair(a[ind1]+b[ind2-1],ind1,ind2-1));
                vis.add(ind1+","+(ind2-1));
            }
        }
        return list;
    }
}
