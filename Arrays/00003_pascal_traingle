# pascal triangle

Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

calculate nCr = n!/(r!*(n-r)!) = > 5C3 = 5!/(3!(5-3)!) = 5*4*3*2*1/((3*2*1)*(2*1))
pascal traingle:
        1
       1 1
      1 2 1
     1 3 3 1
    1 4 6 4 1
  1 5 10 10 5 1 

# link: https://leetcode.com/problems/pascals-triangle/

# variation I: calculate nCr 

def nCr(n, r):
    res = 1

    # calculating nCr:
    for i in range(r):
        res = res * (n - i)
        res = res // (i + 1)

    return res

def pascalTriangle(r, c):
    element = nCr(r - 1, c - 1)
    return element

# variation II: calculate full row of a pascal traingle

def generateRow(row):
    ans = 1
    ansRow = [1] #inserting the 1st element
    
    #calculate the rest of the elements:
    for col in range(1, row):
        ans *= (row - col)
        ans //= col
        ansRow.append(ans)
    return ansRow



class Solution:
    def generate(self, n: int) -> List[List[int]]:

        ans=[]
        #store the entire pascal's triangle:
        for row in range(1, n+1):
            ans.append(generateRow(row))
        return ans



        



  
