https://leetcode.com/problems/edit-distance/

Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 
Example 1:
Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Example 2:
Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

DP II :

class Solution(object):
    def minDistance(self, S1, S2):
        n = len(S1)
        m = len(S2)

        dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]

        for i in range(n + 1):
            dp[i][0] = i
        for j in range(m + 1):
            dp[0][j] = j

        for i in range(1, n + 1):
            for j in range(1, m + 1):
                # If the characters at the current positions match, no operation is needed
                if S1[i - 1] == S2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1]
                else:
                    # Calculate the minimum of three choices:
                    # 1. Replace the current character (diagonal move)
                    # 2. Insert a character into S1 (move up)
                    # 3. Delete a character from S1 (move left)
                    dp[i][j] = 1 + min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1]))

        return dp[n][m]


DP I:

class Solution(object):
    def minDistance(self, S1, S2):
        def editDistanceUtil(S1, S2, i, j, dp):
            if i < 0:
                return j + 1
            if j < 0:
                return i + 1

            if dp[i][j] != -1:
                return dp[i][j]

            # If the characters at the current positions match, no operation is needed
            if S1[i] == S2[j]:
                dp[i][j] = editDistanceUtil(S1, S2, i - 1, j - 1, dp)
            else:
                # Calculate the minimum of three choices:
                # 1. Replace the current character (diagonal move)
                # 2. Insert a character into S1 (move up)
                # 3. Delete a character from S1 (move left)
                dp[i][j] = 1 + min(
                    editDistanceUtil(S1, S2, i - 1, j - 1, dp),
                    min(editDistanceUtil(S1, S2, i - 1, j, dp), editDistanceUtil(S1, S2, i, j - 1, dp))
                )

            return dp[i][j]
        n = len(S1)
        m = len(S2)

        dp = [[-1 for _ in range(m)] for _ in range(n)]

        return editDistanceUtil(S1, S2, n - 1, m - 1, dp)

