https://leetcode.com/problems/word-search-ii/description/

Given an m x n board of characters and a list of strings words, return all words on the board.
Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring.
The same letter cell may not be used more than once in a word.

Example 1:
Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]

Example 2:
Input: board = [["a","b"],["c","d"]], words = ["abcb"]
Output: []

#  Java

class TrieNode {
    TrieNode[] children = new TrieNode[26];
    String word = null;  // To store the word when we reach the end of the word in the Trie
}

class Trie {
    private TrieNode root = new TrieNode();
    
    // Insert a word into the Trie
    public void insert(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            int index = c - 'a';
            if (node.children[index] == null) {
                node.children[index] = new TrieNode();
            }
            node = node.children[index];
        }
        node.word = word;  // Store the word at the end node
    }
    
    // Return the root of the Trie
    public TrieNode getRoot() {
        return root;
    }
}

class Solution {
    private Set<String> result = new HashSet<>();
    private Trie trie = new Trie();
    
    public List<String> findWords(char[][] board, String[] words) {
        // Build the Trie from the list of words
        for (String word : words) {
            trie.insert(word);
        }
        
        int rows = board.length;
        int cols = board[0].length;
        
        // Start DFS from every cell in the board
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                dfs(board, i, j, trie.getRoot());
            }
        }
        
        // Convert result set to list
        return new ArrayList<>(result);
    }
    
    private void dfs(char[][] board, int i, int j, TrieNode node) {
        char c = board[i][j];
        
        if (c == '#' || node.children[c - 'a'] == null) {
            return;
        }
        
        node = node.children[c - 'a'];
        
        if (node.word != null) {
            result.add(node.word);
            node.word = null;  // Avoid duplicate words in the result
        }
        
        board[i][j] = '#';  // Mark the cell as visited
        
        // Explore neighbors (up, down, left, right)
        if (i > 0) dfs(board, i - 1, j, node);
        if (i < board.length - 1) dfs(board, i + 1, j, node);
        if (j > 0) dfs(board, i, j - 1, node);
        if (j < board[0].length - 1) dfs(board, i, j + 1, node);
        
        board[i][j] = c;  // Unmark the cell (backtrack)
    }

}
