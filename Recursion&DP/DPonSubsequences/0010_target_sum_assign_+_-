https://leetcode.com/problems/target-sum/description/

You are given an integer array nums and an integer target.
You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums
and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

Example 1:
Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3

Example 2:
Input: nums = [1], target = 1
Output: 1

DP II:

class Solution(object):
    def findTargetSumWays(self, nums, target):
        def f(ind, target, arr, dp):
            if ind == 0:
                if target == 0 and arr[0] == 0:
                    return 2
                if target == 0 or target == arr[0]:
                    return 1
                return 0
            
            if dp[ind][target] != -1:
                return dp[ind][target]

            notTaken = f(ind - 1, target, arr, dp)
              
            taken = 0
            if arr[ind] <= target:
                taken = f(ind - 1, target - arr[ind], arr, dp)

            dp[ind][target] = notTaken + taken
            return dp[ind][target]

        def targetSum(target, arr):
            n=len(arr)
            totSum = 0
            for i in range(len(arr)):
                totSum += arr[i]

            if totSum - target < 0 or (totSum - target) % 2 == 1: # if totsum is less tahn target or (totsum- target)/2 is odd
                return 0

            s2 = (totSum - target) // 2

            dp = [[-1 for j in range(s2 + 1)] for i in range(n)]
            return f(n - 1, s2, arr, dp)
        # same question as how many ways partition array into two subsets such that difference of two subsets is given target.
        # here we assign s1 subset as + and s2 subset as -.
        return targetSum(target, nums)
