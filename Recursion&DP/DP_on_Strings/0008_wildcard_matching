https://leetcode.com/problems/wildcard-matching/description/

Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "*"
Output: true
Explanation: '*' matches any sequence.
Example 3:

Input: s = "cb", p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.

# DP II:

class Solution(object):
    def isMatch(self, s, p): # s is the string , p is the pattern
        m, n = len(s), len(p)
    
        # Create a DP table with dimensions (m+1) x (n+1)
        dp = [[False] * (n + 1) for _ in range(m + 1)]
        
        # Base case: empty string matches empty pattern
        dp[0][0] = True
        
        # Handle patterns that can match empty string (like *, **, etc.)
        for j in range(1, n + 1):
            if p[j - 1] == '*':
                dp[0][j] = dp[0][j - 1]
        
        # Fill the table
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if p[j - 1] == '*':
                    # '*' can match empty sequence or one more character in s
                    dp[i][j] = dp[i][j - 1] or dp[i - 1][j]
                elif p[j - 1] == '?' or p[j - 1] == s[i - 1]:
                    # Match current character or '?'
                    dp[i][j] = dp[i - 1][j - 1]
        
        return dp[m][n]

# DP I :

class Solution(object):
    def isMatch(self, S2, S1): # s is the string , p is the pattern

        def isAllStars(S1, i):
            # Helper function to check if all characters up to index i in S1 are '*'
            for j in range(i + 1):
                if S1[j] != '*':
                    return False
            return True

        def wildcardMatchingUtil(S1, S2, i, j, dp):
            # Base conditions
            if i < 0 and j < 0:
                return True
            if i < 0 and j >= 0:
                return False
            if j < 0 and i >= 0:
                return isAllStars(S1, i)

            # If the result for this subproblem is already computed, return it
            if dp[i][j] != -1:
                return dp[i][j]

            if S1[i] == S2[j] or S1[i] == '?':
                # Characters match or S1 has a '?'; move to the previous characters in both strings
                dp[i][j] = wildcardMatchingUtil(S1, S2, i - 1, j - 1, dp)
            elif S1[i] == '*':
                # If S1 has a '*', there are two choices:
                # 1. '*' represents an empty string in S1, so move to the previous character in S1 (i-1, j).
                # 2. '*' represents one or more characters in S1, so move to the previous character in S2 (i, j-1).
                dp[i][j] = wildcardMatchingUtil(S1, S2, i - 1, j, dp) or wildcardMatchingUtil(S1, S2, i, j - 1, dp)
            else:
                dp[i][j] = False  # Characters don't match, and S1[i] is not '*'

            return dp[i][j]

        n = len(S1)
        m = len(S2)

        # Initialize a 2D DP array with -1 values
        dp = [[-1 for _ in range(m)] for _ in range(n)]

        # Calculate and return the result of wildcard matching
        return wildcardMatchingUtil(S1, S2, n - 1, m - 1, dp)
