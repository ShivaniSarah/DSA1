https://leetcode.com/problems/validate-stack-sequences/description/

Validate Stack Sequences

Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.

Example 1:
Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4),
pop() -> 4,
push(5),
pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

Example 2:
Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.

# Java

class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        int j = 0;//track the popped element using variable j
        Stack<Integer> s = new Stack<>();
        for(int i = 0 ; i < pushed.length; i ++){
            s.push(pushed[i]); //pushing the element into stack
            //peek() element is present in popped array then pop() the peek() element
            while(!s.isEmpty() && j != popped.length){
                if(s.peek() == popped[j]){
                    s.pop(); //pop the element 
                    j++; //increase the j pointer
                }else{
                    break;//break from the while loop not the for loop
                }
            }
        }
        return s.isEmpty();//check if the stack is empty or not if empty then all operation went successfull 
    }
}
