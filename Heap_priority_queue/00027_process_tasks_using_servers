https://leetcode.com/problems/process-tasks-using-servers/description/

You are given two 0-indexed integer arrays servers and tasks of lengths n​​​​​​ and m​​​​​​ respectively. servers[i] is the weight of the i​​​​​​th​​​​ server, and tasks[j] is the time needed to process the j​​​​​​th​​​​ task in seconds.
Tasks are assigned to the servers using a task queue. Initially, all servers are free, and the queue is empty.
At second j, the jth task is inserted into the queue (starting with the 0th task being inserted at second 0). As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the smallest weight, and in case of a tie, it is assigned to a free server with the smallest index.
If there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. If multiple servers become free at the same time, then multiple tasks from the queue will be assigned in order of insertion following the weight and index priorities above.
A server that is assigned task j at second t will be free again at second t + tasks[j].
Build an array ans​​​​ of length m, where ans[j] is the index of the server the j​​​​​​th task will be assigned to.
Return the array ans​​​​.

Example 1:

Input: servers = [3,3,2], tasks = [1,2,3,2,1,2]
Output: [2,2,0,2,1,2]
Explanation: Events in chronological order go as follows:
- At second 0, task 0 is added and processed using server 2 until second 1.
- At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3.
- At second 2, task 2 is added and processed using server 0 until second 5.
- At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5.
- At second 4, task 4 is added and processed using server 1 until second 5.
- At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7.

# java

class Solution {
    public int[] assignTasks(int[] servers, int[] tasks) {
        int n = servers.length;
        int m = tasks.length;

        // create a server queue
        PriorityQueue<ServerPair> serverQueue = new PriorityQueue<>((a,b) -> {
            if (a.serverWeight - b.serverWeight == 0) {
                return a.serverIndex - b.serverIndex;
            }
            return a.serverWeight - b.serverWeight;
        });

        // push all the servers into the serverQueue
        for (int i=0; i<n; i++) {
            serverQueue.add(new ServerPair(servers[i], i));
        }

        // create a task queue
        PriorityQueue<TaskPair> taskQueue = new PriorityQueue<>((a,b) -> {
            if (a.taskCompletionTime - b.taskCompletionTime == 0) {
                return a.serverIndex - b.serverIndex;
            }
            return a.taskCompletionTime - b.taskCompletionTime;
        });

        int i=0;
        int timer = 0;
        int[] output = new int[m];
        while (i < m) {
            // free up all the servers that have completed their tasks
            // and put them into the server queue
            while (!taskQueue.isEmpty() && taskQueue.peek().taskCompletionTime <= timer) {
                TaskPair pair = taskQueue.poll();
                serverQueue.add(new ServerPair(servers[pair.serverIndex], pair.serverIndex));
            }

            // pick the server with the least weight and assign the current task to it
            while (!serverQueue.isEmpty() && timer >= i && i < m) {
                ServerPair pair = serverQueue.poll();
                taskQueue.add(new TaskPair(tasks[i] + timer, pair.serverIndex));
                output[i] = pair.serverIndex;
                i++;
            }

            if (serverQueue.isEmpty()) timer = taskQueue.peek().taskCompletionTime;
            else timer = i;
        }

        return output;
    }
}

class ServerPair {
    public int serverWeight;
    public int serverIndex;

    public ServerPair(int serverWeight, int serverIndex) {
        this.serverWeight = serverWeight;
        this.serverIndex = serverIndex;
    }
}

class TaskPair {
    public int taskCompletionTime;
    public int serverIndex;

    public TaskPair(int taskCompletionTime, int serverIndex) {
        this.taskCompletionTime = taskCompletionTime;
        this.serverIndex = serverIndex;
    }
}
