https://leetcode.com/problems/trapping-rain-water/description/



class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int left = 0, right = n - 1;
        int res = 0;
        int maxLeft = 0, maxRight = 0;
        while (left <= right) {
            if (height[left] <= height[right]) {
                if (height[left] >= maxLeft) {
                    maxLeft = height[left];
                } else {
                    res += maxLeft - height[left];
                }
                left++;
            } else {
                if (height[right] >= maxRight) {
                    maxRight = height[right];
                } else {
                    res += maxRight - height[right];
                }
                right--;
            }
        }
        return res;
    }
}

or

class Solution {
    public int trap(int[] arr) {
        int n = arr.length;
        int prefix[] = new int[n];
        int suffix[] = new int[n];
        prefix[0] = arr[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = Math.max(prefix[i - 1], arr[i]);
        }
        suffix[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            suffix[i] = Math.max(suffix[i + 1], arr[i]);
        }
        int waterTrapped = 0;
        for (int i = 0; i < n; i++) {
            waterTrapped += Math.min(prefix[i], suffix[i]) - arr[i];
        }
        return waterTrapped;
    }
}


or

class Solution {
    public int trap(int[] height) {
        Stack<Integer> stack = new Stack<>();
        int n = height.length;
        int ans = 0;

        // Loop through each bar
        for (int i = 0; i < n; i++) {
            // Remove bars from the stack while the condition holds
            while (!stack.isEmpty() && height[stack.peek()] < height[i]) {
                // Store the height of the top and pop it
                int popHeight = height[stack.pop()];

                // If the stack is empty, break
                if (stack.isEmpty()) {
                    break;
                }

                // Get the distance between the left and right boundary of the popped bar
                int distance = i - stack.peek() - 1;

                // Calculate the minimum height
                int minHeight = Math.min(height[stack.peek()], height[i]) - popHeight;

                // Calculate the water trapped
                ans += distance * minHeight;
            }

            // If the stack is empty or height of the current bar is less than or equal to the top bar of stack
            stack.push(i);
        }

        return ans;
    }
}
