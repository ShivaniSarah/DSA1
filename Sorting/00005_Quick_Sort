https://www.geeksforgeeks.org/problems/quick-sort/1

class Solution
{
     static void swap(int arr[], int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    static int partition(int arr[], int low, int high)
    {
        // Choose the rightmost element as the pivot
        int pivot = arr[high];
        int i = low - 1; // Index of smaller element
        
        for (int j = low; j < high; j++) {
            // If the current element is smaller than or equal to the pivot
            if (arr[j] <= pivot) {
                i++;
                // Swap arr[i] and arr[j]
                swap(arr, i, j);
            }
        }
        // Swap arr[i + 1] and arr[high] (or pivot)
        swap(arr, i + 1, high);
        return i + 1; // Return the index of the pivot element
    } 
    static void quickSort(int arr[], int low, int high)
    {
        if (low < high) {
            // Partition the array and get the pivot index
            int pivotIndex = partition(arr, low, high);
            
            // Recursively sort elements before and after partition
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }
    
}
