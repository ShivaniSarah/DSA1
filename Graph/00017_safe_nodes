https://leetcode.com/problems/find-eventual-safe-states/description/

# Reverse the graph so the when u traverse from terminal nodes u get safe nodes that dont come out of a cycle or a different acyclic branch.
# safe nodes are nodes through which all the possible paths end at a terminal node, means no path enters in cycle.

#  those nodes which are part of cycle will never get indegree =0 and hence will not not be added to safe nodes array to output.

class Solution {
    public List<Integer> eventualSafeNodes(int[][] adj) {
        int V=adj.length;
        List<List<Integer>> adjRev = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adjRev.add(new ArrayList<>());
        }
        int indegree[] = new int[V];
        for (int i = 0; i < V; i++) {
            // i -> it
            // it -> i
            for (int it : adj[i]) {
                adjRev.get(it).add(i);
                indegree[i]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        List<Integer> safeNodes = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }

        while (!q.isEmpty()) {
            int node = q.peek();
            q.remove();
            safeNodes.add(node);
            for (int it : adjRev.get(node)) {
                indegree[it]--;
                if (indegree[it] == 0) q.add(it);
            }
        }
        Collections.sort(safeNodes);
        return safeNodes;
    }
}

