https://www.geeksforgeeks.org/problems/partitions-with-given-difference/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=partitions-with-given-difference

Given an array arr, partition it into two subsets(possibly empty) such that each element must belong to only one subset. Let the sum of the elements of these two subsets be S1 and S2. 
Given a difference d, count the number of partitions in which S1 is greater than or equal to S2 and the difference between S1 and S2 is equal to d. Since the answer may be large return it modulo 109 + 7.

Example 1:

Input:
n = 4
d = 3
arr[] =  { 5, 2, 6, 4}
Output: 1
Explanation:
There is only one possible partition of this array. Partition : {6, 4}, {5, 2}. The subset difference between subset sum is: (6 + 4) - (5 + 2) = 3.

# java

DP II Approach I:

public class Solution {
    private static final int MOD = 1000000007;

    public static int countPartitions(int n, int d, int[] arr) {
        int totSum = Arrays.stream(arr).sum();

        if (totSum - d < 0 || (totSum - d) % 2 == 1) {
            return 0;
        }

        return findWays(arr, (totSum - d) / 2);
    }

    private static int findWays(int[] num, int tar) {
        int n = num.length;
        int[][] dp = new int[n][tar + 1];

        if (num[0] == 0) {
            dp[0][0] = 2; // 2 cases - pick and not pick
        } else {
            dp[0][0] = 1; // 1 case - not pick
        }

        if (num[0] != 0 && num[0] <= tar) {
            dp[0][num[0]] = 1; // 1 case - pick
        }

        for (int ind = 1; ind < n; ind++) {
            for (int target = 0; target <= tar; target++) {
                int notTaken = dp[ind - 1][target];
                int taken = 0;
                if (num[ind] <= target) {
                    taken = dp[ind - 1][target - num[ind]];
                }

                dp[ind][target] = (notTaken + taken) % MOD;
            }
        }

        return dp[n - 1][tar];
    }
}

DP II Approach II:

public class Solution {
    private static final int MOD = 1000000007;

    public static int countPartitions(int n, int d, int[] arr) {
        int totSum = 0;
        for (int num : arr) {
            totSum += num;
        }

        if (totSum - d < 0 || (totSum - d) % 2 == 1) {
            return 0;
        }

        return findWays(arr, (totSum - d) / 2);
    }

    private static int findWays(int[] arr, int targetSum) {
        int n = arr.length;
        int[][] dp = new int[n + 1][targetSum + 1];

        // Initialize the dp array
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }

        // Fill the dp array
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= targetSum; j++) {
                dp[i][j] = dp[i - 1][j] % MOD;
                if (arr[i - 1] <= j) {
                    dp[i][j] = (dp[i][j] + dp[i - 1][j - arr[i - 1]]) % MOD;
                }
            }
        }

        return dp[n][targetSum];
    }
}

# DP II Approach III:

class Solution {

    private static final int MOD = 1000000007;

    public static int countPartitions(int n, int d, int[] arr) {
        int totSum = 0;
        for (int num : arr) {
            totSum += num;
        }

        if (totSum - d < 0 || (totSum - d) % 2 == 1) {
            return 0;
        }

        int targetSum = (totSum - d) / 2;
        int[][] dp = new int[n + 1][targetSum + 1];

        // Initialize base cases
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }

        // Fill the dp array
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= targetSum; j++) {
                dp[i][j] = dp[i - 1][j] % MOD;
                if (arr[i - 1] <= j) {
                    dp[i][j] = (dp[i][j] + dp[i - 1][j - arr[i - 1]]) % MOD;
                }
            }
        }

        return dp[n][targetSum];
    }

}

class Solution {
    
    private static final int MOD = 1000000007;
    private static int[][] dp;

    public static int countPartitions(int n, int d, int[] num) {
        int totSum = 0;
        for (int value : num) {
            totSum += value;
        }
        
        // Checking for edge cases
        if (totSum - d < 0 || (totSum - d) % 2 == 1) {
            return 0;
        }
        
        int s2 = (totSum - d) / 2;
        dp = new int[n][s2 + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        
        return f(n - 1, s2, num);
    }

    private static int f(int index, int target, int[] num) {
        if (target < 0) {
            return 0;
        }
        if (index == 0) {
            if (target == 0 && num[0] == 0) {
                return 2;
            }
            if (target == 0 || target == num[0]) {
                return 1;
            }
            return 0;
        }

        // If the subproblem has already been solved, return the result from the memoization table
        if (dp[index][target] != -1) {
            return dp[index][target];
        }

        // If the current element is not taken
        int notTaken = f(index - 1, target, num);

        // If the current element is taken
        int taken = 0;
        if (num[index] <= target) {
            taken = f(index - 1, target - num[index], num);
        }

        // Save the result in dp and return
        dp[index][target] = (notTaken + taken) % MOD;
        return dp[index][target];
    }
}


# python

DP II Approach I:

from typing import List
class Solution:
    def countPartitions(self, n : int, d : int, arr : List[int]) -> int:
        mod=int(1e9+7)
        
        def findWays(num, tar):
            n = len(num)
            dp = [[0] * (tar + 1) for _ in range(n)]
            
            if num[0] == 0:
                dp[0][0] = 2 # 2 cases - pick and not pick
            else:
                dp[0][0] = 1 # 1 case - not pick
            
            if num[0] != 0 and num[0] <= tar:
                dp[0][num[0]] = 1 # 1 case - pick
            
            for ind in range(1, n):
                for target in range(tar + 1):
                    notTaken = dp[ind - 1][target]
                    taken = 0
                    if num[ind] <= target:
                        taken = dp[ind - 1][target - num[ind]]
                
                    dp[ind][target] = (notTaken + taken) % mod
            return dp[n - 1][tar]
        
        
        totSum = sum(arr)
    
        if (totSum - d) < 0 or (totSum - d) % 2==1: # if d>totsum or totsum-d is not divisible by 2
            return 0
        
        return findWays(arr, (totSum - d) // 2)

DP II Approach II:

from typing import List
class Solution:
    def countPartitions(self, n : int, d : int, arr : List[int]) -> int:
        MOD=10**9+7 # or int(1e9)+7
        
        def findWays(arr, target_sum):
            
            dp = [[0 for _ in range(target_sum + 1)] for _ in range(n + 1)]
        
            for i in range(n + 1):
                dp[i][0] = 1
    
            for i in range(1, n + 1):
                for j in range(target_sum + 1):
                    dp[i][j] = dp[i-1][j] % MOD
                    if arr[i-1] <= j:
                        dp[i][j] = (dp[i][j] + dp[i-1][j-arr[i-1]]) % MOD
    
            return dp[n][target_sum]
        
        
        totSum = sum(arr)
    
        if (totSum - d) < 0 or (totSum - d) % 2==1: # if d>totsum or totsum-d is not divisible by 2
            return 0
        
        return findWays(arr, (totSum - d) // 2)
        return dp[n][target_sum]

# DP II Approach III:

class Solution:
    def countPartitions(self, n : int, d : int, arr : List[int]) -> int:
        MOD= int(1e9)+7
        
        # def findWays(arr, target_sum):
        totSum = sum(arr)
        
        if (totSum - d) < 0 or (totSum - d) % 2==1: # if d>totsum or totsum-d is not divisible by 2
            return 0   
            
        target_sum=(totSum - d) // 2 
        dp = [[0 for _ in range(target_sum + 1)] for _ in range(n + 1)]
    
        for i in range(n + 1):
            dp[i][0] = 1

        for i in range(1, n + 1):
            for j in range(target_sum + 1):
                dp[i][j] = dp[i-1][j] % MOD
                if arr[i-1] <= j:
                    dp[i][j] = (dp[i][j] + dp[i-1][j-arr[i-1]]) % MOD

        return dp[n][target_sum]


# DP I:

from typing import List
class Solution:
    def countPartitions(self, n : int, d : int, num : List[int]) -> int:
        MOD=(10**9)+7
        def f(index, target):
            nonlocal dp  # Define dp as non-local variable
            if target < 0:
                return 0
            if index == 0:
                if target == 0 and arr[0] == 0:
                    return 2
                if target == 0 or target == arr[0]:
                    return 1
                return 0
            
    
            # If the subproblem has already been solved, return the result from the memoization table
            if dp[index][target] != -1:
                return dp[index][target]
    
            # If the current element is not taken
            not_taken = f(index - 1, target)
            # If the current element is taken
            taken = 0
            if num[index] <= target:
                taken = f(index - 1, target - num[index])
    
            # Save the result in dp and return
            dp[index][target] = (not_taken + taken) % MOD
            return dp[index][target]
        
        # n = len(arr)
        totSum = sum(num)
        
        # Checking for edge cases
        if totSum - d < 0:
            return 0
        if (totSum - d) % 2 == 1:
            return 0
        
        s2 = (totSum - d) // 2
        
        dp = [[-1 for j in range(s2 + 1)] for i in range(n)]
        return f(n-1, s2)
