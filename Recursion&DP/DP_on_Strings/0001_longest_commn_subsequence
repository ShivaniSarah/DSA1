https://leetcode.com/problems/longest-common-subsequence/description/

Given two strings text1 and text2, return the length of their longest common subsequence.
If there is no common subsequence, return 0.
A subsequence of a string is a new string generated from the original string
with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

Example 1:
Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

Example 2:
Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.

Example 3:
Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.

# DP I:

class Solution(object):
    def longestCommonSubsequence(self, text1, text2):
        def lcsUtil(s1, s2, ind1, ind2, dp):
            if ind1 < 0 or ind2 < 0:
                return 0
            if dp[ind1][ind2] != -1:
                return dp[ind1][ind2]

            if s1[ind1] == s2[ind2]:
                dp[ind1][ind2] = 1 + lcsUtil(s1, s2, ind1 - 1, ind2 - 1, dp)
            else:
                # If the characters do not match, consider both possibilities:
                # 1. Exclude character from s1 and continue matching in s2
                # 2. Exclude character from s2 and continue matching in s1
                dp[ind1][ind2] = max(lcsUtil(s1, s2, ind1, ind2 - 1, dp), lcsUtil(s1, s2, ind1 - 1, ind2, dp))
            
            return dp[ind1][ind2]

        n = len(text1)
        m = len(text2)
        dp = [[-1 for j in range(m)] for i in range(n)]
        return lcsUtil(text1, text2, n - 1, m - 1, dp)

# DP II:

class Solution(object):
    def longestCommonSubsequence(self, s1, s2):
        n = len(s1)
        m = len(s2)
        
        dp = [[-1 for j in range(m + 1)] for i in range(n + 1)]

        # - The length of LCS with an empty string is 0, so dp[i][0] = 0 for all i
        # - The length of LCS with an empty string is 0, so dp[0][j] = 0 for all j
        for i in range(n + 1):
            dp[i][0] = 0
        for j in range(m + 1):
            dp[0][j] = 0

        for ind1 in range(1, n + 1):
            for ind2 in range(1, m + 1):
                if s1[ind1 - 1] == s2[ind2 - 1]:
                    # If the characters match, increment the LCS length
                    dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1]
                else:
                    # If the characters do not match, take the maximum of
                    # LCS length without one character from s1 or s2
                    dp[ind1][ind2] = max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1])
        
        return dp[n][m]



