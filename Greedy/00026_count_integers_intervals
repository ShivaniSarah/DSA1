https://leetcode.com/problems/count-integers-in-intervals/description/

Given an empty set of intervals, implement a data structure that can:
Add an interval to the set of intervals.
Count the number of integers that are present in at least one interval.
Implement the CountIntervals class:
CountIntervals() Initializes the object with an empty set of intervals.
void add(int left, int right) Adds the interval [left, right] to the set of intervals.
int count() Returns the number of integers that are present in at least one interval.
Note that an interval [left, right] denotes all the integers x where left <= x <= right.

Example 1:
Input
["CountIntervals", "add", "add", "count", "add", "count"]
[[], [2, 3], [7, 10], [], [5, 8], []]
Output
[null, null, null, 6, null, 8]

Explanation
CountIntervals countIntervals = new CountIntervals(); // initialize the object with an empty set of intervals. 
countIntervals.add(2, 3);  // add [2, 3] to the set of intervals.
countIntervals.add(7, 10); // add [7, 10] to the set of intervals.
countIntervals.count();    // return 6
                           // the integers 2 and 3 are present in the interval [2, 3].
                           // the integers 7, 8, 9, and 10 are present in the interval [7, 10].
countIntervals.add(5, 8);  // add [5, 8] to the set of intervals.
countIntervals.count();    // return 8
                           // the integers 2 and 3 are present in the interval [2, 3].
                           // the integers 5 and 6 are present in the interval [5, 8].
                           // the integers 7 and 8 are present in the intervals [5, 8] and [7, 10].
                           // the integers 9 and 10 are present in the interval [7, 10].

# Java

class CountIntervals {

    // key, value => left, right
    TreeMap<Integer, Integer> m;
    int count = 0;

    public CountIntervals() {
        m = new TreeMap<>();
    }

    public void add(int left, int right) {
        if (m.floorKey(right) != null && m.get(m.floorKey(right)) < left) {
            count += right - left + 1;
            m.put(left, right);
        } else {
            int start = left, end = right;
            while (m.floorKey(end) != null && m.get(m.floorKey(end)) >= left) {
                int l = m.floorKey(end);
                int r = m.get(l);
                count -= r - l + 1;
                m.remove(l);

                start = Math.min(start, l);
                end = Math.max(end, r);
            }
            count += end - start + 1;
            m.put(start, end);
        }
    }

    public int count() {
        return count;
    }
}

/**
 * Your CountIntervals object will be instantiated and called as such:
 * CountIntervals obj = new CountIntervals();
 * obj.add(left,right);
 * int param_2 = obj.count();
 */
