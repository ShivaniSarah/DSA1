https://leetcode.com/problems/car-pooling/

There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).
You are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that
the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. 
The locations are given as the number of kilometers due east from the car's initial location.
Return true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.

Example 1:
Input: trips = [[2,1,5],[3,3,7]], capacity = 4
Output: false

# java

class Solution {
    public boolean carPooling(int[][] trips, int capacity) {
	
		// Sorting the Array by Pick up Position of Passengers
        Arrays.sort(trips, (a,b) -> Integer.compare(a[1], b[1]));
        
		
		// Using Min Heap to Store All Passengers and 
		// Passenger with Minimum Drop Location at Top of Heap
        PriorityQueue<int[]> pq = 
            new PriorityQueue<>(trips.length, (a,b) -> Integer.compare(a[2], b[2]));
        
        int sum = 0; // to keep track of filled seats in the cab at any point of time
        int pos = 0; // to keep track of location/position of cab throughout the trip
		
        for(int i =0; i < trips.length; i++){
            pos = trips[i][1]; // updating the position after reaching a passenger crowd
            pq.add(trips[i]); // adding passengers to queue
            
			// now keep on removing passengers until 
			// we remove all whose drop location is less than current location of Cab
			while(pq.peek()[2] <= pos){
                sum = sum-pq.poll()[0];
            }
			
			// Basic check if all passengers from a given stop can aquire seat in the Cab or not
            if(trips[i][0] > capacity - sum){
                return false;
            }else{
                sum += trips[i][0];
            }
        }
        return true;
    }
}

or

class Solution{
    public boolean carPooling(int[][] trips, int capacity) {
	// 1. sort trips by start_location
    Arrays.sort(trips, new Comparator<int[]>(){
        public int compare(int[] i1, int[] i2) {
            return i1[1] - i2[1];
        }
    });

    Queue<int[]> theQueue = new PriorityQueue<int[]>(new Comparator<int[]>(){
         public int compare(int[] t1, int[] t2) {
             return t1[2] - t2[2];
         }
    });

    for (int i = 0; i < trips.length; i++) {
        while (!theQueue.isEmpty() && theQueue.peek()[2] <= trips[i][1]) { // 2. remove dead trips
            capacity += theQueue.peek()[0];
            theQueue.poll();
        }
		// 3. update capacity
        capacity -= trips[i][0];
        theQueue.offer(trips[i]);
        if( capacity < 0 )
            return false;
    }
    return true;
}
}
