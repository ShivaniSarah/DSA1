https://www.geeksforgeeks.org/problems/selection-sort/1

TC : O(N^2)

Input:
N = 5
arr[] = {4, 1, 3, 9, 7}
Output:
1 3 4 7 9
Explanation:
Maintain sorted (in bold) and unsorted subarrays.
Select 1. Array becomes 1 4 3 9 7.
Select 3. Array becomes 1 3 4 9 7.
Select 4. Array becomes 1 3 4 9 7.
Select 7. Array becomes 1 3 4 7 9.
Select 9. Array becomes 1 3 4 7 9.

# java

class Solution
{
	void selectionSort(int arr[], int n)
	{
	    for (int i = 0; i < n - 1; i++) {
              	int mini = i;
		for (int j = i + 1; j < n; j++) {
                    if (arr[j] < arr[mini]) {
                    mini = j;
                    }
                }
            //swap
            int temp = arr[mini];
            arr[mini] = arr[i];
            arr[i] = temp;
            }
	}
}

# recursive

class Solution
{   
    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    private int findMinIndex(int[] arr, int start) {
        int minIndex = start;
        for (int i = start + 1; i < arr.length; i++) {
            if (arr[i] < arr[minIndex]) {
                minIndex = i;
            }
        }
        return minIndex;
    }
    private void selectionSortRecursive(int[] arr, int start) {
        // Base case: If the start index is at the last element, the array is sorted
        if (start >= arr.length - 1) {
            return;
        }
        
        // Find the index of the minimum element in the unsorted portion
        int minIndex = findMinIndex(arr, start);
        
        // Swap the found minimum element with the first element of the unsorted portion
        if (minIndex != start) {
            swap(arr, start, minIndex);
        }
        
        // Recursively sort the remaining unsorted portion of the array
        selectionSortRecursive(arr, start + 1);
    }
	void selectionSort(int arr[], int n)
	{
	    selectionSortRecursive(arr, 0);
	}
}
