https://leetcode.com/problems/find-right-interval/

You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.
The right interval for an interval i is an interval j such that startj >= endi and startj is minimized. Note that i may equal j.
Return an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.

Example 1:
Input: intervals = [[1,2]]
Output: [-1]
Explanation: There is only one interval in the collection, so it outputs -1.

Example 2:
Input: intervals = [[3,4],[2,3],[1,2]]
Output: [-1,0,1]
Explanation: There is no right interval for [3,4].
The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.
The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.

Example 3:
Input: intervals = [[1,4],[2,3],[3,4]]
Output: [-1,2,-1]
Explanation: There is no right interval for [1,4] and [3,4].
The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.

# java

class Solution {
    public int[] findRightInterval(int[][] intervals) {
        int n = intervals.length;
        int[] result = new int[n];
        Arrays.fill(result, -1);
        
        // List to store intervals with their original indices
        List<int[]> intervalList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            intervalList.add(new int[]{intervals[i][0], intervals[i][1], i});
        }
        
        // Sort the list based on the start times of intervals
        intervalList.sort(Comparator.comparingInt(a -> a[0]));
        
        // Extract the start times in sorted order
        int[] starts = new int[n];
        for (int i = 0; i < n; i++) {
            starts[i] = intervalList.get(i)[0];
        }
        
        // Find the right interval for each interval
        for (int i = 0; i < n; i++) {
            int end = intervals[i][1];
            int idx = binarySearch(starts, end);
            if (idx < n) {
                result[i] = intervalList.get(idx)[2];
            }
        }
        
        return result;
    }
    
    // Binary search to find the smallest start time >= end time
    private int binarySearch(int[] starts, int end) {
        int left = 0, right = starts.length;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (starts[mid] >= end) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
}
