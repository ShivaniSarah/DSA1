https://www.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1

You are given weights and values of N items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. 
Note that we have only one quantity of each item.
In other words, given two integer arrays val[0..N-1] and wt[0..N-1] which represent values and weights associated with N items respectively.
Also given an integer W which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of 
this subset is smaller than or equal to W. You cannot break an item, either pick the complete item or dont pick it (0-1 property).

Example 1:

Input:
N = 3
W = 4
values[] = {1,2,3}
weight[] = {4,5,1}
Output: 3
Explanation: Choose the last item that weighs 1 unit and holds a value of 3. 


Input:
N = 3
W = 3
values[] = {1,2,3}
weight[] = {4,5,6}
Output: 0
Explanation: Every item has a weight exceeding the knapsack's capacity (3).

# DP II: tabulation

class Solution:
    def knapSack(self,W, wt, val, n):

        dp = [[0 for _ in range(W + 1)] for _ in range(n+1)]
            
        for i in range(1,n+1):
            for w in range(W + 1):
                
                if wt[i - 1] <= w:                               
                    dp[i][w] = max(val[i - 1] + dp[i - 1][w - wt[i - 1]], dp[i - 1][w])
                else:                            
                    dp[i][w] = dp[i - 1][w]
    
        return dp[n][W]

# DP I: Memoization

def knapsackUtil(wt, val, ind, W, dp):
            if ind == 0:
                if wt[0] <= W:
                    return val[0]
                else:
                    return 0
            
            if dp[ind][W] != -1:
                return dp[ind][W]
            
            notTaken = 0 + knapsackUtil(wt, val, ind - 1, W, dp)
            
            taken = -sys.maxsize
            if wt[ind] <= W:
                taken = val[ind] + knapsackUtil(wt, val, ind - 1, W - wt[ind], dp)
            
            dp[ind][W] = max(notTaken, taken)
            return dp[ind][W]
    
dp = [[-1 for j in range(W + 1)] for i in range(n)]
return knapsackUtil(wt, val, n - 1, W, dp)


# Recursion:

def f(i, cur_wt, dp):
            if i == n:
                return 0
            if dp[i][cur_wt] != -1:
                return dp[i][cur_wt]
            
            # Option 1: Do not take the current item
            not_taken = f(i + 1, cur_wt, dp)
            
            # Option 2: Take the current item if it fits
            taken = 0
            if cur_wt + wt[i] <= W:
                taken = val[i] + f(i + 1, cur_wt + wt[i], dp)
            
            dp[i][cur_wt] = max(taken, not_taken)
            return dp[i][cur_wt]

dp = [[-1 for _ in range(W + 1)] for _ in range(n)]
return f(0, 0, dp)


# my wrong code needs to be improved

def f(i, W, wt, val, n, cur_wt, cur_price, dp):
            if cur_wt > W:  # If current weight exceeds the limit, return negative infinity
                return -float('inf')
            if i == n:  # If all items are considered, return the current price
                return cur_price
            if dp[i][cur_wt] != -1:  # If the value is already computed, return it
                return dp[i][cur_wt]
    
            # Option 1: Do not take the current item
            not_taken = f(i + 1, W, wt, val, n, cur_wt, cur_price, dp)
    
            # Option 2: Take the current item if it fits
            taken= f(i + 1, W, wt, val, n, cur_wt, cur_price, dp)
            
            if cur_wt + wt[i] <= W:
                taken = f(i + 1, W, wt, val, n, cur_wt + wt[i], cur_price + val[i], dp)
            
            dp[i][cur_wt] = max(taken, not_taken)
            return dp[i][cur_wt]

        dp = [[-1 for _ in range(W+1)] for _ in range(n)]  # Initialize DP table
        return f(0, W, wt, val, n, 0, 0, dp)
