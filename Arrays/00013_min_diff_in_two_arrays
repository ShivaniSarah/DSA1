https://www.geeksforgeeks.org/smallest-difference-pair-values-two-unsorted-arrays/

Implement a function that takes in two non-empty arrays of integers,
finds the pair of numbers (one from each array) who absolute difference is closest to zero,
and returns a pair containing these two numbers,
with the first number from array. Only one such pair will exist for the test.

Input

Array1 = [23, 5, 10, 17, 30]
Array2 = [26, 134, 135, 14, 19]
Output

17,19

# java

static int findSmallestDifference(int A[], int B[],
                                      int m, int n)
    {
        // Sort both arrays 
        // using sort function
        Arrays.sort(A);
        Arrays.sort(B);
     
        int a = 0, b = 0;
     
        // Initialize result as max value
        int result = Integer.MAX_VALUE;
     
        // Scan Both Arrays upto 
        // sizeof of the Arrays
        while (a < m && b < n)
        {
            if (Math.abs(A[a] - B[b]) < result)
                result = Math.abs(A[a] - B[b]);
     
            // Move Smaller Value
            if (A[a] < B[b])
                a++;
     
            else
                b++;
        }
         
        // return final sma result
        return result; 
    }

or

public static int findSmallestDifference(int[] A, int[] B, int m, int n) {
        int minDiff = Integer.MAX_VALUE; // Initialize with maximum integer value
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int diff = Math.abs(A[i] - B[j]); // Calculate absolute difference
                if (diff < minDiff) {
                    minDiff = diff; // Update smallest difference found so far
                }
            }
        }
        return minDiff;
    }

# python

# Approach I:

from typing import List, Tuple
import bisect

def min_difference(a1: List[int], a2: List[int]) -> Tuple[int, int]:
    # Sort the second list
    a2.sort()
    p1, p2 = 0, 0
    diff = float('inf')
    
    # Iterate over the first list and do a binary search in the second list
    for x in a1:
        # Find the lower bound (index of the first element not less than x)
        lb = bisect.bisect_left(a2, x)
        
        # Check the element just before the lower bound
        if lb >= 1 and x - a2[lb - 1] < diff:
            diff = x - a2[lb - 1]
            p1 = x
            p2 = a2[lb - 1]
        
        # Check the element at the lower bound
        if lb != len(a2) and a2[lb] - x < diff:
            diff = a2[lb] - x
            p1 = x
            p2 = a2[lb]
    
    return p1, p2

# Approach II:

# Python 3 Code to find
# Smallest Difference between
# two Arrays
import sys

# function to calculate
# Small result between
# two arrays
def findSmallestDifference(A, B, m, n):

	# Sort both arrays 
	# using sort function
	A.sort()
	B.sort()

	a = 0
	b = 0

	# Initialize result as max value
	result = sys.maxsize

	# Scan Both Arrays upto
	# sizeof of the Arrays
	while (a < m and b < n):
	
		if (abs(A[a] - B[b]) < result):
			result = abs(A[a] - B[b])

		# Move Smaller Value
		if (A[a] < B[b]):
			a += 1

		else:
			b += 1
	# return final sma result
	return result 

# Driver Code

# Input given array A
A = [1, 2, 11, 5]

# Input given array B
B = [4, 12, 19, 23, 127, 235]

# Calculate size of Both arrays
m = len(A)
n = len(B)

# Call function to 
# print smallest result
print(findSmallestDifference(A, B, m, n))

# This code is contributed by
# Smitha Dinesh Semwal

