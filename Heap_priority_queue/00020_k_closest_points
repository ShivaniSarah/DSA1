https://leetcode.com/problems/k-closest-points-to-origin/description/

K Closest Points to Origin

Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, 
return the k closest points to the origin (0, 0).
The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).
You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

Example 1:
Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].

# java

class Solution {
    public class Point implements Comparable<Point>{
        int x;
        int y;
        int dist;
        int i;
        public Point(int x, int y, int dist, int i){
            this.x=x;
            this.y=y;
            this.dist=dist;
            this.i=i;
        }
        @Override
        public int compareTo(Point p2){
            return this.dist-p2.dist; // Ascending Order Sorting
        }

    }
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<Point> pq=new PriorityQueue<>();
        for(int i=0;i<points.length;i++){
            int dist=(points[i][0]*points[i][0])+(points[i][1]*points[i][1]);
            pq.add(new Point(points[i][0],points[i][1],dist,i));
        }
        int[][] ans=new int[k][];
        for(int i =0; i<k ;i++){
            Point point=pq.remove();
            ans[i]=new int[]{points[point.i][0],points[point.i][1]};
        }
        return ans;
    }
}

or

class Solution {
    public class Point {
        int x;
        int y;
        int dist;
        int i;
        public Point(int x, int y, int dist, int i){
            this.x=x;
            this.y=y;
            this.dist=dist;
            this.i=i;
        }

    }
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<Point> pq=new PriorityQueue<>((a,b)->{
            if(a.dist < b.dist){
                return -1;
            }
            else if(a.dist > b.dist){
                return 1;
            }
            else return 0;
        });
        for(int i=0;i<points.length;i++){
            int dist=(points[i][0]*points[i][0])+(points[i][1]*points[i][1]);
            pq.add(new Point(points[i][0],points[i][1],dist,i));
        }
        int[][] ans=new int[k][];
        for(int i =0; i<k ;i++){
            Point point=pq.remove();
            ans[i]=new int[]{points[point.i][0],points[point.i][1]};
        }
        return ans;
    }
}

or

class Solution {
    public class Point {
        int x;
        int y;
        int dist;
        int i;
        public Point(int x, int y, int dist, int i){
            this.x=x;
            this.y=y;
            this.dist=dist;
            this.i=i;
        }

    }
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<Point> pq=new PriorityQueue<>((a,b)->{
           return a.dist - b.dist;
        });
        for(int i=0;i<points.length;i++){
            int dist=(points[i][0]*points[i][0])+(points[i][1]*points[i][1]);
            pq.add(new Point(points[i][0],points[i][1],dist,i));
        }
        int[][] ans=new int[k][];
        for(int i =0; i<k ;i++){
            Point point=pq.remove();
            ans[i]=new int[]{points[point.i][0],points[point.i][1]};
        }
        return ans;
    }
}
