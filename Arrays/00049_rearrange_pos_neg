https://leetcode.com/problems/rearrange-array-elements-by-sign/description/

You are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers.
You should return the array of nums such that the the array follows the given conditions:
Every consecutive pair of integers have opposite signs.
For all integers with the same sign, the order in which they were present in nums is preserved.
The rearranged array begins with a positive integer.
Return the modified array after rearranging the elements to satisfy the aforementioned conditions.

Example 1:

Input: nums = [3,1,-2,-5,2,-4]
Output: [3,-2,1,-5,2,-4]
Explanation:
The positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].
The only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].
Other ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions.  

Example 2:
Input: nums = [-1,1]
Output: [1,-1]
Explanation:
1 is the only positive integer and -1 the only negative integer in nums.
So nums is rearranged to [1,-1].

#java

import java.util.*;

public class Solution {
    public int[] rearrangeArray(int[] nums) {
        List<Integer> pos = new ArrayList<>();
        List<Integer> neg = new ArrayList<>();
        int n = nums.length;
        
        // Segregate the array into positives and negatives.
        for (int num : nums) {
            if (num > 0) {
                pos.add(num);
            } else {
                neg.add(num);
            }
        }
        
        int[] result = new int[n];
        int posSize = pos.size();
        int negSize = neg.size();
        
        // If positives are lesser than the negatives.
        if (posSize < negSize) {
            // First, fill array alternatively till the point 
            // where positives and negatives are equal in number.
            for (int i = 0; i < posSize; i++) {
                result[2 * i] = pos.get(i);
                result[2 * i + 1] = neg.get(i);
            }
            
            // Fill the remaining negatives at the end of the array.
            int index = posSize * 2;
            for (int i = posSize; i < negSize; i++) {
                result[index] = neg.get(i);
                index++;
            }
        }
        // If negatives are lesser than the positives.
        else {
            // First, fill array alternatively till the point 
            // where positives and negatives are equal in number.
            for (int i = 0; i < negSize; i++) {
                result[2 * i] = pos.get(i);
                result[2 * i + 1] = neg.get(i);
            }
            
            // Fill the remaining positives at the end of the array.
            int index = negSize * 2;
            for (int i = negSize; i < posSize; i++) {
                result[index] = pos.get(i);
                index++;
            }
        }
        
        return result;
    }
    
}

or

public class Solution {
    public int[] rearrangeArray(int[] nums) {
        int n = nums.length;
        int[] ans = new int[n];
        
        // positive elements start from 0 and negative from 1.
        int posIndex = 0, negIndex = 1;
        for (int num : nums) {
            if (num < 0) {
                ans[negIndex] = num;
                negIndex += 2;
            } else {
                ans[posIndex] = num;
                posIndex += 2;
            }
        }
        
        return ans;
    }
}

or

public class Solution {
    public int[] rearrangeArray(int[] nums) {
        List<Integer> pos = new ArrayList<>();
        List<Integer> neg = new ArrayList<>();

        // Segregate the array into positives and negatives
        for (int num : nums) {
            if (num > 0) {
                pos.add(num);
            } else {
                neg.add(num);
            }
        }

        int[] result = new int[nums.length];
        
        // Positives on even indices, negatives on odd indices
        int posIndex = 0, negIndex = 0;
        for (int i = 0; i < nums.length; i++) {
            if (i % 2 == 0) {
                result[i] = pos.get(posIndex++);
            } else {
                result[i] = neg.get(negIndex++);
            }
        }
        
        return result;
    }
    
}

# python

# brute:

class Solution:
    def rearrangeArray(self, nums: List[int]) -> List[int]:
        # Define 2 lists, one for storing positive and other for negative elements of the array.
        A=nums
        pos = []
        neg = []
    
        # Segregate the array into positives and negatives.
        for i in range(len(A)):
            if A[i] > 0:
                pos.append(A[i])
            else:
                neg.append(A[i])
    
        # Positives on even indices, negatives on odd.
        for i in range(len(pos)):
            A[2 * i] = pos[i]
        for i in range(len(neg)):
            A[2 * i + 1] = neg[i]
    
        return A

# better -> 2 pointers approach

class Solution:
    def rearrangeArray(self, nums: List[int]) -> List[int]:
        A=nums
        n = len(A)
        ans = [0] * n
        
        # positive elements start from 0 and negative from 1.
        posIndex, negIndex = 0, 1
        for i in range(n):
            
            # Fill negative elements in odd indices and inc by 2.
            if A[i] < 0:
                ans[negIndex] = A[i]
                negIndex += 2
            
            # Fill positive elements in even indices and inc by 2.
            else:
                ans[posIndex] = A[i]
                posIndex += 2
        
        return ans

# optimal

class Solution:
    def rearrangeArray(self, nums: List[int]) -> List[int]:
        A=nums
        pos = []
        neg = [] 
        n=len(A)
        # Segregate the array into positives and negatives.
        for i in range(n):
            if A[i] > 0:
                pos.append(A[i])
            else:
                neg.append(A[i])
        
        # If positives are lesser than the negatives.
        if len(pos) < len(neg):
            # First, fill array alternatively till the point 
            # where positives and negatives are equal in number.
            for i in range(len(pos)):
                A[2*i] = pos[i]
                A[2*i+1] = neg[i]
            
            # Fill the remaining negatives at the end of the array.
            index = len(pos)*2
            for i in range(len(neg)-len(pos)):
                A[index] = neg[len(pos)+i]
                index += 1
        
        # If negatives are lesser than the positives.
        else:
            # First, fill array alternatively till the point 
            # where positives and negatives are equal in number.
            for i in range(len(neg)):
                A[2*i] = pos[i]
                A[2*i+1] = neg[i]
            
            # Fill the remaining positives at the end of the array.
            index = len(neg)*2
            for i in range(len(pos)-len(neg)):
                A[index] = pos[len(neg)+i]
                index += 1
        
        return A
