https://leetcode.com/problems/merge-intervals/

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals,
and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.'[/


# Optimal :

class Solution(object):
    def merge(self, arr):

        n = len(arr) 
        arr.sort()
        ans = []
        for i in range(n):
            if not ans or arr[i][0] > ans[-1][1]:          # if the current interval does not lie in the last interval
                ans.append(arr[i])    
            else:
                ans[-1][1] = max(ans[-1][1], arr[i][1])    # if the current interval lies in the last interval
            
        return ans

Brute:

class Solution(object):
    def merge(self, arr):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """
        n = len(arr) # size of the array

        # sort the given intervals:
        arr.sort()

        ans = []

        for i in range(n): # select an interval:
            start, end = arr[i][0], arr[i][1]

            # Skip all the merged intervals:
            if ans and end <= ans[-1][1]:
                continue

            # check the rest of the intervals:
            for j in range(i + 1, n):
                if arr[j][0] <= end:
                    end = max(end, arr[j][1])
                else:
                    break
            ans.append([start, end])
        return ans


            
            
            
