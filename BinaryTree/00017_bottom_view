https://www.geeksforgeeks.org/problems/bottom-view-of-binary-tree/1

Given a binary tree, print the bottom view from left to right.
A node is included in bottom view if it can be seen when we look at the tree from bottom.

                      20
                    /    \
                  8       22
                /   \        \
              5      3       25
                    /   \      
                  10    14

For the above tree, the bottom view is 5 10 3 14 25.
If there are multiple bottom-most nodes for a horizontal distance from root, then print the later one in level traversal. For example, in the below diagram, 3 and 4 are both the bottommost nodes at horizontal distance 0, we need to print 4.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree the output should be 5 10 4 14 25.


Examples :

Input:
       1
     /   \
    3     2
Output: 3 1 2
Explanation:
First case represents a tree with 3 nodes
and 2 edges where root is 1, left child of
1 is 3 and right child of 1 is 2.
Thus nodes of the binary tree will be
printed as such 3 1 2.

# java

class Solution
{
    public static class obj{
        int data;
        int level;
        public obj(int data, int level ){
            this.data = data;
            this.level = level;
        }
    }
    public ArrayList <Integer> bottomView(Node root)
    {
        ArrayList<Integer> list = new ArrayList<>();
        HashMap<Integer,obj> map = new HashMap<>();
        result(root,0,0,map);
        Set<Integer> set = map.keySet();
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for(Integer k:set){
            min = Math.min(min,k);
            max = Math.max(max,k);
        }
        for(int i=min;i<=max;i++){
            list.add(map.get(i).data);
        }
        return list;
        
    }
    public static void result(Node root,int a,int level, HashMap<Integer,obj> map){
        if(root==null){
            return;
        }
        if(map.containsKey(a)){
            if(map.get(a).level<=level){
                map.put(a,new obj(root.data,level));
            }
        }else{
            map.put(a,new obj(root.data,level));
        }
        result(root.left,a-1,level+1, map);
        result(root.right,a+1,level+1,map);
        
    }
}


or


class Solution
{
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        // Code here
        ArrayList<Integer> res = new ArrayList<>();
        Queue<Pair> q = new LinkedList<>();
        Map<Integer, Integer> map = new TreeMap<>();
        q.add(new Pair(root , 0));
        while(!q.isEmpty()){
            Pair p = q.poll();
            Node node = p.node ;
            int hd = p.hd ;
            map.put(hd , node.data);
            if(node.left != null){
                q.add(new Pair(node.left , hd-1));
            }
            if(node.right != null){
                q.add(new Pair(node.right , hd+1));
            }
        }
        for(Integer it : map.keySet()){
            res.add(map.get(it));
        }
        return res ;
    }
    class Pair{
        Node node ;
        int hd ;
        public Pair(Node n , int h){
            this.node = n ;
            this.hd = h ;
        }
    }
}

or

class Solution {
    public ArrayList<Integer> bottomView(Node root) {
        ArrayList<Integer> ans = new ArrayList<>();
        
        if (root == null) {
            return ans;
        }
        
        Queue<AbstractMap.SimpleEntry<Node, Integer>> queue = new LinkedList<>();
        Map<Integer, Integer> map = new TreeMap<>();
        queue.add(new AbstractMap.SimpleEntry<>(root, 0));
        
        while (!queue.isEmpty()) {
            AbstractMap.SimpleEntry<Node, Integer> p = queue.poll();
            Node node = p.getKey();
            int column = p.getValue();
            
            map.put(column, node.data);
            
            if (node.left != null) {
                queue.add(new AbstractMap.SimpleEntry<>(node.left, column - 1));
            }
            if (node.right != null) {
                queue.add(new AbstractMap.SimpleEntry<>(node.right, column + 1));
            }
        }
        
        for (int i : map.values()) {
            ans.add(i);
        }

        return ans;
    }
}
