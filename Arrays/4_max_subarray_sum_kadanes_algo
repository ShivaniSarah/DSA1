 # https://leetcode.com/problems/maximum-subarray/description/

# Maximum Sum of subarray

Given an integer array nums, find the subarray with the largest sum, and return its sum.

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

# Brute Force

import sys
class Solution:
    def maxSubArray(self, arr: List[int]) -> int:
        maxi = -sys.maxsize   # maximum sum
        n= len(arr)
        for i in range(n):
            for j in range(i, n):
                summ = 0
                for k in range(i, j+1):
                    summ += arr[k]
                maxi = max(maxi, summ)
        return maxi

# Better Approach

import sys
class Solution:
    def maxSubArray(self, arr: List[int]) -> int:
        n= len(arr)
        maxi = -sys.maxsize # maximum sum
        for i in range(n):
            sum = 0
            for j in range(i, n):
                sum += arr[j]
                maxi = max(maxi, sum) # getting the maximum

        return maxi

# Optimal Approach -> Kadane's Algo

import sys
class Solution:
    def maxSubArray(self, arr: List[int]) -> int:
        n= len(arr)
        maxi = -sys.maxsize
        sum = 0
        for i in range(n):
            sum += arr[i]

            if sum > maxi:
                maxi = sum

            if sum < 0:
                sum = 0

        return maxi








