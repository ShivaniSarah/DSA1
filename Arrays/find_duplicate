https://leetcode.com/problems/find-the-duplicate-number/description/

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3

Example 3:
Input: nums = [3,3,3,3,3]
Output: 3

# Brute:

class Solution:
    def findDuplicate(self, arr: List[int]) -> int:
        n = len(arr)
        arr.sort()
        for i in range(n-1):
            if (arr[i] == arr[i + 1]):
                return arr[i]

# better I

class Solution:
    def findDuplicate(self, arr: List[int]) -> int:
        n = len(arr)
        freq = [0] * (n + 1)
        for i in range(n):
            if freq[arr[i]] == 0:
                freq[arr[i]] += 1
            else:
                return arr[i]
        return 0
        
# better II:

class Solution:
    def findDuplicate(self, a: List[int]) -> int:
        n = len(a)
        freq = {}
        for i in range(n):
            freq[a[i]]= freq.get(a[i],0)+ 1
            if freq[a[i]]==2:
                return a[i]
        return 0

# optimal

class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        slow = nums[0]
        fast = nums[0]
        while True:
            slow = nums[slow]
            fast = nums[nums[fast]]
            if slow == fast:
                break
        fast = nums[0]
        while slow != fast:
            slow = nums[slow]
            fast = nums[fast]
        return slow

