https://leetcode.com/problems/move-zeroes/description/

Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Note that you must do this in-place without making a copy of the array.

Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:
Input: nums = [0]
Output: [0]

# java


public class Solution {
    public void moveZeroes(int[] a) {
        int n = a.length;
        int[] temp = new int[n];
        int nz = 0;

        // Copy non-zero elements from original to temp array
        for (int i = 0; i < n; i++) {
            if (a[i] != 0) {
                temp[nz] = a[i];
                nz++;
            }
        }

        // Copy elements from temp to fill first nz fields of original array
        for (int i = 0; i < nz; i++) {
            a[i] = temp[i];
        }

        // Fill the rest of the cells with 0
        for (int i = nz; i < n; i++) {
            a[i] = 0;
        }
    }

}

or


public class Solution {
    public void moveZeroes(int[] a) {
        int n = a.length;
        int j = -1;

        // Find the position of the first zero
        for (int i = 0; i < n; i++) {
            if (a[i] == 0) {
                j = i;
                break;
            }
        }

        // No zeroes in the array
        if (j == -1) {
            return;
        }

        // Move non-zero elements to the positions of zeroes
        for (int i = j + 1; i < n; i++) {
            if (a[i] != 0) {
                // Swap non-zero element with the zero at index j
                int temp = a[i];
                a[i] = a[j];
                a[j] = temp;
                j++;
            }
        }
    }
}




# python

# Brute:

class Solution(object):

    def moveZeroes(self,a):
        
        temp = []
        n=len(a)
        # Copy non-zero elements from original to temp array
        for i in range(n):
            if a[i] != 0:
                temp.append(a[i])
        
        # Number of non-zero elements
        nz = len(temp)
        
        # Copy elements from temp to fill first nz fields of original array
        for i in range(nz):
            a[i] = temp[i]
        
        # Fill the rest of the cells with 0
        for i in range(nz, n):
            a[i] = 0
        
        return a

# Optimal

class Solution(object):
    def moveZeroes(self,a):
        
        j = -1
        n=len(a)
        # Place the pointer j
        for i in range(n):
            if a[i] == 0:
                j = i
                break
        
        # No non-zero elements
        if j == -1:
            return a
        
        # Move the pointers i and j and swap accordingly
        for i in range(j + 1, n):
            if a[i] != 0:
                a[i], a[j] = a[j], a[i]
                j += 1
        
        return a
            
        
