https://www.geeksforgeeks.org/problems/print-all-lcs-sequences3413/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=print-all-lcs-sequences


def all_longest_common_subsequences(self, s, t):
        m, n = len(s), len(t)
        # Step 1: Build the DP table
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if s[i - 1] == t[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        
        lcs_length = dp[m][n]
        
        # Step 2: Backtrack to find all LCS
        from functools import lru_cache
        
        @lru_cache(None)
        def backtrack(i, j):
            if lcs_length == 0:
                return [""]
            
            if i == 0 or j == 0:
                return [""]
            
            if s[i - 1] == t[j - 1]:
                return [x + s[i - 1] for x in backtrack(i - 1, j - 1)]
            else:
                lcs_set = set()
                if dp[i - 1][j] == dp[i][j]:
                    lcs_set.update(backtrack(i - 1, j))
                if dp[i][j - 1] == dp[i][j]:
                    lcs_set.update(backtrack(i, j - 1))
                return sorted(lcs_set)
        
        all_lcs = sorted(set(backtrack(m, n)))
        
        return all_lcs

Approach II:

using binary search lower bound
