# Longest Band / Longest Consecutive sequence
Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

https://leetcode.com/problems/longest-consecutive-sequence/

# java

class Solution {
    public static boolean linearSearch(int []a, int num) {
        int n = a.length; //size of array
        for (int i = 0; i < n; i++) {
            if (a[i] == num)
                return true;
        }
        return false;
    }
    public int longestConsecutive(int[] a) {

        if(a.length==0) return 0;
        int n = a.length; //size of array
        int longest = 1;     
        for (int i = 0; i < n; i++) {
            int x = a[i];
            int cnt = 1;
            while (linearSearch(a, x + 1) == true) {
                x += 1;
                cnt += 1;
            }

            longest = Math.max(longest, cnt);
        }
        return longest;
    }
}

or

class Solution {
    public int longestConsecutive(int[] a) {
        int n = a.length;
        if (n == 0) return 0;
        //sort the array:
        Arrays.sort(a);
        int lastSmaller = Integer.MIN_VALUE;
        int cnt = 0;
        int longest = 1;

        //find longest sequence:
        for (int i = 0; i < n; i++) {
            if (a[i] - 1 == lastSmaller) {
                //a[i] is the next element of the
                //current sequence.
                cnt += 1;
                lastSmaller = a[i];
            } else if (a[i] != lastSmaller) {
                cnt = 1;
                lastSmaller = a[i];
            }
            longest = Math.max(longest, cnt);
        }
        return longest;
    }
}

or

class Solution {
    public int longestConsecutive(int[] a) {
        int n = a.length;
        if (n == 0)
            return 0;

        int longest = 1;
        Set<Integer> set = new HashSet<>();

        // put all the array elements into set
        for (int i = 0; i < n; i++) {
            set.add(a[i]);
        }

        // Find the longest sequence
        for (int it : set) {
            // if 'it' is a starting number
            if (!set.contains(it - 1)) {
                // find consecutive numbers
                int cnt = 1;
                int x = it;
                while (set.contains(x + 1)) {
                    x = x + 1;
                    cnt = cnt + 1;
                }
                longest = Math.max(longest, cnt);
            }
        }
        return longest;
    }
}

# python
# M I:

class Solution:
    def longestConsecutive(self, arr: List[int]) -> int:
        if arr==[]:
            return 0

        s = set(arr)
        largest_len = 1

        for element in s:
            parent = element - 1

            if parent not in s:
                next_no = element + 1
                cnt = 1

                while next_no in s:
                    next_no += 1
                    cnt += 1

                if cnt > largest_len:
                    largest_len = cnt

        return largest_len

# M II :

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:

        longest_streak = 0
        num_set = set(nums)

        for num in num_set:
            if num - 1 not in num_set:
                current_num = num
                current_streak = 1

                while current_num + 1 in num_set:
                    current_num += 1
                    current_streak += 1

                longest_streak = max(longest_streak, current_streak)

        return longest_streak      


