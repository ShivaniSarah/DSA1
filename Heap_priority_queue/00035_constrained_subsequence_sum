https://leetcode.com/problems/constrained-subsequence-sum/

Given an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.

A subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.

Example 1:

Input: nums = [10,2,-10,5,20], k = 2
Output: 37
Explanation: The subsequence is [10, 2, 5, 20].
Example 2:

Input: nums = [-1,-2,-3], k = 1
Output: -1
Explanation: The subsequence must be non-empty, so we choose the largest number.

# java

class Solution {
    public int constrainedSubsetSum(int[] nums, int k) {
        int[] dp = Arrays.copyOf(nums, nums.length);
        Deque<Integer> q = new ArrayDeque<>();
        q.offerLast(0);
        for (int i = 1; i < nums.length; i++) {
            while (!q.isEmpty() && q.peekLast() < i - k) {
                q.pollLast();
            }
            dp[i] = Math.max(dp[i], dp[q.peekLast()] + nums[i]);
            while (!q.isEmpty() && dp[q.peekFirst()] <= dp[i]) {
                q.pollFirst();
            }
            q.offerFirst(i);
        }
        int max = Integer.MIN_VALUE;
        for (int num : dp) {
            max = Math.max(max, num);
        }
        return max;
    }
}

or

class Solution {
    public int constrainedSubsetSum(int[] nums, int k) {
        int res = Integer.MIN_VALUE;
        Queue<int[]> maxHeap = new PriorityQueue<>((a,b) -> Integer.compare(b[1], a[1]));
        for (int i = 0; i < nums.length; i++) {
            while (!maxHeap.isEmpty() && (i - maxHeap.peek()[0] > k)) {
                maxHeap.poll();
            }
            int temp = -10001;
            if (!maxHeap.isEmpty()) temp = maxHeap.peek()[1];
            temp += nums[i];
            temp = Math.max(temp, nums[i]);
            res = Math.max(res, temp);
            maxHeap.add(new int[]{i, temp});
        }
        return res;
    }
}


/*
    dp(i) = max(arr[i], max(dp(i-1), dp(i-2), ... dp(i-k)) + arr[i])
*/
