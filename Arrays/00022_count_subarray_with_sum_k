Subarray Sum Equals K
https://leetcode.com/problems/subarray-sum-equals-k/description/

Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.
A subarray is a contiguous non-empty sequence of elements within an array.

Input: nums = [1,1,1], k = 2
Output: 2

Input: nums = [1,2,3], k = 3
Output: 2

# optimal :

from collections import defaultdict
class Solution(object):
    def subarraySum(self, arr, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        n = len(arr) # size of the given array.
        mpp = defaultdict(int)  # store  prefix sum
        preSum = 0
        cnt = 0

        mpp[0] = 1 # Setting 0 in the map.
        for i in range(n):
            # add current element to prefix Sum:
            preSum += arr[i]

            # Calculate x-k:
            remove = preSum - k

            # Add the number of subarrays to be removed:
            cnt += mpp[remove]

            # Update the count of prefix sum
            # in the map.
            mpp[preSum] += 1

        return cnt

class Solution(object):
    def subarraySum(self, arr, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        n = len(arr)  # size of the given array.
        cnt = 0  # Number of subarrays.

        for i in range(n):  # starting index i.
            for j in range(i, n):  # ending index j.
                # calculate the sum of subarray [i...j].
                subarray_sum = sum(arr[i:j+1])

                # Increase the count if sum == k.
                if subarray_sum == k:
                    cnt += 1

        return cnt


class Solution(object):
    def subarraySum(self, arr, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        n = len(arr)  # size of the given array.
        cnt = 0  # Number of subarrays.

        for i in range(n):  # starting index i.
            subarray_sum = 0
            for j in range(i, n):  # ending index j.
                # calculate the sum of subarray [i...j]
                # sum of [i..j-1] + arr[j]
                subarray_sum += arr[j]

                # Increase the count if sum == k.
                if subarray_sum == k:
                    cnt += 1

        return cnt








        
        
        
