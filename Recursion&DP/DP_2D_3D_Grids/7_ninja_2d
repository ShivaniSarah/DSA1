# Ninja 2D training
Geek is going for n days training program, he can perform any one of these three activities Running, Fighting, and Learning Practice. Each activity has some point on each day. as Geek wants to improve all his skills, he can't do the same activity on two consecutive days, help Geek to maximize his merit points as we were given a 2D array of n*3 points corresponding to each day and activity.

Example:
Input:
n = 3
point= [[1,2,5],[3,1,1],[3,3,3]]
Output:
11
Explanation:
Geek will learn a new move and earn 5 point then on second
day he will do running and earn 3 point and on third day
he will do fighting and earn 3 points so, maximum point is 11.

# DP II

# specific for 3 activities

class Solution:
    def maximumPoints(self, points, n):
        # Code here
        dp=[[0 for i in range(3)] for i in range(n)]
        
        for i in range(3):
            dp[0][i] = points[0][i]
            
        for i in range(1,n):
            for j in range(3):
                
                if j==0:
                    dp[i][j]= max(dp[i-1][1],dp[i-1][2]) + points[i][j]
                elif j==1:
                    dp[i][j]= max(dp[i-1][0],dp[i-1][2])+ points[i][j]
                elif j==2:
                    dp[i][j]= max(dp[i-1][0],dp[i-1][1])+ points[i][j]
        
        # print(dp)
        
        return max(dp[n-1][0],dp[n-1][1],dp[n-1][2])


# generic solution

import sys
class Solution:
    def maximumPoints(self, points, n):
        # Code here
        dp=[[0 for i in range(3)] for i in range(n)]
        m=3 # no of activities
        for i in range(m):
            dp[0][i] = points[0][i]
            
        for i in range(1,n):
            for j in range(m):
                max_i = -sys.maxsize
                for k in range(m):
                    if k!=j:
                        max_i= max(max_i,dp[i-1][k])
                dp[i][j]= max_i+points[i][j]
                    
        max_i = -sys.maxsize
        for i in range(m):
            max_i=max(max_i,dp[n-1][i])
            
        return max_i

# other's solution:

def ninjaTraining(n, points):
    # Initialize a DP table with dimensions (n x 4) to store the maximum points.
    dp = [[0 for j in range(4)] for i in range(n)]

    # Initialize the DP table for day 0 with base cases.
    dp[0][0] = max(points[0][1], points[0][2])
    dp[0][1] = max(points[0][0], points[0][2])
    dp[0][2] = max(points[0][0], points[0][1])
    dp[0][3] = max(points[0][0], max(points[0][1], points[0][2]))

    # Loop through the days starting from the second day.
    for day in range(1, n):
        for last in range(4):
            dp[day][last] = 0  # Initialize the maximum points for the current day and last activity.
            for task in range(3):
                if task != last:
                    # Calculate the total points for the current day's activity and the previous day's maximum points.
                    activity = points[day][task] + dp[day - 1][task]
                    dp[day][last] = max(dp[day][last], activity)

    # Return the maximum points achievable after the last day with any activity.
    return dp[n - 1][3]

def main():
    # Define the points matrix for each day.
    points = [[10, 40, 70],
              [20, 50, 80],
              [30, 60, 90]]
    n = len(points)  # Get the number of days.
    # Call the ninjaTraining function to find the maximum points.
    print(ninjaTraining(n, points))

if __name__ == '__main__':
    main()








