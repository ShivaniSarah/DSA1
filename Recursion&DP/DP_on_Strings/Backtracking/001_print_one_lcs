You are given two strings s and t. Now your task is to print any one longest common sub-sequences in lexicographical order.

A Sub-sequence is derived from another string by deleting some or none of the elements without changing the order of the remaining elements.

Example 1:
Input: s = abaaa, t = baabaca
Output: aaaa or abaa or baaa
Explanation - Length of lcs is 4, in lexicographical order they are aaaa, abaa, baaa

Example 2:
Input: s = aaa, t = a
Output: a

Backtracking I:

def lcs(s1, s2):
    n = len(s1)
    m = len(s2)
    
    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]
    for i in range(n + 1):
        dp[i][0] = 0
    for i in range(m + 1):
        dp[0][i] = 0

    for ind1 in range(1, n + 1):
        for ind2 in range(1, m + 1):
            if s1[ind1 - 1] == s2[ind2 - 1]:
                dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1]
            else:
                dp[ind1][ind2] = 0+max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1])

    len_ = dp[n][m]
    i = n
    j = m
      
    str_ = ""
    
    while i > 0 and j > 0:
        if s1[i - 1] == s2[j - 1]:
            str_ += s1[i - 1]       
            i -= 1
            j -= 1
        elif dp[i - 1] > dp[j - 1]:
            i -= 1
        else:
            j -= 1
    
    print("The Longest Common Subsequence is", str_[::-1]) # REVERSE OF THE ANS STRING PRINTED

def main():
    s1 = "abcde"
    s2 = "bdgek"
    
    lcs(s1, s2)

if __name__ == "__main__":
    main()


Recursive Backtracking:

def lcs_recursive(s1, s2):
    def lcs_length(x, y, dp):
        if x == 0 or y == 0:
            return 0
        if dp[x][y] is not None:
            return dp[x][y]
        if s1[x - 1] == s2[y - 1]:
            dp[x][y] = 1 + lcs_length(x - 1, y - 1, dp)
        else:
            dp[x][y] = max(lcs_length(x - 1, y, dp), lcs_length(x, y - 1, dp))
        return dp[x][y]

    def backtrack(x, y, dp):
        if x == 0 or y == 0:
            return ""
        if s1[x - 1] == s2[y - 1]:
            return backtrack(x - 1, y - 1, dp) + s1[x - 1]
        if dp[x - 1][y] > dp[x][y - 1]:
            return backtrack(x - 1, y, dp)
        else:
            return backtrack(x, y - 1, dp)

    n = len(s1)
    m = len(s2)
    dp = [[None for _ in range(m + 1)] for _ in range(n + 1)]
    lcs_length(n, m, dp)
    lcs_str = backtrack(n, m, dp)
    
    print("The Longest Common Subsequence is", lcs_str)

# Example usage
s1 = "ABCBDAB"
s2 = "BDCAB"
lcs_recursive(s1, s2)
