# Return the sum of two smallest elements in any subarray

# link: https://www.geeksforgeeks.org/problems/max-sum-in-sub-arrays0824/0?category&utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=max-sum-in-sub-arrays

Given an array Arr, with indexes running from 0 to N, select any two indexes, i and j such that i<=j-1. 
From subarray Arr[i...j], find the two smallest numbers and add them, you will get score for that subarray. 
Your task is to return maximum score possible in the given array Arr.

Input : arr[] = [4, 3, 1, 5, 6]
Output : 11
Subarrays with smallest and 
second smallest are,
[4, 3]        
smallest = 3    second smallest = 4
[4, 3, 1]    
smallest = 1    second smallest = 3
[4, 3, 1, 5]    
smallest = 1    second smallest = 3
[4, 3, 1, 5, 6]    
smallest = 1    second smallest = 3
[3, 1]         
smallest = 1    second smallest = 3
[3, 1, 5]     
smallest = 1    second smallest = 3
[3, 1, 5, 6]    
smallest = 1    second smallest = 3
[1, 5]        
smallest = 1    second smallest = 5
[1, 5, 6]    
smallest = 1    second smallest = 5
[5, 6]         
smallest = 5    second smallest = 6
Maximum sum among all 
above choices is, 5 + 6 = 11


# Solution:

import sys
class Solution:
    def pairWithMaxSum(self, arr, N):
        maxi = -sys.maxsize  # maximum sum
        
        for i in range(N-1):
            sum=arr[i]+arr[i+1]
            maxi=max(sum,maxi)
        return maxi
            
