https://leetcode.com/problems/rotate-array/submissions/1300153290/

# java

left  rotate::

public class Solution {
    // Helper function to reverse a part of the array
    void reverse(int[] array, int start, int end) {
        while (start < end) {
            int temp = array[start];
            array[start] = array[end];
            array[end] = temp;
            start++;
            end--;
        }
    }

    public void rotate(int[] arr, int k) {
        int n = arr.length;
        k = k % n; // Handle cases where k >= n

        // Reverse the first n - k elements
        reverse(arr, 0, n - k - 1);
        // Reverse the last k elements
        reverse(arr, n - k, n - 1);
        // Reverse the whole array
        reverse(arr, 0, n - 1);
    }
}

right rotate::

public class Solution {
    // Helper function to reverse a part of the array
    void reverse(int[] array, int start, int end) {
        while (start < end) {
            int temp = array[start];
            array[start] = array[end];
            array[end] = temp;
            start++;
            end--;
        }
    }

    public void rotate(int[] arr, int k) {
        int n = arr.length;
        k = k % n; // Handle cases where k >= n

        // Reverse the last k elements
        reverse(arr, n - k, n - 1);
        // Reverse the first n - k elements
        reverse(arr, 0, n - k - 1);
        // Reverse the entire array
        reverse(arr, 0, n - 1);
    }
}

another approach::

public class Solution {

    public void rightRotate(int[] nums, int k) {
        int n = nums.length;
        k = k % n; // Handle cases where k >= n

        int[] temp = Arrays.copyOf(nums, n);

        // Copy elements to the rotated positions
        for (int i = 0; i < k; i++) {
            nums[i] = temp[n - k + i];
        }
        for (int i = k; i < n; i++) {
            nums[i] = temp[i - k];
        }
    }
}
# python

Left Rotate:

class Solution(object):
    
    def left_rotate(self, arr, k):
        def reverse(arr, start, end):
            while start < end:
                arr[start], arr[end] = arr[end], arr[start]
                start += 1
                end -= 1

        n = len(arr)
        d = k % n  # To handle case when d >= n
        
        # Reverse the first d elements
        reverse(arr, 0, d - 1)
        # Reverse the remaining elements
        reverse(arr, d, n - 1)
        # Reverse the whole array
        reverse(arr, 0, n - 1)

Right Rotate:

class Solution(object):  
    def rotate(self, arr, k):
        def reverse(arr, start, end):
            while start < end:
                arr[start], arr[end] = arr[end], arr[start]
                start += 1
                end -= 1

        n = len(arr)
        d = k % n  # To handle case when d >= n
        
        # Reverse the first d elements
        reverse(arr, n-d, n-1)
        # Reverse the remaining elements
        reverse(arr, 0, n - d-1)
        # Reverse the whole array
        reverse(arr, 0, n - 1)

import copy
class Solution(object):
    def right_rotate(self, nums, k):
        n=len(nums)
        k=k%n
        num = copy.copy(nums)
        for i in range(0,k):
            nums[i]=nums[n+i-k]
        for i in range(k,n):
            nums[i]=num[i-k]
        
