Subarray Sum Equals K
https://leetcode.com/problems/subarray-sum-equals-k/description/

Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.
A subarray is a contiguous non-empty sequence of elements within an array.

Input: nums = [1,1,1], k = 2
Output: 2

Input: nums = [1,2,3], k = 3
Output: 2

# java

class Solution {
        public int subarraySum(int[] arr, int k) {
        int n = arr.length; // size of the given array
        HashMap<Integer, Integer> mpp = new HashMap<>(); // store prefix sum
        int preSum = 0;
        int cnt = 0;

        // Setting 0 in the map with count 1
        mpp.put(0, 1);

        for (int i = 0; i < n; i++) {
            // add current element to prefix Sum
            preSum += arr[i];

            // Calculate x - k
            int remove = preSum - k;

            // Add the number of subarrays to be removed
            cnt += mpp.getOrDefault(remove, 0);

            // Update the count of prefix sum in the map
            mpp.put(preSum, mpp.getOrDefault(preSum, 0) + 1);
        }
        return cnt;
    }
}

or

class Solution {
     public int subarraySum(int[] arr, int k) {
        int n = arr.length; // size of the given array.
        int cnt = 0; // Number of subarrays.

        // Iterate over all starting indices of subarrays
        for (int i = 0; i < n; i++) {
            int subarray_sum = 0;

            // Iterate over all ending indices of subarrays
            for (int j = i; j < n; j++) {
                // calculate the sum of subarray [i...j]
                // sum of [i..j-1] + arr[j]
                subarray_sum += arr[j];

                // Increase the count if sum == k
                if (subarray_sum == k) {
                    cnt += 1;
                }
            }
        }
        return cnt;   
    }
}

or

class Solution {
         public int subarraySum(int[] arr, int k) {
        int n = arr.length; // size of the given array
        int cnt = 0; // Number of subarrays

        // Iterate over all starting indices of subarrays
        for (int i = 0; i < n; i++) {
            // Iterate over all ending indices of subarrays
            for (int j = i; j < n; j++) {
                // Calculate the sum of subarray [i...j]
                int subarray_sum = 0;
                for (int p = i; p <= j; p++) {
                    subarray_sum += arr[p];
                }

                // Increase the count if sum == k
                if (subarray_sum == k) {
                    cnt += 1;
                }
            }
        }

        return cnt;
    }
}



# python

# optimal :

from collections import defaultdict
class Solution(object):
    def subarraySum(self, arr, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        n = len(arr) # size of the given array.
        mpp = defaultdict(int)  # store  prefix sum
        preSum = 0
        cnt = 0

        mpp[0] = 1 # Setting 0 in the map.
        for i in range(n):
            # add current element to prefix Sum:
            preSum += arr[i]

            # Calculate x-k:
            remove = preSum - k

            # Add the number of subarrays to be removed:
            cnt += mpp[remove]

            # Update the count of prefix sum
            # in the map.
            mpp[preSum] += 1

        return cnt

class Solution(object):
    def subarraySum(self, arr, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        n = len(arr)  # size of the given array.
        cnt = 0  # Number of subarrays.

        for i in range(n):  # starting index i.
            for j in range(i, n):  # ending index j.
                # calculate the sum of subarray [i...j].
                subarray_sum = sum(arr[i:j+1])

                # Increase the count if sum == k.
                if subarray_sum == k:
                    cnt += 1

        return cnt


class Solution(object):
    def subarraySum(self, arr, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        n = len(arr)  # size of the given array.
        cnt = 0  # Number of subarrays.

        for i in range(n):  # starting index i.
            subarray_sum = 0
            for j in range(i, n):  # ending index j.
                # calculate the sum of subarray [i...j]
                # sum of [i..j-1] + arr[j]
                subarray_sum += arr[j]

                # Increase the count if sum == k.
                if subarray_sum == k:
                    cnt += 1

        return cnt








        
        
        
