# House Robber
# A thief needs to rob money in a street. The houses in the street are arranged in a circular manner. 
# Therefore the first and the last house are adjacent to each other. The security system in the street is such that 
# if adjacent houses are robbed, the police will get notified.

# link: https://leetcode.com/problems/house-robber-ii/

# Given an array of integers â€œArr'' which represents money at each house, 
# we need to return the maximum amount of money that the thief can rob without alerting the police.
# link: https://leetcode.com/problems/house-robber-ii/

# DP II 

class Solution(object):
    def rob(self, nums_arr):
        """
        :type nums: List[int]
        :rtype: int
        """
        def f(nums):

            n=len(nums)
            if n>=1:
                
                dp = [-1 for i in range(n)]
                if n>=1:
                    dp[0]=nums[0]
                if n>=2:
                    dp[1]=max(nums[0],nums[1])
                for i in range(2,n):
                    l= dp[i-1]+0       # not pick i
                    r= dp[i-2]+nums[i] # pick i
                    dp[i]=max(l,r)
                
                return dp[n-1]
            else:
                return 0

        n=len(nums_arr)
        if n>2:
            nums1=[nums_arr[i] for i in range(0,n-1)]
            nums2 =[nums_arr[i] for i in range(1,n)]
        elif n==2:
            nums1= [nums_arr[0]]
            nums2= [nums_arr[1]]
        elif n==1:
            nums1 = [nums_arr[0]]
            nums2 = []
        else:
            return 0

        return max(f(nums1),f(nums2))

        
