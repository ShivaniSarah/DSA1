https://www.geeksforgeeks.org/problems/floor-in-a-sorted-array-1587115620/1

Given a sorted array arr[] of size n without duplicates, and given a value x.
Floor of x is defined as the largest element k in arr[] such that k is smaller than or equal to x. Find the index of k(0-based indexing).

Examples

Input: n = 7, x = 0 arr[] = {1,2,8,10,11,12,19}
Output: -1
Explanation: No element less than 0 is found. So output is "-1".

Input: n = 7, x = 5 arr[] = {1,2,8,10,11,12,19}
Output: 1
Explanation: Largest Number less than 5 is 2 (i.e k = 2), whose index is 1(0-based indexing).

# Brute

class Solution {

    // n is the size of array
    static int findFloor(long arr[], int n, long x) {
        for (int i = 0; i < n; i++) {
            if (arr[i] > x) {
                if((i-1)>=0 ){
                    return (i-1);
                }
                else
                    return -1;
            }
        }
        return n-1;
    }
}

# BS way:

class Solution {
    // n is the size of array
    static int findFloor(long arr[], int n, long x) {
        int low=0,high= n-1,ans=-1;

        while(low<=high){
            int mid= (low+high)/2;
            if(arr[mid]>x)
                high=mid-1;
            else{
                ans=mid;
                low=mid+1;
            }
        }
        return ans;
    }
}

# optimal:

class Solution {
    // n is the size of array
    static int findFloor(long arr[], int n, long x) {
        int low=0,high= n-1,ans=-1;

        while(low<=high){
            int mid= (low+high)/2;
            if(arr[mid]==x) return mid;
            else if(arr[mid]>x)
                high=mid-1;
            else{
                ans=mid;
                low=mid+1;
            }
        }
        return ans;
    }
}
