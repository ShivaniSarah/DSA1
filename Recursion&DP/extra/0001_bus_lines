

There are two bus routes red and blue, represented in an array. each index represents a city and each index value represents the cost to reach that index from previous city. You start from city at index 0. There is an additional blue cost applied when you change route from red to blue. Staying on the blue route doesnt incur any blue cost.


Return the minimum cost of reaching each city i.e each index. from city 0.


Example:
Input:
red = [2, 1, 4, 5]
blue = [3, 2, 1, 2]
blueCost = 2


Output: [0, 2, 3, 6, 8]
Explanation: Because we are starting from index 0 to reach it we need 0 cost.
Then we take red route because its minimum so 2, then again red so 2+1 = 3, then
we change route to blue route with blue cost so 3+1+2 = 6, then continue on blue to reach end 6+2 = 8


# java

private static int[] miniCost(int[] red, int[] blue, int blueCost){
    //0 -- red, 1 -- blue;
    int n = red.length;
    
    int[][] dp = new int[n + 1][2];
    dp[0][0] = 0;
    dp[0][1] = blueCost;
    int[] ans = new int[n + 1];
    
    for(int i = 1; i<= n; i++){
        
        dp[i][0] = Math.min(dp[i-1][0] + red[i-1],dp[i-1][1] + red[i-1]);
        dp[i][1] = Math.min(dp[i-1][1] + blue[i-1], dp[i-1][0] + blue[i-1] + blueCost);
        ans[i] = Math.min(dp[i][1],dp[i][0]);

    }
    return ans;
}
