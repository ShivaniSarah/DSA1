https://leetcode.com/problems/number-of-flowers-in-full-bloom/description/

You are given a 0-indexed 2D integer array flowers, where flowers[i] = [starti, endi] means the ith flower will be in full bloom from starti to endi (inclusive). You are also given a 0-indexed integer array people of size n, where people[i] is the time that the ith person will arrive to see the flowers.

Return an integer array answer of size n, where answer[i] is the number of flowers that are in full bloom when the ith person arrives.

Example 1:
Input: flowers = [[1,6],[3,7],[9,12],[4,13]], people = [2,3,7,11]
Output: [1,2,2,2]
Explanation: The figure above shows the times when the flowers are in full bloom and when the people arrive.
For each person, we return the number of flowers in full bloom during their arrival.

# java

class Solution {
    public int[] fullBloomFlowers(int[][] flowers, int[] people) 
    {
        int n = people.length;
        // for sorting and handle problem.
        int[] nums = Arrays.copyOf(people, n);
        Arrays.sort(nums);
        Arrays.sort(flowers, (a, b) -> a[0] - b[0]);
        // save the end blooming time of currently blooming flowers
        PriorityQueue<Integer> list = new PriorityQueue<>();
        // HashMap<people[] value, how many flowers blooming>
        HashMap<Integer, Integer> map = new HashMap<>();
        
        int index = 0;
        for (int i = 0; i < n; i++)
        {
            // first poll() all the flowers finished blooming
            while (list.size() > 0 && list.peek() < nums[i])
                list.poll();
            // add all the flowers started blooming
            while (index < flowers.length && flowers[index][0] <= nums[i])
            {
                if (flowers[index][1] >= nums[i])
                    list.offer(flowers[index][1]);
                index++;
            }
            // record its relationship with array people[]
            map.put(nums[i], list.size());
        }    

        int[] result = new int[n];
        for (int i = 0; i < n; i++)
            result[i] = map.get(people[i]);
        return result;
    }
}
