https://leetcode.com/problems/minimum-interval-to-include-each-query/description/

You are given a 2D integer array intervals, where intervals[i] = [lefti, righti]
describes the ith interval starting at lefti and ending at righti (inclusive). 
The size of an interval is defined as the number of integers it contains, or more formally righti - lefti + 1.
You are also given an integer array queries. 
The answer to the jth query is the size of the smallest interval i such that lefti <= queries[j] <= righti.
If no such interval exists, the answer is -1.
Return an array containing the answers to the queries.

Example 1:
Input: intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]
Output: [3,3,1,4]
Explanation: The queries are processed as follows:
- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.
- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.
- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.
- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.

Example 2:
Input: intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]
Output: [2,-1,4,6]
Explanation: The queries are processed as follows:
- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.
- Query = 19: None of the intervals contain 19. The answer is -1.
- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.
- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.

# Java

class Solution {
    public int[] minInterval(int[][] intervals, int[] queries) {
        // Sort intervals by their start points and then by end points if start points are equal
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        
        // Sort queries and keep track of original indices
        int[][] queriesWithIndex = new int[queries.length][2];
        for (int i = 0; i < queries.length; i++) {
            queriesWithIndex[i] = new int[] { queries[i], i };
        }
        Arrays.sort(queriesWithIndex, (a, b) -> Integer.compare(a[0], b[0]));
        
        int[] result = new int[queries.length];
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));
        int intervalIndex = 0;
        
        for (int[] query : queriesWithIndex) {
            int queryValue = query[0];
            int originalIndex = query[1];

            // Add all intervals that start before or at the query value to the heap
            while (intervalIndex < intervals.length && intervals[intervalIndex][0] <= queryValue) {
                // Only add the interval to the heap if it contains the query value
                if (intervals[intervalIndex][1] >= queryValue) {
                    minHeap.offer(new int[] { intervals[intervalIndex][1] - intervals[intervalIndex][0] + 1, intervals[intervalIndex][1] });
                }
                intervalIndex++;
            }

            // Remove intervals from the heap that end before the query value
            while (!minHeap.isEmpty() && minHeap.peek()[1] < queryValue) {
                minHeap.poll();
            }
            
            // The smallest interval size for the current query value
            if (minHeap.isEmpty()) {
                result[originalIndex] = -1;
            } else {
                result[originalIndex] = minHeap.peek()[0];
            }
        }
        
        return result;
    }
}
