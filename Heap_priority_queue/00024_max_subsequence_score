https://leetcode.com/problems/maximum-subsequence-score/description/

You are given two 0-indexed integer arrays nums1 and nums2 of equal length n and a positive integer k. 
You must choose a subsequence of indices from nums1 of length k.
For chosen indices i0, i1, ..., ik - 1, your score is defined as:
The sum of the selected elements from nums1 multiplied with the minimum of the selected elements from nums2.
It can defined simply as: (nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1]).
Return the maximum possible score.

A subsequence of indices of an array is a set that can be derived from the set {0, 1, ..., n-1} by deleting some or no elements.

Example 1:

Input: nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3
Output: 12
Explanation: 
The four possible subsequence scores are:
- We choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7.
- We choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6. 
- We choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12. 
- We choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8.
Therefore, we return the max score, which is 12.

Example 2:

Input: nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1
Output: 30
Explanation: 
Choosing index 2 is optimal: nums1[2] * nums2[2] = 3 * 10 = 30 is the maximum possible score.

# java

class Solution {
    public long maxScore(int[] nums1, int[] nums2, int k) {
        int[][] pair = new int[nums1.length][2];

        for(int i = 0; i < nums1.length; i++) {
            pair[i][0] = nums2[i];
            pair[i][1] = nums1[i];
        }

        Arrays.sort(pair, (a, b) -> b[0] - a[0]);
        // compare the second element of each pair using lambda expression
        long ans = 0, curr_sum = 0;
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        // Pushing the elements of nums1 in a min heap of size k-1
        for(int i = 0; i < k-1; i++) {
            curr_sum += pair[i][1];
            pq.add(pair[i][1]);
        }

        //looping for the rest of array
        for(int i = k-1; i < nums1.length; i++) {
            curr_sum += pair[i][1];
            pq.add(pair[i][1]);
            ans = Math.max(curr_sum*pair[i][0], ans);

            curr_sum -= pq.peek();
            pq.poll();
        }
        return ans;
    }
}
or
class Solution {
    public long maxScore(int[] nums1, int[] nums2, int k) {
        int n = nums1.length;
        int[][] nums2Indexed = new int[n][2];
        for (int i = 0; i < n; i++) {
            nums2Indexed[i] = new int[]{nums2[i], i};
        }
        Arrays.sort(nums2Indexed, (a, b) -> b[0] - a[0]);
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        long su = 0;
        for (int i = 0; i < k; i++) {
            int index = nums2Indexed[i][1];
            int val = nums1[nums2Indexed[i][1]];
            su += val;
            pq.offer(val);
        }
        long res = su * nums2Indexed[k - 1][0];
        for (int i = k; i < n; i++) {
            int index = nums2Indexed[i][1];
            int val = nums1[nums2Indexed[i][1]];
            if (val <= pq.peek()) continue;
            su -= pq.remove();
            pq.offer(val);
            su += val;
            res = Math.max(res, su * nums2Indexed[i][0]);
        }
        return res;

    }
}
or
class Solution {
    public long maxScore(int[] nums1, int[] nums2, int k) {
        int n = nums1.length;
        int[][] res = new int[n][2];
        for(int i=0; i<n; i++){
            res[i] = new int[]{nums1[i], nums2[i]};
        }

        Arrays.sort(res, (a, b) -> b[1] - a[1]);

        long ans=0;
        long sum=0;
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int i=0; i<n; i++){
            sum += res[i][0];
            pq.offer(res[i][0]);
            if(pq.size() == k){
                ans = Math.max(ans, sum*res[i][1]);
                sum -= pq.poll();
            }
        }
        return ans;
    }
}
