https://leetcode.com/problems/merge-sorted-array/description/

Gap Method / Shell Sort

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, 
and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. 
To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, 
and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.

# java

class Solution {
    private void swapIfGreater(int[] arr1, int[] arr2, int ind1, int ind2) {
        if (arr1[ind1] > arr2[ind2]) {
            int temp = arr1[ind1];
            arr1[ind1] = arr2[ind2];
            arr2[ind2] = temp;
        }
    }

    public void merge(int[] arr1, int n, int[] arr2, int m) {
        int len = n + m;
        int gap = (len / 2) + (len % 2);

        while (gap > 0) {
            int left = 0;
            int right = left + gap;

            while (right < len) {
                if (left < n && right >= n) {
                    swapIfGreater(arr1, arr2, left, right - n);
                } else if (left >= n) {
                    swapIfGreater(arr2, arr2, left - n, right - n);
                } else {
                    swapIfGreater(arr1, arr1, left, right);
                }

                left++;
                right++;
            }

            if (gap == 1) {
                break;
            }

            gap = (gap / 2) + (gap % 2);
        }

        for (int i = n; i < n + m; i++) {
            arr1[i] = arr2[i - n];
        }
    }
}


or

class Solution {
    public void merge(int[] arr1, int n, int[] arr2, int m) {
        int[] arr3 = new int[n + m];
        int left = 0;
        int right = 0;
        int index = 0;

        // Insert the elements from the 2 arrays into the 3rd array using left and right pointers:
        while (left < n && right < m) {
            if (arr1[left] <= arr2[right]) {
                arr3[index] = arr1[left];
                left++;
            } else {
                arr3[index] = arr2[right];
                right++;
            }
            index++;
        }

        // If right pointer reaches the end:
        while (left < n) {
            arr3[index] = arr1[left];
            left++;
            index++;
        }

        // If left pointer reaches the end:
        while (right < m) {
            arr3[index] = arr2[right];
            right++;
            index++;
        }

        // Fill back the elements from arr3 to arr1:
        for (int i = 0; i < n + m; i++) {
            arr1[i] = arr3[i];
        }
    }
}

or

class Solution {
    public void merge(int[] arr1, int n, int[] arr2, int m) {
        // Declare 2 pointers:
        int left = n - 1;
        int right = 0;

        // Swap elements if necessary to make space for the elements of arr2
        while (left >= 0 && right < m) {
            if (arr1[left] > arr2[right]) {
                // Swap elements
                int temp = arr1[left];
                arr1[left] = arr2[right];
                arr2[right] = temp;
                left--;
                right++;
            } else {
                break;
            }
        }

        // Fill arr1 with sorted elements from arr2
        // Temporarily mark positions in arr1 for arr2 elements
        for (int i = n; i < n + m; i++) {
            arr1[i] = Integer.MAX_VALUE;
        }

        // Sort arr1 and arr2
        java.util.Arrays.sort(arr1);
        java.util.Arrays.sort(arr2);

        // Fill the remaining space in arr1 with elements from arr2
        for (int i = n; i < n + m; i++) {
            arr1[i] = arr2[i - n];
        }
    }
}

# python

# Optimal Approach: Gap method or shell sort

class Solution(object):
    def merge(self, arr1, n, arr2, m):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """

        def swapIfGreater(arr1, arr2, ind1, ind2):
            if arr1[ind1] > arr2[ind2]:
                arr1[ind1], arr2[ind2] = arr2[ind2], arr1[ind1]

        # len of the imaginary single array:
        len = n + m

        # Initial gap:
        gap = (len // 2) + (len % 2)

        while gap > 0:
            # Place 2 pointers:
            left = 0
            right = left + gap
            while right < len:
                # case 1: left in arr1[]
                # and right in arr2[]:
                if left < n and right >= n:
                    swapIfGreater(arr1, arr2, left, right - n)
                # case 2: both pointers in arr2[]:
                elif left >= n:
                    swapIfGreater(arr2, arr2, left - n, right - n)
                # case 3: both pointers in arr1[]:
                else:
                    swapIfGreater(arr1, arr1, left, right)
                left += 1
                right += 1
            # break if iteration gap=1 is completed:
            if gap == 1:
                break
            # Otherwise, calculate new gap:
            gap = (gap // 2) + (gap % 2)

        for i in range(n,n+m):
            arr1[i]=arr2[i-n]

TC: O( (n+m)*log(n+m) )
SC  O(1)


# Brute Force:

class Solution(object):
    def merge(self, arr1, n, arr2, m):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """

        arr3 = [0] * (n + m)
        left = 0
        right = 0
        index = 0

        # Insert the elements from the 2 arrays
        # into the 3rd array using left and right
        # pointers:
        while left < n and right < m:
            if arr1[left] <= arr2[right]:
                arr3[index] = arr1[left]
                left += 1
                index += 1
            else:
                arr3[index] = arr2[right]
                right += 1
                index += 1

        # If right pointer reaches the end:
        while left < n:
            arr3[index] = arr1[left]
            left += 1
            index += 1

        # If left pointer reaches the end:
        while right < m:
            arr3[index] = arr2[right]
            right += 1
            index += 1

        #Fill back the elements from arr3[]
        #to arr1[] and arr2[]:
        for i in range(n + m):
            if i < n:
                arr1[i] = arr3[i]
            else:
                arr1[i] = arr3[i]

# Better Approach:

class Solution(object):
    def merge(self, arr1, n, arr2, m):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """

        # Declare 2 pointers:
        left = n - 1
        right = 0
        print(left)
        
        while left >= 0 and right < m:
            if arr1[left] > arr2[right]:
                arr1[left], arr2[right] = arr2[right], arr1[left]
                left -= 1
                right += 1
            else:
                break

        for i in range(n,n+m):
            arr1[i]= float('inf')

        arr1.sort()
        arr2.sort()

        for i in range(n,n+m):
            arr1[i]=arr2[i-n]

TC: O( min(n,m) + nlogn + mlogm )
SC: O(1)

