https://leetcode.com/problems/binary-tree-right-side-view/description/

Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example 1:

Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

# java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) return result;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            int n = queue.size();
            List<Integer> values = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                TreeNode node = queue.poll();
                if (node.left != null) queue.add(node.left);
                if (node.right != null) queue.add(node.right);
                values.add(node.val);
            }
            result.add(values.get(values.size() - 1));
        }
        return result;
    }
}

or


class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> arr = new ArrayList<>();
        func(0,arr,root);
        return arr;
    }

    public void func(int level, List<Integer> arr, TreeNode root){
        if(root == null) return;
        if (level == arr.size()) arr.add(root.val);
        else arr.set(level, root.val);
        func(level+1,arr,root.left);
        func(level+1,arr,root.right);
    }
}

or

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        ArrayList<Integer> ans = new ArrayList<>();
        
        if(root == null){
            return ans;
        }
        
        Queue<Pair<TreeNode,Integer>> queue = new LinkedList<>();
        Map<Integer,Integer> map = new TreeMap<>();
        queue.add(new Pair<>(root,0));
        
        while(!queue.isEmpty()){
           Pair<TreeNode,Integer> p = queue.poll();
           TreeNode node = p.getKey();
           int rows = p.getValue();
           
           if(!map.containsKey(rows)) {
                map.put(rows, node.val);
            }
            
            if(node.right != null){
                queue.add(new Pair<>(node.right,rows + 1));
            } if(node.left != null){
                queue.add(new Pair<>(node.left,rows + 1));
            }
            


        }
        for(int i : map.values()){
            ans.add(i);
        }

        return ans;
    }
}


https://www.geeksforgeeks.org/problems/right-view-of-binary-tree/1

class Solution {
    private void recursionRight(Node root, int level, List<Integer> res) {
        if (root == null) {
            return;
        }

        if (res.size() == level) {
            res.add(root.data);
        }

        recursionRight(root.right, level + 1, res);
        recursionRight(root.left, level + 1, res);
    }

    ArrayList<Integer> rightView(Node root) {
        ArrayList<Integer> res = new ArrayList<>();
        recursionRight(root, 0, res);
        return res;
    }
}
