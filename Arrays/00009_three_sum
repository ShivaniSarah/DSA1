# Three Sum

https://www.geeksforgeeks.org/unique-triplets-sum-given-value/

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

https://leetcode.com/problems/3sum/description/

# java

public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        int n = nums.length;
        
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            int j = i + 1;
            int k = n - 1;
            while (j < k) {
                int totalSum = nums[i] + nums[j] + nums[k];
                if (totalSum < 0) {
                    j++;
                } else if (totalSum > 0) {
                    k--;
                } else {
                    ans.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    j++;
                    k--;
                    while (j < k && nums[j] == nums[j - 1]) j++;
                    while (j < k && nums[k] == nums[k + 1]) k--;
                }
            }
        }
        
        return ans;
    }

}

or

public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> resultSet = new HashSet<>();
        int n = nums.length;
        
        for (int i = 0; i < n; i++) {
            Set<Integer> seen = new HashSet<>();
            for (int j = i + 1; j < n; j++) {
                int third = -(nums[i] + nums[j]);
                
                if (seen.contains(third)) {
                    List<Integer> triplet = Arrays.asList(nums[i], nums[j], third);
                    Collections.sort(triplet); // Sort to ensure the order
                    resultSet.add(triplet);
                }
                
                seen.add(nums[j]);
            }
        }
        
        return new ArrayList<>(resultSet); // Convert set to list
    }

}



# python

# Better Approach:

class Solution:
    def threeSum(self, arr: List[int]) -> List[List[int]]:
        st = set()
        n=len(arr)
        for i in range(n):
            hashset = set()
            for j in range(i + 1, n):
                # Calculate the 3rd element:
                third = -(arr[i] + arr[j])

                # Find the element in the set:
                if third in hashset:
                    temp = [arr[i], arr[j], third]
                    temp.sort()
                    st.add(tuple(temp))
                hashset.add(arr[j])

        # store the set in the answer:
        ans = list(st)
        return ans

# Optimal Approach two pointers

class Solution:
    def threeSum(self, arr: List[int]) -> List[List[int]]:
        ans = []
        n=len(arr)
        arr.sort()
        for i in range(n):
            # remove duplicates:
            if i != 0 and arr[i] == arr[i - 1]:
                continue

            # moving 2 pointers:
            j = i + 1
            k = n - 1
            while j < k:
                total_sum = arr[i] + arr[j] + arr[k]
                if total_sum < 0:
                    j += 1
                elif total_sum > 0:
                    k -= 1
                else:
                    temp = [arr[i], arr[j], arr[k]]
                    ans.append(sorted(temp))
                    j += 1
                    k -= 1
                    # skip the duplicates:
                    while j < k and arr[j] == arr[j - 1]:
                        j += 1
                    while j < k and arr[k] == arr[k + 1]:
                        k -= 1

        return ans


or


// Java program to find all unique triplets having sum
// equal to target using hashing

import java.util.*;

class GfG {
    static List<List<Integer>> threeSum(int[] arr, int target) {
        int n = arr.length;
        
        // Set to handle duplicates
        Set<List<Integer>> resSet = new HashSet<>();
        
        // Generating all pairs
        for (int i = 0; i < n; i++) {
            Set<Integer> s = new HashSet<>();
            for (int j = i + 1; j < n; j++) {
                int complement = target - arr[i] - arr[j];
                
                // If the complement exists in the hash set then we 
                // have found the triplet with sum, target
                if (s.contains(complement)) {
                    List<Integer> curr = Arrays.asList(arr[i], arr[j], complement);
                    Collections.sort(curr);
                    resSet.add(curr);
                }
                
                s.add(arr[j]);
            }
        }

        return new ArrayList<>(resSet);
    }

    public static void main(String[] args) {
        int[] arr = {12, 3, 6, 1, 6, 9};
        int target = 24;
        
        List<List<Integer>> ans = threeSum(arr, target);
        for (List<Integer> triplet : ans) {
            System.out.println(triplet.get(0) + " " + triplet.get(1) + " " + triplet.get(2));
        }
    }
}

