https://leetcode.com/problems/intersection-of-multiple-arrays/

Given a 2D integer array nums where nums[i] is a non-empty array of distinct positive integers, return the list of integers that are present in each array of nums sorted in ascending order.

Example 1:
Input: nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]
Output: [3,4]
Explanation: 
The only integers present in each of nums[0] = [3,1,2,4,5], nums[1] = [1,2,3,4], and nums[2] = [3,4,5,6] are 3 and 4, so we return [3,4].

Example 2:
Input: nums = [[1,2,3],[4,5,6]]
Output: []
Explanation: 
There does not exist any integer present both in nums[0] and nums[1], so we return an empty list [].


class Solution {
    public List<Integer> intersection(int[][] nums) {
        // If nums is empty, return an empty list
        if (nums.length == 0) {
            return new ArrayList<>();
        }

        // Initialize the set with the first array
        Set<Integer> commonSet = new HashSet<>();
        for (int num : nums[0]) {
            commonSet.add(num);
        }

        // Intersect with the sets of the remaining arrays
        for (int i = 1; i < nums.length; i++) {
            Set<Integer> currentSet = new HashSet<>();
            for (int num : nums[i]) {
                currentSet.add(num);
            }
            // Perform intersection
            commonSet.retainAll(currentSet);
        }

        // Convert the result set to a sorted list
        List<Integer> result = new ArrayList<>(commonSet);
        Collections.sort(result);

        return result;
    }
}


