longest-substring-without-repeating-characters

https://leetcode.com/problems/longest-substring-without-repeating-characters/description/

Given a string s, find the length of the longest 
substring without repeating characters.

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        l=list()
        maxi=0
        i=0
        j=0
        while(i<len(s) and j<len(s)):
            if(s[j] not in l):
              l.append(s[j])
              j+=1
            else:
              maxi=max(maxi,len(l))
              l.clear()
              i+=1
              j=i
        return max(maxi,len(l))                
             

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        mpp = [-1] * 256
        left = 0
        right = 0
        n = len(s)
        length = 0
        while right < n:
            if mpp[ord(s[right])] != -1:
                left = max(mpp[ord(s[right])] + 1, left)
            mpp[ord(s[right])] = right
            length = max(length, right - left + 1)
            right += 1
        return length


class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if len(s) == 0:
            return 0
        maxans = float("-inf")
        setx = set()
        l = 0
        for r in range(len(s)):  # outer loop for traversing the string
            if s[r] in setx:  # if duplicate element is found
                while l < r and s[r] in setx:
                    setx.remove(s[l])
                    l += 1
            setx.add(s[r])
            maxans = max(maxans, r - l + 1)
        return maxans

# doesnt work for spaces

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if len(s) == 0:
            return 0
        maxans = -1
        for i in range(len(s)):  # outer loop for traversing the string
            set = {}
            # nested loop for getting different string starting with str[i]
            for j in range(i, len(s)):
                if s[j] in set:  # if element if found so mark it as ans and break from the loop
                    maxans = max(maxans, j - i)
                    break
                set[s[j]] = 1
        return maxans
