# unique paths in a grid with obstacles
# link: https://leetcode.com/problems/unique-paths-ii/

# We are given an “N*M” Maze. The maze contains some obstacles.
A cell is ‘blockage’ in the maze if its value is -1. 0 represents non-blockage. There is no path possible through a blocked cell.

We need to count the total number of unique paths from the top-left corner of the maze to the bottom-right corner.
At every cell, we can move either down or towards the right.

# DP II

class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:

        m = len(obstacleGrid)
        n = len(obstacleGrid[0])

        
        def isValid(obstacleGrid,m,n):
            if obstacleGrid[m][n]==1:
                return False
            return True
            
        # dp=[[-1]*n]*m
        # l=[-1 for _ in range(n)]
        # dp= [ l for _ in range(m) ]
        dp = [[-1 for j in range(n)] for i in range(m)]

        if obstacleGrid[0][0] == 0:
            dp[0][0] = 1
        else:
            dp[0][0] = 0


        for i in range(1,n):
            
            if isValid(obstacleGrid,0,i) and dp[0][i-1] ==1 :
                dp[0][i]=1
            else:
                dp[0][i]=0
        for i in range(1,m):
            
            if isValid(obstacleGrid,i,0) and dp[i-1][0] ==1 :
                dp[i][0]=1
            else:
                dp[i][0]=0
             
        for i in range(1,m):
            for j in range(1,n):
                if isValid(obstacleGrid,i,j):
                    dp[i][j] = dp[i-1][j] + dp[i][j-1]
                else:
                    dp[i][j]=0

        return dp[m-1][n-1]

        

