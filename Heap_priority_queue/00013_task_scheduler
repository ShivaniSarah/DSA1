https://leetcode.com/problems/task-scheduler/

You are given an array of CPU tasks, each represented by letters A to Z, and a cooling time, n. 
Each cycle or interval allows the completion of one task. Tasks can be completed in any order,
but there's a constraint: identical tasks must be separated by at least n intervals due to cooling time.
â€‹Return the minimum number of intervals required to complete all tasks.

Example 1:
Input: tasks = ["A","A","A","B","B","B"], n = 2
Output: 8

Explanation: A possible sequence is: A -> B -> idle -> A -> B -> idle -> A -> B.
After completing task A, you must wait two cycles before doing A again. The same applies to task B. 
In the 3rd interval, neither A nor B can be done, so you idle. By the 4th cycle, you can do A again as 2 intervals have passed.

# java

class Solution {
	public int leastInterval(char[] tasks, int n) {
		Map<Character,Integer> map = new HashMap<>();
		for(char task:tasks){
			map.put(task,map.getOrDefault(task,0)+1);
		}
		PriorityQueue<Integer> heap = new PriorityQueue<>((x,y)->y-x);
		for(Integer value : map.values()){
			heap.offer(value);
		}
		Map<Integer,Integer> tmpRecord = new HashMap<>();
		int time=0;
		while(tmpRecord.size()!=0 || heap.size()!=0){
			if(tmpRecord.containsKey(time)){
				heap.offer(tmpRecord.get(time));
				tmpRecord.remove(time);
			}
			if(heap.size()>0){
				Integer remainNum = heap.poll();
				if(remainNum!=1)
					tmpRecord.put(time+n+1,remainNum-1);
			}
			time++;
		}
		return time;
	}
}

or

class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] counter = new int[26];
        int max = 0;
        int maxCount = 0;
        for(char task : tasks) {
            counter[task - 'A']++;
            if(max == counter[task - 'A']) {
                maxCount++;
            }
            else if(max < counter[task - 'A']) {
                max = counter[task - 'A'];
                maxCount = 1;
            }
        }
        int partCount = max - 1;
        int partLength = n - (maxCount - 1);
        int emptySlots = partCount * partLength;
        int availableTasks = tasks.length - max * maxCount;
        int idles = Math.max(0, emptySlots - availableTasks);
        return tasks.length + idles;
    }
}



# to be improved

class Solution {
	public int leastInterval(char[] tasks, int n) {
		
        Map<Character,Integer> mpp = new HashMap<>();
        for(int i=0;i<tasks.length;i++){
            mpp.put(tasks[i],mpp.getOrDefault(tasks[i],0) +1);
        }
        
        int maxi = Integer.MIN_VALUE;
        for(Integer i: mpp.values()){
            maxi= Math.max(maxi,i);
        }
// System.out.println(maxi);
        int cnt=0;
        for(Integer i: mpp.values()){
            if(i==maxi) cnt++;
        }

        return ((n+1)*(maxi-1)+cnt);

	}
}
