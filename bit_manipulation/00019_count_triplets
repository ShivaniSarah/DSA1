https://leetcode.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/description/

Given an array of integers arr.

We want to select three indices i, j and k where (0 <= i < j <= k < arr.length).

Let's define a and b as follows:

a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]
b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]
Note that ^ denotes the bitwise-xor operation.

Return the number of triplets (i, j and k) Where a == b.

 

Example 1:

Input: arr = [2,3,1,6,7]
Output: 4
Explanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)
Example 2:

Input: arr = [1,1,1,1,1]
Output: 10


# java


class Solution {
    public int countTriplets(int[] arr) {
        int n = arr.length;
        int[] prefixXor = new int[n + 1];
        
        // Create the prefix XOR array
        for (int i = 0; i < n; i++) {
            prefixXor[i + 1] = prefixXor[i] ^ arr[i];
        }

        Map<Integer, Integer> countMap = new HashMap<>();
        Map<Integer, Integer> indexSumMap = new HashMap<>();
        int count = 0;

        for (int k = 0; k < n; k++) {
            if (countMap.containsKey(prefixXor[k + 1])) {
                count += countMap.get(prefixXor[k + 1]) * k - indexSumMap.get(prefixXor[k + 1]);
            }

            countMap.put(prefixXor[k], countMap.getOrDefault(prefixXor[k], 0) + 1);
            indexSumMap.put(prefixXor[k], indexSumMap.getOrDefault(prefixXor[k], 0) + k);
        }

        return count;
    }
}
