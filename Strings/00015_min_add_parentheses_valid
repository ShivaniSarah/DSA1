https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/

A parentheses string is valid if and only if:
It is the empty string,
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.
For example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))".
Return the minimum number of moves required to make s valid.

Example 1:
Input: s = "())"
Output: 1

Example 2:
Input: s = "((("
Output: 3

# Java

class Solution {
    public int minAddToMakeValid(String s) {
        int balance = 0;
        int leftNeeded = 0;

        for (char ch : s.toCharArray()) {
            if (ch == '(') {
                balance++;
            } else if (ch == ')') {
                balance--;
            }

            // If balance is negative, we need to add an opening parenthesis
            if (balance < 0) {
                leftNeeded++;
                balance = 0; // Reset balance to zero as we have added an opening parenthesis
            }
        }

        // Total moves needed: leftNeeded (for unmatched closing) + balance (for unmatched opening)
        return leftNeeded + balance;
    }
}
