https://leetcode.com/problems/coin-change/

You are given an integer array coins representing coins of different denominations and
an integer amount representing a total amount of money.
Return the fewest number of coins that you need to make up that amount. 
If that amount of money cannot be made up by any combination of the coins, return -1.
You may assume that you have an infinite number of each kind of coin.

Example 1:
Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

Example 2:
Input: coins = [2], amount = 3
Output: -1

Example 3:
Input: coins = [1], amount = 0
Output: 0

# DP I :

class Solution(object):
    def coinChange(self, coins, amount):
        arr=coins
        T=amount
        n = len(arr)
        dp = [[0 for _ in range(T + 1)] for _ in range(n)]

        for i in range(T + 1):
            if i % arr[0] == 0:
                dp[0][i] = i // arr[0]
            else:
                dp[0][i] = int(1e9)

        for ind in range(1, n):
            for target in range(T + 1):
                notTake = dp[ind - 1][target]  
                take = int(1e9)  # a very large value
                if arr[ind] <= target:
                    take = 1 + dp[ind][target - arr[ind]]
                dp[ind][target] = min(notTake, take)

        ans = dp[n - 1][T]
        # If the result is still equal to a very large value, it means it's not possible to achieve the target sum.
        if ans >= int(1e9):
            return -1
        return ans

# DP I:

class Solution(object):
    def coinChange(self, coins, amount):

        def minimumElementsUtil(arr, ind, T, dp):
            
            if ind == 0:
                if T % arr[0] == 0:
                    return T // arr[0]
                else:
                    return int(1e9)

            if dp[ind][T] != -1:
                return dp[ind][T]

            notTaken = 0 + minimumElementsUtil(arr, ind - 1, T, dp)
            taken = int(1e9)

            if arr[ind] <= T:
                taken = 1 + minimumElementsUtil(arr, ind, T - arr[ind], dp)

            dp[ind][T] = min(notTaken, taken)
            return dp[ind][T]

        def minimumElements(arr, T):
            n = len(arr)
            dp = [[-1 for j in range(T + 1)] for i in range(n)]
            ans = minimumElementsUtil(arr, n - 1, T, dp)
            if ans >= int(1e9):
                return -1
            return ans
        
        return minimumElements(coins, amount)
