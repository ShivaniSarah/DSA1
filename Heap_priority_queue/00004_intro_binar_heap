https://www.geeksforgeeks.org/problems/implementation-of-priority-queue-using-binary-heap/1

Implementation of Priority Queue using Binary Heap
A Binary Heap is a Complete Binary Tree.
A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. 
Min-Heap: In a min-heap, the value of the parent node is less than or equal to the values of its children. The root node has the smallest value.
Max-Heap: In a max-heap, the value of the parent node is greater than or equal to the values of its children. The root node has the largest value.
Given a binary heap implementation of Priority Queue. Extract the maximum element from the queue i.e. remove it from the Queue and return it's value. 

Examples :

Input: 4 2 8 16 24 2 6 5
Output: 24
Priority Queue after extracting maximum: 16 8 6 5 2 2 4
Input: 64 12 8 48 5
Output: 64
Priority Queue after extracting maximum: 48 12 8 5

//  public static int H[]=new int[10009];
//  public static int s=-1;
// 1. parent(i): Function to return the parent node of node i
// 2. leftChild(i): Function to return index of the left child of node i
// 3. rightChild(i): Function to return index of the right child of node i
// 4. shiftUp(int i): Function to shift up the node in order to maintain the
// heap property
// 5. shiftDown(int i): Function to shift down the node in order to maintain the
// heap property.
// int s=-1, current index value of the array H[].

// You have to make a class of GFG to access the above functionalities like this - GFG obj=new GFG();
// You can check the driver code for better understanding.
class Solution {
  public int extractMax() {
        // your code here
        GFG obj=new GFG();
        if(obj.s < 0) return -1;
        int max = obj.H[0]; //get the max eleemnt
        obj.H[0]=obj.H[obj.s];  //move the last element to the root
        obj.s--;
        obj.shiftDown(0); //shift down the root element to restore heap property
        return max;
    }
}

class GFG{
    public static int H[]=new int[10009];
    public static int s=-1;   // size of heap
    
    public int parent(int i){
        return (i-1)/2;
        
    }
    public int leftChild(int i){
        return ((2*i)+1);     // acc to level order traversal
    }
    public int rightChild(int i){
        return ((2*i)+2);
    }
    public void shiftUp(int i){
        while(i>0 && H[parent(i)] < H[i]){
            int temp=H[i];
            H[i]=H[parent(i)];
            H[parent(i)]=temp;
            i=parent(i);
        }
    }
    
    public void shiftDown(int i){
        int maxIndex=i;
        int l=leftChild(i);
        if(l<=s && H[l]>H[maxIndex] ){
            maxIndex=l;
        }
        int r=rightChild(i);
        
        if(r<=s && H[r]>H[maxIndex] ){
            maxIndex=r;
        }
        if(i!=maxIndex){
            int temp=H[i];
            H[i]=H[maxIndex];
            H[maxIndex]=temp;
            shiftDown(maxIndex);
        }
    }
    
    public void insert(int p){
        s=s+1;
        H[s]=p;
        shiftUp(s);
    }

    public static void main(String args[]) throws IOException{
        Scanner sc=new Scanner(System.in);
        GFG ob=new GFG();
        int t=sc.nextInt();
        while(t-->0){
            int N=sc.nextInt();
            for(int i=0;i<N;i++){
                int k=sc.nextInt();
                ob.insert(k);
            }
            
            Solution obj=new Solution();
            System.out.println("Node with maximum priority : "+ obj.extractMax());
            System.out.print("Priority queue after extracting maximum : ");
            int j=0;
            while(j<=ob.s){
                System.out.print(ob.H[j]+" ");
                j++;
            }
            System.out.println();
        }
    }
}

or

// Java program for the above approach 
import java.util.*; 

// A class for Min Heap 
class MinHeap { 
	
	// To store array of elements in heap 
	private int[] heapArray; 
	
	// max size of the heap 
	private int capacity; 
	
	// Current number of elements in the heap 
	private int current_heap_size; 

	// Constructor 
	public MinHeap(int n) { 
		capacity = n; 
		heapArray = new int[capacity]; 
		current_heap_size = 0; 
	} 
	
	// Swapping using reference 
	private void swap(int[] arr, int a, int b) { 
		int temp = arr[a]; 
		arr[a] = arr[b]; 
		arr[b] = temp; 
	} 
	
	
	// Get the Parent index for the given index 
	private int parent(int key) { 
		return (key - 1) / 2; 
	} 
	
	// Get the Left Child index for the given index 
	private int left(int key) { 
		return 2 * key + 1; 
	} 
	
	// Get the Right Child index for the given index 
	private int right(int key) { 
		return 2 * key + 2; 
	} 
	
	
	// Inserts a new key 
	public boolean insertKey(int key) { 
		if (current_heap_size == capacity) { 
			
			// heap is full 
			return false; 
		} 
	
		// First insert the new key at the end 
		int i = current_heap_size; 
		heapArray[i] = key; 
		current_heap_size++; 
		
		// Fix the min heap property if it is violated 
		while (i != 0 && heapArray[i] < heapArray[parent(i)]) { 
			swap(heapArray, i, parent(i)); 
			i = parent(i); 
		} 
		return true; 
	} 
	
	// Decreases value of given key to new_val. 
	// It is assumed that new_val is smaller 
	// than heapArray[key]. 
	public void decreaseKey(int key, int new_val) { 
		heapArray[key] = new_val; 

		while (key != 0 && heapArray[key] < heapArray[parent(key)]) { 
			swap(heapArray, key, parent(key)); 
			key = parent(key); 
		} 
	} 
	
	// Returns the minimum key (key at 
	// root) from min heap 
	public int getMin() { 
		return heapArray[0]; 
	} 
	
	
	// Method to remove minimum element 
	// (or root) from min heap 
	public int extractMin() { 
		if (current_heap_size <= 0) { 
			return Integer.MAX_VALUE; 
		} 

		if (current_heap_size == 1) { 
			current_heap_size--; 
			return heapArray[0]; 
		} 
		
		// Store the minimum value, 
		// and remove it from heap 
		int root = heapArray[0]; 

		heapArray[0] = heapArray[current_heap_size - 1]; 
		current_heap_size--; 
		MinHeapify(0); 

		return root; 
	} 
		
	// This function deletes key at the 
	// given index. It first reduced value 
	// to minus infinite, then calls extractMin() 
	public void deleteKey(int key) { 
		decreaseKey(key, Integer.MIN_VALUE); 
		extractMin(); 
	} 
	
	// A recursive method to heapify a subtree 
	// with the root at given index 
	// This method assumes that the subtrees 
	// are already heapified 
	private void MinHeapify(int key) { 
		int l = left(key); 
		int r = right(key); 

		int smallest = key; 
		if (l < current_heap_size && heapArray[l] < heapArray[smallest]) { 
			smallest = l; 
		} 
		if (r < current_heap_size && heapArray[r] < heapArray[smallest]) { 
			smallest = r; 
		} 

		if (smallest != key) { 
			swap(heapArray, key, smallest); 
			MinHeapify(smallest); 
		} 
	} 
	
	// Increases value of given key to new_val. 
	// It is assumed that new_val is greater 
	// than heapArray[key]. 
	// Heapify from the given key 
	public void increaseKey(int key, int new_val) { 
		heapArray[key] = new_val; 
		MinHeapify(key); 
	} 
	
	// Changes value on a key 
	public void changeValueOnAKey(int key, int new_val) { 
		if (heapArray[key] == new_val) { 
			return; 
		} 
		if (heapArray[key] < new_val) { 
			increaseKey(key, new_val); 
		} else { 
			decreaseKey(key, new_val); 
		} 
	} 
} 

// Driver Code 
class MinHeapTest { 
	public static void main(String[] args) { 
		MinHeap h = new MinHeap(11); 
		h.insertKey(3); 
		h.insertKey(2); 
		h.deleteKey(1); 
		h.insertKey(15); 
		h.insertKey(5); 
		h.insertKey(4); 
		h.insertKey(45); 
		System.out.print(h.extractMin() + " "); 
		System.out.print(h.getMin() + " "); 
		
		h.decreaseKey(2, 1); 
		System.out.print(h.getMin()); 
	} 
} 

// This code is contributed by rishabmalhdijo 

