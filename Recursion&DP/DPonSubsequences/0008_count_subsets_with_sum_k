https://www.geeksforgeeks.org/problems/perfect-sum-problem5633/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=perfect-sum-problem

Given an array arr of non-negative integers and an integer sum, the task is to count all subsets of the given array
with a sum equal to a given sum.
Note: Answer can be very large, so, output answer modulo 109+7.

Example 1:
Input: 
N = 6
arr = [5, 2, 3, 10, 6, 8]
sum = 10
Output: 
3
Explanation: 
{5, 2, 3}, {2, 8}, {10} are possible subsets.

Example 2:
Input: 
N = 5
arr = [2, 5, 1, 4, 3]
sum = 10
Output: 
3
Explanation: 
{2, 1, 4, 3}, {5, 1, 4}, {2, 5, 3} are possible subsets.

# java

# DP II Approach I:

class Solution {
    private static final int MOD = 1000000007;
    
    public int perfectSum(int[] arr, int n, int targetSum) {
        int[][] dp = new int[n + 1][targetSum + 1];
    
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= targetSum; j++) {
                dp[i][j] = dp[i - 1][j] % MOD;
                if (arr[i - 1] <= j) {
                    dp[i][j] = (dp[i][j] + dp[i - 1][j - arr[i - 1]]) % MOD;
                }
            }
        }

        return dp[n][targetSum];
    }
}

# DP II Approach II:

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int[] num, int n, int k) {
        int[][] dp = new int[n + 1][k + 1];

        // Base case initialization
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }

        // Fill the dp array
        for (int ind = 1; ind <= n; ind++) {
            for (int target = 0; target <= k; target++) {
                int notTaken = dp[ind - 1][target];
                int taken = 0;
                if (num[ind - 1] <= target) {
                    taken = dp[ind - 1][target - num[ind - 1]];
                }
                dp[ind][target] = (notTaken + taken) % MOD;
            }
        }

        return dp[n][k];
    }
}

# DP II Approach III:

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int[] num, int n, int k) {
        int[][] dp = new int[n][k + 1];

        // Initialize base case for sum 0
        for (int i = 0; i < n; i++) {
            dp[i][0] = 1;
        }

        // Handle the case when num[0] is 0
        if (num[0] == 0) {
            dp[0][0] = 2; // 2 cases - pick and not pick
        } else {
            dp[0][0] = 1; // 1 case - not pick
        }

        if (num[0] != 0 && num[0] <= k) {
            dp[0][num[0]] = 1;
        }

        // Fill the dp table
        for (int ind = 1; ind < n; ind++) {
            for (int target = 0; target <= k; target++) {
                int notTaken = dp[ind - 1][target];
                int taken = 0;
                if (num[ind] <= target) {
                    taken = dp[ind - 1][target - num[ind]];
                }

                dp[ind][target] = (notTaken + taken) % MOD;
            }
        }

        return dp[n - 1][k] % MOD;
    }

}

or

DP I:

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int[] num, int n, int k) {
        int[][] dp = new int[n][k + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return f(num, n - 1, k, dp);
    }

    private int f(int[] num, int index, int target, int[][] dp) {
        if (target < 0) {
            return 0;
        }
        if (index == 0) {
            if (target == 0 && num[0] == 0) {
                return 2;
            }
            if (target == 0 || target == num[0]) {
                return 1;
            }
            return 0;
        }

        // If the subproblem has already been solved, return the result from the memoization table
        if (dp[index][target] != -1) {
            return dp[index][target];
        }

        // If the current element is not taken
        int notTaken = f(num, index - 1, target, dp);

        // If the current element is taken
        int taken = 0;
        if (num[index] <= target) {
            taken = f(num, index - 1, target - num[index], dp);
        }

        // Save the result in dp and return
        dp[index][target] = (notTaken + taken) % MOD;
        return dp[index][target];
    }
}


# python

# DP II Approach I:
class Solution:
    def perfectSum(self, arr, n, target_sum):
	MOD = 10**9 + 7
        dp = [[0 for _ in range(target_sum + 1)] for _ in range(n + 1)]
    
        for i in range(n + 1):
            dp[i][0] = 1

        for i in range(1, n + 1):
            for j in range(target_sum + 1):
                dp[i][j] = dp[i-1][j] % MOD
                if arr[i-1] <= j:
                    dp[i][j] = (dp[i][j] + dp[i-1][j-arr[i-1]]) % MOD

        return dp[n][target_sum]
# DP II Approach II:
class Solution:
    def perfectSum(self, num, n, k):
        MOD=10**9 +7
        dp = [[0] * (k + 1) for _ in range(n+1)]
        for i in range(n+1):
            dp[i][0] = 1
        
        for ind in range(1, n+1):
            for target in range(0, k + 1):
                notTaken = dp[ind - 1][target]
                taken = 0
                if num[ind-1] <= target:
                    taken = dp[ind - 1][target - num[ind-1]]
                dp[ind][target] = ( notTaken + taken ) % MOD

        return dp[n][k]

# DP II Approach III:
class Solution:
	def perfectSum(self, num, n, k):
        dp = [[0 for i in range(k + 1)] for j in range(n)]

        for i in range(n):
            dp[i][0] = 1
            
        if num[0] == 0:
                dp[0][0] = 2 # 2 cases - pick and not pick
        else:
                dp[0][0] = 1 # 1 case - not pick
                
        if num[0] != 0 and  num[0] <= k:
            dp[0][num[0]] = 1
    
        for ind in range(1, n):
            for target in range(0, k + 1):
                notTaken = dp[ind - 1][target]
                taken = 0
                if num[ind] <= target:
                    taken = dp[ind - 1][target - num[ind]]
    
                dp[ind][target] = (notTaken + taken )% (10**9 +7)
                
        return dp[n-1][k]% (10**9 +7)

DP I:

class Solution:
     def perfectSum(self, num, n, k):
	    
        def f(index, target):
            nonlocal dp  # Define dp as non-local variable
            if target < 0:
                return 0
            if index == 0:
                if target == 0 and arr[0] == 0:
                    return 2
                if target == 0 or target == arr[0]:
                    return 1
                return 0
            
    
            # If the subproblem has already been solved, return the result from the memoization table
            if dp[index][target] != -1:
                return dp[index][target]
    
            # If the current element is not taken
            not_taken = f(index - 1, target)
            # If the current element is taken
            taken = 0
            if num[index] <= target:
                taken = f(index - 1, target - num[index])
    
            # Save the result in dp and return
            dp[index][target] = (not_taken + taken) % MOD
            return dp[index][target]
    
    
        MOD = 10**9 + 7
    
        # Initialize a 2D DP array with -1 to indicate uncomputed subproblems
        dp = [[-1 for _ in range(k + 1)] for _ in range(n)]
        return f(n - 1, k)
