https://leetcode.com/problems/jump-game-vii/

You are given a 0-indexed binary string s and two integers minJump and maxJump. 
In the beginning, you are standing at index 0, which is equal to '0'.
You can move from index i to index j if the following conditions are fulfilled:

i + minJump <= j <= min(i + maxJump, s.length - 1), and
s[j] == '0'.
Return true if you can reach index s.length - 1 in s, or false otherwise.

Example 1:
Input: s = "011010", minJump = 2, maxJump = 3
Output: true
Explanation:
In the first step, move from index 0 to index 3. 
In the second step, move from index 3 to index 5.

Example 2:
Input: s = "01101110", minJump = 2, maxJump = 3
Output: false

# java

class Solution {
    public boolean canReach(String s, int minJump, int maxJump) {
        
        
        Queue<Integer> q = new LinkedList<>();
         Queue<Integer> zero = new LinkedList<>();
        int n = s.length();
        
        for(int i=1;i<n;i++){
            
            if(s.charAt(i)=='0')
            zero.add(i);
        }
        q.add(0);
        
        if(s.charAt(0)!='0'){
            return false;
        }
        while(!q.isEmpty()){
            
            int ind = q.poll();
            
            if(ind==(s.length()-1)){
                return true;
            }
            int jmax = Math.min(ind+maxJump,s.length()-1);
            int jmin = ind+minJump;
           
            if(jmin <=jmax){
                
                while(!zero.isEmpty()  && jmax>=zero.peek()){
                    
                   int j = zero.poll();
                   if(jmin<=j){
                        q.add(j);
                   }
                }
           
            }
        }
        return false;
    }
}
