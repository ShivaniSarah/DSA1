https://leetcode.com/problems/sum-of-subarray-ranges/description/

Sum of Subarray Ranges

You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.

Return the sum of all subarray ranges of nums.

A subarray is a contiguous non-empty sequence of elements within an array.

Example 1:

Input: nums = [1,2,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0 
[2], range = 2 - 2 = 0
[3], range = 3 - 3 = 0
[1,2], range = 2 - 1 = 1
[2,3], range = 3 - 2 = 1
[1,2,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.
Example 2:

Input: nums = [1,3,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0
[3], range = 3 - 3 = 0
[3], range = 3 - 3 = 0
[1,3], range = 3 - 1 = 2
[3,3], range = 3 - 3 = 0
[1,3,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.
Example 3:

Input: nums = [4,-2,-3,4,1]
Output: 59
Explanation: The sum of all subarray ranges of nums is 59.

# java

class Solution {
    public long subArrayRanges(int[] nums) {
        long result = 0;
        Stack<Integer> inc = new Stack<>();
        Stack<Integer> dec = new Stack<>();
        for(int i = 0 ; i <= nums.length ; i ++){
            while(!inc.isEmpty() && ( i == nums.length || nums[inc.peek()] < nums[i])){
                int currIndex = inc.pop();
                int leftBound = inc.isEmpty() ? -1 : inc.peek(); 
                int rightBound = i;
                result += (currIndex - leftBound) * (rightBound - currIndex) * (long) nums[currIndex];                
            }
            while(!dec.isEmpty() && (i == nums.length || nums[dec.peek()] > nums[i])){
                int currIndex = dec.pop();
                int leftBound = dec.isEmpty()? -1 : dec.peek(); 
                int rightBound = i;
                result -= (currIndex - leftBound) * (rightBound - currIndex) * (long) nums[currIndex];
            }
            inc.push(i);
            dec.push(i);
        }
        
        return result;
    }
}
