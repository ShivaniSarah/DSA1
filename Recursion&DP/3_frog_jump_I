# Geek Jump geeks for geeks
# link: https://www.geeksforgeeks.org/problems/geek-jump/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=geek-jump

Given a number of stairs and a frog, the frog wants to climb from the 0th stair to the (N-1)th stair. 
At a time the frog can climb either one or two steps. 
A height[N] array is also given. Whenever the frog jumps from a stair i to stair j, 
the energy consumed in the jump is abs(height[i]- height[j]), where abs() means the absolute difference. 
We need to return the minimum energy that can be used by the frog to jump from stair 0 to stair N-1.

# Recursion

class Solution:
    
    def minimumEnergy(self, height, n):
        
        def f(n,height):
            if(n==0 ):
                return 0
            if (n==1):
                return abs(height[n]-height[n-1])
                
            l= f(n-1,height)+abs(height[n]-height[n-1])
            r= f(n-2,height)+abs(height[n]-height[n-2])
            
            return min(l,r)
            
        return f( n-1,height) 


# DP -I

class Solution:
    
    def minimumEnergy(self, height, n):
        dp=[-1 for i in range(n)]
        def f(n,height,dp):
            if(n==0 ):
                dp[0]=0
                return dp[0]
            if (n==1):
                dp[1]=abs(height[n]-height[n-1])
                return dp[1]
            if dp[n]!=-1:
                return dp[n]
            
            l= f(n-1,height,dp)+abs(height[n]-height[n-1])
            r= f(n-2,height,dp)+abs(height[n]-height[n-2])
            dp[n]= min(l,r)
            return dp[n]
            
        return f( n-1,height,dp) 


# DP II

class Solution:
    
    def minimumEnergy(self, height, n):
        dp=[-1 for i in range(n)]
        if n<=1:
            return 0
        dp[0]=0
        dp[1]=abs(height[1]-height[0])
        
        for i in range(2,n):
            l= dp[i-1]+abs(height[i]-height[i-1])
            r= dp[i-2]+abs(height[i]-height[i-2])
            dp[i]= min(l,r)
            
        return dp[n-1]

# DP -III

class Solution:
    
    def minimumEnergy(self, height, n):
        dp=[-1 for i in range(n)]
        if n<=1:
            return 0
        dp[0]=0
        dp[1]=abs(height[1]-height[0])
        
        for i in range(2,n):
            l= dp[i-1]+abs(height[i]-height[i-1])
            r= dp[i-2]+abs(height[i]-height[i-2])
            dp[i]= min(l,r)
            l=r
            r=dp[i]
            
        return dp[n-1]



