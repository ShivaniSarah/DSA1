get_all_subsets


# java

import java.util.ArrayList;
import java.util.List;

public class Solution {
    
    // Method to get all subsets
    public List<List<Integer>> getAllSubsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        getSubsets(nums.length - 1, nums, result);
        return result;
    }
    
    // Recursive method to generate all subsets
    private void getSubsets(int ind, int[] arr, List<List<Integer>> a) {
        if (ind < 0) {
            return;
        }
        
        List<List<Integer>> temp = new ArrayList<>();
        
        for (List<Integer> subset : a) {
            List<Integer> newSubset = new ArrayList<>(subset);
            newSubset.add(arr[ind]);
            temp.add(newSubset);
        }
        
        a.addAll(temp);
        
        List<Integer> singleElementSubset = new ArrayList<>();
        singleElementSubset.add(arr[ind]);
        a.add(singleElementSubset);
        
        getSubsets(ind - 1, arr, a);
    }
    
    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums = {1, 2, 3};
        List<List<Integer>> result = solution.getAllSubsets(nums);
        System.out.println(result);  // Output all subsets
    }
}

# python

class Solution(object):
    def get_all_subsets(self, nums):
        
        def f(ind, arr,a):  
            if ind <0:
                return
                
            temp=[]
            for i in a:
                temp.append(i+[arr[ind]])
            a.extend(temp)
            a.append([arr[ind]])
            f(ind - 1, arr,a)
            
            return

        def fn(arr):
            n = len(arr)
            a=[]
            f(n-1, arr, a)
            return a
            
        return fn(nums)
