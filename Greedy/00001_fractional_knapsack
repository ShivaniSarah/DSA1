https://www.geeksforgeeks.org/problems/fractional-knapsack-1587115620/1

Given weights and values of n items, we need to put these items 
in a knapsack of capacity w to get the maximum total value in the knapsack. 
Return a double value representing the maximum value in knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item here. 
The details of structure/class is defined in the comments above the given function.

Examples :

Input: n = 3, w = 50, value[] = [60,100,120], weight[] = [10,20,30]
Output: 240.000000
Explanation: Take the item with value 60 and weight 10, value 100 and weight 20 and split 
the third item with value 120 and weight 30, to fit it into weight 20. so it becomes (120/30)*20=80, 
so the total value becomes 60+100+80.0=240.0 Thus, total maximum value of item we can have is 240.00 from the given capacity of sack. 
Input: n = 2, w = 50, value[] = [60,100], weight[] = [10,20]
Output: 160.000000
Explanation: Take both the items completely, without breaking. Total maximum value of item we can have is 160.00 
from the given capacity of sack.

# java

class Solution {
    // Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int capacity, Item items[], int n) {
        // Create an array of index-value pairs based on value/weight ratio
        double[][] ppu = new double[n][2];
        for (int i = 0; i < n; i++) {
            ppu[i][0] = (double)items[i].value / items[i].weight; // Value per weight unit
            ppu[i][1] = i; // Index of the item
        }
        
        // Sort the array based on value/weight ratio in descending order
        // Arrays.sort(ppu, new Comparator<double[]>() {
        //     @Override
        //     public int compare(double[] a, double[] b) {
        //         return Double.compare(b[0], a[0]);
        //     }
        // });
        
        // Arrays.sort(ppu, (a,b)-> {
        //     return  Double.compare(b[0], a[0]);
        // });
        
        Arrays.sort(ppu,(a,b)->{
            if(b[0]>a[0]) return 1;
            else if(b[0]<a[0]) return -1;
            return 0;
        });
        
        double ans = 0.0;
        for (int i = 0; i < n && capacity > 0; i++) {
            int index = (int) ppu[i][1];
            double weight = items[index].weight;
            double value = items[index].value;
            
            if (capacity >= weight) {
                ans += value;
                capacity -= weight;
            } else {
                ans += value * ((double)capacity /(double) weight); // Fractional value calculation
                capacity = 0;
            }
        }
        
        return ans;
    }
}

or

# python

import sys
class Item:
    def __init__(self,val,w):
        self.value = val
        self.weight = w
        
class Solution:    
    #Function to get the maximum total value in the knapsack.
    def fractionalknapsack(self, w,arr,n):
        ppu=[]
        for i in range(len(arr)):
            a=arr[i].value/arr[i].weight
            ppu.append([a,i])
         
        # arr.sort(key=lambda x: x.value / x.weight, reverse=True)  
        ppu.sort(key=lambda x: x[0],reverse=True)
        
        ans=0
        for i in range(n):
            if w>0:
                a= arr[ppu[i][1]].weight
                if w>=a:
                    ans+=arr[ppu[i][1]].value
                    w=w-a
                else:
                    ans+=ppu[i][0]*w
                    # ans+= (w/a)*arr[ppu[i][1]].value
                    # w=w-w
                    break
                    
        
        return ans
