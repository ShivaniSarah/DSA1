# Maximum Product Subarray
#  link: https://leetcode.com/problems/maximum-product-subarray/description/
Given an integer array nums, find a subarray that has the largest product, and return the product.
The test cases are generated so that the answer will fit in a 32-bit integer.

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

# java

class Solution {
    public int maxProduct(int[] arr) {
        if (arr == null || arr.length == 0) {
            return 0;
        }

        int maxSoFar = arr[0], minSoFar = arr[0], result = arr[0];

        for (int i = 1; i < arr.length; i++) {
            int curr = arr[i];
            if (curr < 0) {
                int temp = maxSoFar;
                maxSoFar = minSoFar;
                minSoFar = temp;
            }
            
            maxSoFar = Math.max(curr, maxSoFar * curr);
            minSoFar = Math.min(curr, minSoFar * curr);
            
            result = Math.max(result, maxSoFar);
        }

        return result;
    }
}

or

public int maxProduct(int[] arr) {
        int n = arr.length;
        int pre = 1, suff = 1;
        int ans = Integer.MIN_VALUE;

        for (int i = 0; i < n; i++) {
            if (pre == 0) {
                pre = 1;
            }
            if (suff == 0) {
                suff = 1;
            }
            pre *= arr[i];
            suff *= arr[n - i - 1];
            ans = Math.max(ans, Math.max(pre, suff));
        }
        
        return ans;
    }

or

public int maxProduct(int[] nums) {
        int result = Integer.MIN_VALUE;
        
        for (int i = 0; i < nums.length - 1; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                int prod = 1;
                for (int k = i; k <= j; k++) {
                    prod *= nums[k];
                }
                result = Math.max(result, prod);
            }
        }
        
        return result;
    }

# printing

public class Solution {
    public int maxProduct(int[] arr) {
        if (arr == null || arr.length == 0) {
            return 0;
        }

        int maxSoFar = arr[0], minSoFar = arr[0], result = arr[0];
        int start = 0, end = 0, tempStart = 0;

        for (int i = 1; i < arr.length; i++) {
            int curr = arr[i];
            if (curr < 0) {
                int temp = maxSoFar;
                maxSoFar = minSoFar;
                minSoFar = temp;
            }

            if (curr > maxSoFar * curr) {
                maxSoFar = curr;
                tempStart = i;
            } else {
                maxSoFar *= curr;
            }

            minSoFar = Math.min(curr, minSoFar * curr);

            if (maxSoFar > result) {
                result = maxSoFar;
                start = tempStart;
                end = i;
            }
        }

        // Print the subarray
        System.out.print("The subarray is: [");
        for (int i = start; i <= end; i++) {
            System.out.print(arr[i] + (i < end ? ", " : ""));
        }
        System.out.println("]");

        return result;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] arr = {0, 10, 10, 10, 10, 10, 10, 10, 10, 10, -10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0};
        System.out.println("Maximum product is: " + sol.maxProduct(arr)); // Expected output: 1000000000
    }
}



# python

# Brute:

class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        result = float('-inf')
        for i in range(len(nums) - 1):
            for j in range(i + 1, len(nums)):
                prod = 1
                for k in range(i, j + 1):
                    prod *= nums[k]
                result = max(result, prod)
        return result


# Better Approach:

import sys
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        result = -sys.maxsize
        for i in range(len(nums) ):
            p = nums[i]
            for j in range(i + 1, len(nums)):
                result = max(result, p)
                p *= nums[j]
            result = max(result, p)  # manages (n-1)th term
        return result

# Optimal I:

import sys
class Solution:
    def maxProduct(self, arr: List[int]) -> int:
        n = len(arr) # size of array.
        pre, suff = 1, 1
        ans = float('-inf')
        for i in range(n):
            if pre == 0:
                pre = 1
            if suff == 0:
                suff = 1
            pre *= arr[i]
            suff *= arr[n - i - 1]
            ans = max(ans, max(pre, suff))
        return ans

# Optimal Approach II:

import sys
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        prod1 = nums[0]
        prod2 = nums[0]
        result = nums[0]

        for i in range(1, len(nums)):
            temp = max(nums[i], prod1 * nums[i], prod2 * nums[i])
            prod2 = min(nums[i], prod1 * nums[i], prod2 * nums[i])
            prod1 = temp

            result = max(result, prod1)

        return result

# Print that subarray:


