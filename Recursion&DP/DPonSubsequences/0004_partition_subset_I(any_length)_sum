Partition Equal Subset Sum

https://leetcode.com/problems/partition-equal-subset-sum/

Given an integer array nums, return true if you can partition the array into two subsets of any length
such that the sum of the elements in both subsets is equal or false otherwise.

Example 1:
Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].

Example 2:
Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.

# java

class Solution {
    public boolean canPartition(int[] arr) {
        int n = arr.length;
        int totSum = 0;
        for (int num : arr) {
            totSum += num;
        }
        
        // If the total sum is odd, it cannot be partitioned into two equal subsets.
        if (totSum % 2 == 1) {
            return false;
        }
        
        int k = totSum / 2;
        boolean[][] dp = new boolean[n][k + 1];

        // Initialize the first column as true
        for (int i = 0; i < n; i++) {
            dp[i][0] = true;
        }

        // Initialize the first row
        if (arr[0] <= k) {
            dp[0][arr[0]] = true;
        }

        // Fill the dp table
        for (int ind = 1; ind < n; ind++) {
            for (int target = 1; target <= k; target++) {
                boolean notTaken = dp[ind - 1][target];
                boolean taken = false;
                if (arr[ind] <= target) {
                    taken = dp[ind - 1][target - arr[ind]];
                }
                dp[ind][target] = notTaken || taken;
            }
        }

        return dp[n - 1][k];
    }
}


or


class Solution {

    private boolean f(int ind, int target, int[] arr, int[][] dp) {
        if (target == 0) {
            return true;
        }
        if (ind == 0) {
            return arr[0] == target;
        }
        
        if (dp[ind][target] != -1) {
            return dp[ind][target] == 1;
        }
        
        boolean notTaken = f(ind - 1, target, arr, dp);
        boolean taken = false;
        if (arr[ind] <= target) {
            taken = f(ind - 1, target - arr[ind], arr, dp);
        }
        
        dp[ind][target] = (notTaken || taken) ? 1 : 0;
        return dp[ind][target] == 1;
    }

    public boolean canPartition(int[] arr) {
        int n = arr.length;
        int totSum = 0;
        for (int num : arr) {
            totSum += num;
        }
        
        // if total sum is odd we can't partition into equal subset so return False
        if (totSum % 2 == 1) {
            return false;
        }
        
        int k = totSum / 2;
        int[][] dp = new int[n][k + 1];
        for (int[] row : dp) {
            java.util.Arrays.fill(row, -1);
        }
        
        // just find if subset sum equal to half of target exists or not
        return f(n - 1, k, arr, dp);
    }
}

# python

DP II:

class Solution(object):
    def canPartition(self, arr):
        n=len(arr)
        totSum = sum(arr)
        
        # If the total sum is odd, it cannot be partitioned into two equal subsets.
        if totSum % 2 == 1:
            return False
        else:
            k = totSum // 2
            dp = [[False for j in range(k + 1)] for i in range(n)]

            for i in range(n):
                dp[i][0] = True

            if arr[0]<=k:
                dp[0][arr[0]] = True

            for ind in range(1, n):
                for target in range(1, k + 1):

                    notTaken = dp[ind - 1][target]
                    taken = False
                    if arr[ind] <= target:
                        taken = dp[ind - 1][target - arr[ind]]
                    dp[ind][target] = notTaken or taken

            return dp[n - 1][k]
                

DP I:

class Solution(object):
    def canPartition(self, arr):
        
        def f(ind, target, arr, dp):
            if target == 0:
                return True
            if ind == 0:
                return arr[0] == target
            
            if dp[ind][target] != -1:
                return dp[ind][target]
                    
            notTaken = f(ind - 1, target, arr, dp)
            taken = False
            if arr[ind] <= target:
                taken = f(ind - 1, target - arr[ind], arr, dp)
                
            dp[ind][target] = notTaken or taken
            return dp[ind][target]


        n= len(arr)   
        totSum = sum(arr)
        # if total sum is odd we cant partition into equal subset so return False
        if totSum % 2 == 1:
            return False
        else:
            k = totSum // 2
            dp = [[-1 for i in range(k + 1)] for j in range(n)]
            # just find if subset sum equal to half of target  exists or not
            return f(n - 1, k, arr, dp)
            

def findWays(num, k):
    n = len(num)
    
    # Initialize a 2D DP array to store the count of subsets for different targets.
    dp = [[0] * (k + 1) for _ in range(n)]
    
    # Base case: There is always one way to make a subset with a target sum of 0 (empty subset).
    for i in range(n):
        dp[i][0] = 1
    
    # Handle the base case for the first element in the array.
    if num[0] <= k:
        dp[0][num[0]] = 1

    # Iterate through the elements in the array.
    for ind in range(1, n):
        for target in range(1, k + 1):
            # If the current element is not taken, the count is the same as the previous row.
            notTaken = dp[ind - 1][target]
            
            # If the current element is taken, subtract its value from the target and check the previous row.
            taken = 0
            if num[ind] <= target:
                taken = dp[ind - 1][target - num[ind]]
            
            # Update the DP array with the total count of ways (taken + notTaken).
            dp[ind][target] = notTaken + taken

    # The result is stored in the bottom-right cell of the DP array.
    return dp[n - 1][k]

def main():
    arr = [1, 2, 2, 3]
    k = 3
    
    # Find and print the number of subsets that can be formed with a sum of 'k'.
    print("The number of subsets found are", findWays(arr, k))

if __name__ == "__main__":
    main()


DP - I:

class Solution:
	def perfectSum(self, num, n, k):
        MOD = 10**9 + 7
    
        # Initialize a 2D DP array with None (to indicate uncomputed subproblems)
        dp = [[-1] * (k + 1) for _ in range(n + 1)]
        
        def f(i, k):
            # Base case: If k is 0, there's one subset (empty subset)
            if k == 0:
                return 1
            # Base case: If no elements are left and k is not 0, no subset can be formed
            if i <= 0:
                return 0
    
            # Check if the subproblem has already been solved
            if dp[i][k] != -1:
                return dp[i][k]
            
            # If the current element is not taken
            notTaken = f(i - 1, k)
            
            # If the current element is taken
            taken = 0
            if num[i - 1] <= k:
                taken = f(i - 1, k - num[i - 1])
            
            # Save the result in dp and return
            dp[i][k] = (notTaken + taken) % MOD
            return dp[i][k]
        
        # Call the recursive function starting from the last i and k sum k
        return f(n, k)
