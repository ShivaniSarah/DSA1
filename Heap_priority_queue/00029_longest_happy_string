https://leetcode.com/problems/longest-happy-string/

A string s is called happy if it satisfies the following conditions:

s only contains the letters 'a', 'b', and 'c'.
s does not contain any of "aaa", "bbb", or "ccc" as a substring.
s contains at most a occurrences of the letter 'a'.
s contains at most b occurrences of the letter 'b'.
s contains at most c occurrences of the letter 'c'.
Given three integers a, b, and c, return the longest possible happy string.
If there are multiple longest happy strings, return any of them. If there is no such string, return the empty string "".

A substring is a contiguous sequence of characters within a string.

Example 1:

Input: a = 1, b = 1, c = 7
Output: "ccaccbcc"
Explanation: "ccbccacc" would also be a correct answer.

# java

class Pair {
    int x;
    char y;
    Pair(int x, char y) {
        this.x = x;
        this.y = y;
    }
}

class PairComparator implements Comparator<Pair> {
    @Override
    public int compare(Pair p1, Pair p2) {
        return p2.x - p1.x;
    }
}

class Solution {
    public String longestDiverseString(int a, int b, int c) {
        PriorityQueue<Pair> maxHeap = new PriorityQueue<>(new PairComparator());
        StringBuilder answer = new StringBuilder();
        if(a != 0) {
            maxHeap.offer(new Pair(a, 'a'));
        }
        if(b != 0) {
            maxHeap.offer(new Pair(b, 'b'));
        }
        if(c != 0) {
            maxHeap.offer(new Pair(c, 'c'));
        }
        while(!maxHeap.isEmpty()) {
            Pair pair = maxHeap.poll();
            int n = answer.length();
            if(n > 1 && answer.charAt(n-1) == answer.charAt(n-2) && answer.charAt(n-1) == pair.y) {
                if(maxHeap.isEmpty()) {
                    break;
                } else {
                    Pair nextPair = maxHeap.poll();
                    answer.append(nextPair.y);
                    nextPair.x--;
                    if(nextPair.x != 0) {
                        maxHeap.offer(nextPair);
                    }
                }
            } else {
                answer.append(pair.y);
                pair.x--;
            }
            if(pair.x != 0) {
                maxHeap.offer(pair);
            }
        }
        return answer.toString();
    }
}

or

class Solution {
    public String longestDiverseString(int a, int b, int c) {
        StringBuilder sb = new StringBuilder();
        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((x,y)->y[1]-x[1]);
        
        if(a > 0)
            maxHeap.offer(new int[]{0,a});
        if(b > 0)
            maxHeap.offer(new int[]{1,b});
        if(c > 0)
            maxHeap.offer(new int[]{2,c});
        
        while(!maxHeap.isEmpty()) {
            int[] top=maxHeap.poll();
            int[] second=maxHeap.isEmpty() ? null : maxHeap.poll();
            
            int count=Math.min(2,top[1]);
            sb.append(getString((char)(top[0] + 'a'), count));
            top[1] -= count;
            
            if(second == null)
                break;
            
            count= top[1] <= second[1] ? Math.min(2,second[1]) : Math.min(1,second[1]);
            sb.append(getString((char)(second[0] + 'a'), count));
            second[1] -= count;
            
            if(top[1] > 0)
                maxHeap.offer(top);
            
            if(second[1] > 0)
                maxHeap.offer(second);
        }
        
        return sb.toString();
    }
    
    private String getString(char ch, int count) {
        StringBuilder sb = new StringBuilder();
        for(int i=0; i<count; i++) {
            sb.append(ch);
        }
        return sb.toString();
    }
}
