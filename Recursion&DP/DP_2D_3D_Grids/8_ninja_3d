# Ninja 3D Matrix
# Ninja and his friends
# Cherry pickup II
# Chocolates Pickup

We are given an ‘N*M’ matrix. Every cell of the matrix has some chocolates on it, mat[i][j] gives us the number of chocolates. 
We have two friends ‘Alice’ and ‘Bob’. 
initially, Alice is standing on the cell(0,0) and Bob is standing on the cell(0, M-1). 
Both of them can move only to the cells below them in these three directions: to the bottom cell (↓), to the bottom-right cell(↘), or to the bottom-left cell(↙).
When Alica and Bob visit a cell, they take all the chocolates from that cell with them. 
It can happen that they visit the same cell, in that case, the chocolates need to be considered only once.
They cannot go out of the boundary of the given matrix, we need to return the maximum number of chocolates that Bob and Alice can together collect.

# link: https://www.geeksforgeeks.org/problems/chocolates-pickup/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=chocolates-pickup

# Fixed starting point and variable end point
# 2 robots move together

# base cases from end point because we cant have all cells covered starting from first row
# hence recursion/dp can be started from both start or end point of a journey.



import sys

# Function to find the maximum chocolates collected
def maximumChocolates(n, m, grid):
    # Initialize a 3D memoization table dp with zeros
    dp = [[[0 for _ in range(m)] for _ in range(m)] for _ in range(n)]

    # Initialize the values for the last row of dp based on grid values
    for j1 in range(m):
        for j2 in range(m):
            if j1 == j2:
                dp[n - 1][j1][j2] = grid[n - 1][j1]
            else:
                dp[n - 1][j1][j2] = grid[n - 1][j1] + grid[n - 1][j2]

    # Iterate through rows from the second-to-last row to the first row
    for i in range(n - 2, -1, -1):
        for j1 in range(m):
            for j2 in range(m):
                maxi = -sys.maxsize

                # Try out 9 possible options by changing the indices
                for di in range(-1, 2):
                    for dj in range(-1, 2):
                        ans = 0
                        if j1 == j2:
                            ans = grid[i][j1]
                        else:
                            ans = grid[i][j1] + grid[i][j2]

                        if ((j1 + di < 0 or j1 + di >= m) or (j2 + dj < 0 or j2 + dj >= m)):
                            ans += int(-1e9)  # A large negative value if out of bounds
                        else:
                            ans += dp[i + 1][j1 + di][j2 + dj]  # Add the value from the next row

                        maxi = max(ans, maxi)

                # Store the maximum chocolates collected in the memoization table
                dp[i][j1][j2] = maxi

    # Return the maximum chocolates collected in the top row and the last column
    return dp[0][0][m - 1]

def main():
    # Define the input matrix and its dimensions
    matrix = [[2, 3, 1, 2], [3, 4, 2, 2], [5, 6, 3, 5]]
    n = len(matrix)
    m = len(matrix[0])

    # Call the maximumChocolates function and print the result
    print(maximumChocolates(n, m, matrix))

if __name__ == '__main__':
    main()


App II: efficient

class Solution:
    def solve(self, n, m, grid):
        dp=[[[-1]*m for i in range(m)] for j in range(n)]
        dp[0][0][m-1]=grid[0][0]+grid[0][-1]
        for i in range(n-1):
            for j in range(m):
                for k in range(j,m):
                    if dp[i][j][k]==-1:
                        continue
                    for x in range(j-1,j+2):
                        if not 0<=x<m:
                            continue
                        for y in range(k-1,k+2):
                            if not 0<=y<m : 
                                continue
                            if x==y:
                                dp[i+1][x][y]=max(dp[i+1][x][y],grid[i+1][x]+dp[i][j][k])
                            else:
                                dp[i+1][x][y]=max(dp[i+1][x][y],grid[i+1][x]+grid[i+1][y]+dp[i][j][k])
        return max([max(dp[-1][i]) for i in range(m)])











