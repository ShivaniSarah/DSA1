https://www.geeksforgeeks.org/max-heap-in-java/
https://www.geeksforgeeks.org/priority-queue-class-in-java/

TC : build takes O(n) time and other operations takes log(n) time
Note : By default min heap and poll pops element from front 

# Min Heap

import java.util.PriorityQueue;

public class PriorityQueueExample {

    public static void main(String[] args) {
        
        // Create a priority queue with initial capacity 10
        PriorityQueue<Integer> pq = new PriorityQueue<>(10);
        
        // Add elements to the queue
        pq.add(3);
        pq.add(1);
        pq.add(2);
        pq.add(5);
        pq.add(4);
        
        // Print the queue
        System.out.println("Priority queue: " + pq);
        
        // Peek at the top element of the queue
        System.out.println("Peek: " + pq.peek());
        
        // Remove the top element of the queue
        pq.poll();
        
        // Print the queue again
        System.out.println("Priority queue after removing top element: " + pq);
        
        // Check if the queue contains a specific element
        System.out.println("Does the queue contain 3? " + pq.contains(3));
        
        // Get the size of the queue
        System.out.println("Size of queue: " + pq.size());
        
        // Remove all elements from the queue
        pq.clear();
        
        // Check if the queue is empty
        System.out.println("Is the queue empty? " + pq.isEmpty());
    }
}

# Max heap

// Java program to demonstrate working
// of PriorityQueue as a Max Heap
// Using Collections.reverseOrder() method

// Importing all utility classes
import java.util.*;

// Main class
class GFG {

	// Main driver method
	public static void main(String args[])
	{

		// Creating empty priority queue
		PriorityQueue<Integer> pQueue
			= new PriorityQueue<Integer>(
				Collections.reverseOrder());

		// Adding items to our priority queue
		// using add() method
		pQueue.add(10);
		pQueue.add(30);
		pQueue.add(20);
		pQueue.add(400);

		// Printing the most priority element
		System.out.println("Head value using peek function:"
						+ pQueue.peek());

		// Printing all elements
		System.out.println("The queue elements:");
		Iterator itr = pQueue.iterator();
		while (itr.hasNext())
			System.out.println(itr.next());

		// Removing the top priority element (or head) and
		// printing the modified pQueue using poll()
		pQueue.poll();
		System.out.println("After removing an element "
						+ "with poll function:");
		Iterator<Integer> itr2 = pQueue.iterator();
		while (itr2.hasNext())
			System.out.println(itr2.next());

		// Removing 30 using remove() method
		pQueue.remove(30);
		System.out.println("after removing 30 with"
						+ " remove function:");

		Iterator<Integer> itr3 = pQueue.iterator();
		while (itr3.hasNext())
			System.out.println(itr3.next());

		// Check if an element is present using contains()
		boolean b = pQueue.contains(20);
		System.out.println("Priority queue contains 20 "
						+ "or not?: " + b);

		// Getting objects from the queue using toArray()
		// in an array and print the array
		Object[] arr = pQueue.toArray();
		System.out.println("Value in array: ");

		for (int i = 0; i < arr.length; i++)
			System.out.println("Value: "
							+ arr[i].toString());
	}
}


add(E e)	Inserts the specified element into this priority queue.
clear()	Removes all of the elements from this priority queue.
comparator()	Returns the comparator used to order the elements in this queue, or null if this queue is sorted according to the natural ordering of its elements.
contains?(Object o)	Returns true if this queue contains the specified element.
forEach?(Consumer<? super E> action)	Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.
iterator()	Returns an iterator over the elements in this queue.
 offer?(E e)	Inserts the specified element into this priority queue.
remove?(Object o)	Removes a single instance of the specified element from this queue, if it is present.
removeAll?(Collection<?> c)	Removes all of this collectionâ€™s elements that are also contained in the specified collection (optional operation).
removeIf?(Predicate<? super E> filter)	Removes all of the elements of this collection that satisfy the given predicate.
retainAll?(Collection<?> c)	Retains only the elements in this collection that are contained in the specified collection (optional operation).
spliterator()	Creates a late-binding and fail-fast Spliterator over the elements in this queue.
 toArray()	Returns an array containing all of the elements in this queue.
 toArray?(T[] a)	Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array.
Methods Declared in class java.util.AbstractQueue
Method	Description
addAll(Collection<? extends E> c)	Adds all of the elements in the specified collection to this queue.
element()	Retrieves, but does not remove, the head of this queue.
remove()	Retrieves and removes the head of this queue.
Methods Declared in class java.util.AbstractCollection
Method	Description
containsAll(Collection<?> c)	Returns true if this collection contains all of the elements in the specified collection.
isEmpty()	Returns true if this collection contains no elements.
toString()	Returns a string representation of this collection.
Methods Declared in interface java.util.Collection
Method	Description
containsAll(Collection<?> c)	Returns true if this collection contains all of the elements in the specified collection.
equals(Object o)	Compares the specified object with this collection for equality.
hashCode()	Returns the hash code value for this collection.
isEmpty()	Returns true if this collection contains no elements.
parallelStream()	Returns a possibly parallel Stream with this collection as its source.
size()	Returns the number of elements in this collection.
stream()	Returns a sequential Stream with this collection as its source.
toArray(IntFunction<T[]> generator)	Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array.
Methods Declared in interface java.util.Queue
Method	Description
peek()	Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
poll()	Retrieves and removes the head of this queue, or returns null if this queue is empty.
