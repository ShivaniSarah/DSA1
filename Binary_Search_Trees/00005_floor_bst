https://www.geeksforgeeks.org/problems/floor-in-bst/1

You are given a BST(Binary Search Tree) with n number of nodes and value x. your task is to find the greatest value node of the BST which is smaller than or equal to x.
Note: when x is smaller than the smallest node of BST then returns -1.

Example:

Input:
n = 7               2
                     \
                      81
                    /     \
                 42       87
                   \       \
                    66      90
                   /
                 45
x = 87
Output:
87
Explanation:
87 is present in tree so floor will be 87.

# java

class Solution {
    public static int floor(Node root, int x) {
        // Code here
        if(root==null) return -1;
        
        if(root.data==x){
            return root.data;
        }else if(root.data<x){
            int right = floor(root.right,x);
            return right==-1?root.data:right;
        }else{
            return floor(root.left,x);
        }
    }
}


or





// User function Template for Java


class Solution {
    public static int floor(Node root, int key) {
        int max = -1;
        
        while (root != null) {
            if (root.data == key) {
                return key;
            } else if (root.data > key) {
                root = root.left;
            } else {
                max = root.data; // Potential floor value
                root = root.right;
            }
        }
        
        return max;
    }
}
