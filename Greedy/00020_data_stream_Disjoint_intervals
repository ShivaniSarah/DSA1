https://leetcode.com/problems/data-stream-as-disjoint-intervals/

Given a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals.
Implement the SummaryRanges class:
SummaryRanges() Initializes the object with an empty stream.
void addNum(int value) Adds the integer value to the stream.
int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi].
The answer should be sorted by starti.
 
Example 1:
Input
["SummaryRanges", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals",
"addNum", "getIntervals", "addNum", "getIntervals"]
[[], [1], [], [3], [], [7], [], [2], [], [6], []]
Output
[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]

Explanation
SummaryRanges summaryRanges = new SummaryRanges();
summaryRanges.addNum(1);      // arr = [1]
summaryRanges.getIntervals(); // return [[1, 1]]
summaryRanges.addNum(3);      // arr = [1, 3]
summaryRanges.getIntervals(); // return [[1, 1], [3, 3]]
summaryRanges.addNum(7);      // arr = [1, 3, 7]
summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]
summaryRanges.addNum(2);      // arr = [1, 2, 3, 7]
summaryRanges.getIntervals(); // return [[1, 3], [7, 7]]
summaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]
summaryRanges.getIntervals(); // return [[1, 3], [6, 7]]

Note: In java TreeSet is like Ordered Set and TreeMap is like Ordered Map


# Java

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges obj = new SummaryRanges();
 * obj.addNum(value);
 * int[][] param_2 = obj.getIntervals();
 */

 class SummaryRanges {
    TreeSet<int[]> set;
    public SummaryRanges() {
        set  = new TreeSet<int[]>((a, b) -> (a[0] == b[0]) ? a[1] - b[1] : a[0] - b[0]);
    }
    
    public void addNum(int value) {
        int[] m = new int[]{value, value};
        if(set.contains(m)){
            return;
        }
        int[] heigh = set.higher(m), low = set.lower(m);
        if(heigh != null && heigh[0] == value + 1 && low != null && low[1] == value - 1){
            // [1, 1], [3, 3]. inseted [2, 2]
            heigh[0] = low[0];
            set.remove(low);
        }else if(heigh != null && heigh[0] == value + 1){
            // [3, 3] insert [2, 2]
            heigh[0] = value;
        }else if(low != null && low[1] == value - 1){
            // [1, 1] insert [2, 2]
            low[1] = value;
        }else if((heigh != null && heigh[0] == value) || (low != null && low[0] <= value && low[1] >= value)){
            // [2, 3] insert [2, 2]
            // [1, 3] insert [2, 2]
            return;
        }else{
            set.add(m);
        }
    } 
    
    public int[][] getIntervals(){
        List<int[]> res = new ArrayList<>();
        for(int[] s: set){
            res.add(s);
        }
        return res.toArray(new int[0][]);
    }
}


or




class SummaryRanges {
    private final TreeMap<Integer, Integer> orderedMap;

    public SummaryRanges() {
        this.orderedMap = new TreeMap<>();
    }
    
    public void addNum(final int value) {
        if(!this.orderedMap.containsKey(value)) {
            final Map.Entry<Integer, Integer> low = this.orderedMap.lowerEntry(value);

            if(low == null) {
                if(this.orderedMap.containsKey(value + 1)) {
                    this.orderedMap.put(value, this.orderedMap.get(value + 1));
                    this.orderedMap.remove(value + 1);
                } else {
                    this.orderedMap.put(value, value);
                }
            } else {
                if(value > low.getValue()) {
                    if(low.getValue() == value - 1) {
                        int right = value;

                        if(this.orderedMap.containsKey(value + 1)) {
                            right = this.orderedMap.get(value + 1);
                            this.orderedMap.remove(value + 1);
                        }

                        this.orderedMap.put(low.getKey(), right);
                    } else {
                        if(this.orderedMap.containsKey(value + 1)) {
                            this.orderedMap.put(value, this.orderedMap.get(value + 1));
                            this.orderedMap.remove(value + 1);
                        } else {
                            this.orderedMap.put(value, value);
                        }
                    }
                }
            }
        }
    }
    
    public int[][] getIntervals() {
        final int[][] intervals = new int[this.orderedMap.size()][2];

        int i = 0;

        for(final Map.Entry<Integer, Integer> interval : this.orderedMap.entrySet()) {
            intervals[i][0] = interval.getKey();
            intervals[i++][1] = interval.getValue();
        }

        return intervals;
    }
}

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges obj = new SummaryRanges();
 * obj.addNum(value);
 * int[][] param_2 = obj.getIntervals();
 */
