https://www.geeksforgeeks.org/problems/row-with-max-1s0023/1

Given a boolean 2D array, consisting of only 1's and 0's, where each row is sorted.
Find the 0-based index of the first row that has the maximum number of 1's.
Return the 0-based index of the first row that has the most number of 1s. If no such row exists, return -1.

Examples :

Input: arr[][] = [[0, 1, 1, 1],[0, 0, 1, 1],[1, 1, 1, 1],[0, 0, 0, 0]]
Output: 2
Explanation: Row 2 contains 4 1's (0-based indexing).

Input: arr[][] = [[0, 0], [1, 1]]
Output: 1
Explanation: Row 1 contains 2 1's (0-based indexing).

class Solution {
    
    public static int lowerBound(int[] arr, int n, int x) {
        int low = 0, high = n - 1;
        int ans = n;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] >= x) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
    
    public int rowWithMax1s(int matrix[][]) {
       int cnt_max = 0;
        int index = -1;
        int n = matrix.length;
        if (n == 0) return -1; // No rows in the matrix
        int m = matrix[0].length;

        // Traverse each row:
        for (int i = 0; i < n; i++) {
            int cnt_ones = m - lowerBound(matrix[i],m, 1);
            if (cnt_ones > cnt_max) {
                cnt_max = cnt_ones;
                index = i;
            }
        }
        return index;
    }
}
