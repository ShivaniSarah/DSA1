https://www.geeksforgeeks.org/problems/ceil-the-floor2802/1

# 4 cases 
# -- when arr[mid]==x => then ceil and floor equals arr[mid]
# when x< arr[0] => floor=-1, ceil= arr[0]
# when x=arr[n-1]  => floor=arr[n-1] ceil=-1
# floor[mid], ceil[mid+1]


# APP III:

class Solve {
    Pair getFloorAndCeil(int[] arr, int n, int x) {
        Arrays.sort(arr);
        int low =0, high=n-1,floor=-1,ceil=-1;
        int mid;
        while(low<=high){
           mid=(low+high)/2;
           if(arr[mid]==x) return new Pair(arr[mid],arr[mid]);
           else if(arr[mid]>x){
               high=mid-1;
               ceil=arr[mid];
           }
           else{
               floor=arr[mid];
               low=mid+1;
           }
        }
        return new Pair(floor, ceil);
    }
}

APP II:

class Solve {
    Pair getFloorAndCeil(int[] arr, int n, int x) {
        Arrays.sort(arr);
        int low =0, high=n-1,floor=-1,ceil=-1;
        int mid;
        while(low<=high){
           mid=(low+high)/2;
           if(arr[mid]>x){
               
               high=mid-1;
           }
           else{
               if(arr[mid]==x) return new Pair(arr[mid],arr[mid]);
               floor=arr[mid];
               if(mid==n-1) return new Pair(arr[mid],-1);
               ceil=arr[mid+1];
               
               low=mid+1;
           }
        }
        if(floor==-1) return new Pair(-1,arr[0]);
        return new Pair(floor,ceil);
        
    }
}

# APP I:

class Solve {
    Pair getFloorAndCeil(int[] arr, int n, int x) {
        Arrays.sort(arr);
        int low =0, high=n-1,floor=-1,ceil=-1;
        int mid;
        while(low<=high){
           mid=(low+high)/2;
           if(arr[mid]>x){
               high=mid-1;
           }
           else{
               floor=mid;
               ceil=mid+1;
               if(arr[mid]==x) ceil=mid;
               low=mid+1;
           }
        }
        int f,c;
        if(floor ==-1) {
            f=-1;
            c=arr[0];
        }
        else if(floor>n-1){
            f=-1;
            c=-1;
        }
        else if(floor==n-1){
            f=arr[floor];
            c=-1;
        }
        else{
            f=arr[floor];
            c=arr[ceil];
        }
        return new Pair(f,c);
    }
}
