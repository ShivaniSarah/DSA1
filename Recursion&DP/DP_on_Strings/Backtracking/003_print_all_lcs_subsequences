https://www.geeksforgeeks.org/problems/print-all-lcs-sequences3413/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=print-all-lcs-sequences

# java

class Solution {
    public List<String> all_longest_common_subsequences(String s, String t) {
       int n = s.length();
        int m = t.length();
        Set<String>[][] dp = new HashSet[n + 1][m + 1];

        // Initialize the dp array
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                dp[i][j] = new HashSet<>();
                if (i == 0 || j == 0) {
                    dp[i][j].add("");
                }
            }
        }

        // Fill the dp array
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s.charAt(i - 1) == t.charAt(j - 1)) {
                    for (String lcs : dp[i - 1][j - 1]) {
                        dp[i][j].add(lcs + s.charAt(i - 1));
                    }
                } else {
                    if (dp[i - 1][j].iterator().next().length() > dp[i][j - 1].iterator().next().length()) {
                        dp[i][j].addAll(dp[i - 1][j]);
                    } else if (dp[i - 1][j].iterator().next().length() < dp[i][j - 1].iterator().next().length()) {
                        dp[i][j].addAll(dp[i][j - 1]);
                    } else {
                        dp[i][j].addAll(dp[i - 1][j]);
                        dp[i][j].addAll(dp[i][j - 1]);
                    }
                }
            }
        }

        // Extract and return the results
        List<String> result = new ArrayList<>(dp[n][m]);
        Collections.sort(result);
        return result;
    }
}

or

class Solution {
    public List<String> all_longest_common_subsequences(String s, String t) {
        return solve(s, t, s.length(), t.length());
    }
    
    List<String> solve(String text1, String text2, int m, int n){
       int[][] dp = new int[m+1][n+1];
       //base case
       //initialize first row and first col = 0
       //no need, since its already 0
       for(int i=1; i<=m; i++){
          for(int j=1; j<=n; j++){
             //match
             if( text1.charAt(i-1) == text2.charAt(j-1)){
                dp[i][j] = 1 + dp[i-1][j-1];
             } else {
                //not match
                dp[i][j] = Math.max( dp[i][j-1], dp[i-1][j]);
             }
          }
       }
       
        Set<String> result = new HashSet<>();
        Map<String, Set<String>> memo = new HashMap<>();
        
        findAllLCS(text1, text2, m, n, "", result, dp, memo);
        
        List<String> ans = new ArrayList<>(result);
        Collections.sort(ans);
        return ans;
    }
    
    void findAllLCS(String text1, String text2, int i, int j, String curString, Set<String> result, int[][] dp, Map<String, Set<String>> memo) {
        if (i == 0 || j == 0) {
            if (!curString.isEmpty()) {
                result.add(new StringBuilder(curString).reverse().toString());
            }
            return;
        }

        String key = i + "," + j + "," + curString;
        if (memo.containsKey(key)) {
            result.addAll(memo.get(key));
            return;
        }

        Set<String> tempResult = new HashSet<>();
        if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
            findAllLCS(text1, text2, i - 1, j - 1, curString + text1.charAt(i - 1), tempResult, dp, memo);
        } else {
            if (dp[i][j] == dp[i][j - 1]) {
                findAllLCS(text1, text2, i, j-1, curString, tempResult, dp, memo);
            }
            if (dp[i][j] == dp[i - 1][j]) {
                findAllLCS(text1, text2, i-1, j, curString, tempResult, dp, memo);
            }
        }

        memo.put(key, tempResult);
        result.addAll(tempResult);
    }
}

or

# TLE:
class Solution {

    private int lcsLength;
    private int[][] dp;
    private String s;
    private String t;

    // Helper function to backtrack and find all LCS
    private List<String> backtrack(int i, int j) {
        List<String> result = new ArrayList<>();
        if (lcsLength == 0) {
            result.add("");
            return result;
        }

        if (i == 0 || j == 0) {
            result.add("");
            return result;
        }

        if (s.charAt(i - 1) == t.charAt(j - 1)) {
            for (String sub : backtrack(i - 1, j - 1)) {
                result.add(sub + s.charAt(i - 1));
            }
        } else {
            if (dp[i - 1][j] == dp[i][j]) {
                result.addAll(backtrack(i - 1, j));
            }
            if (dp[i][j - 1] == dp[i][j]) {
                result.addAll(backtrack(i, j - 1));
            }
        }
        return result;
    }

    // Function to find all longest common subsequences
    public List<String> all_longest_common_subsequences(String s, String t) {
        this.s = s;
        this.t = t;
        int m = s.length();
        int n = t.length();

        // Step 1: Build the DP table
        dp = new int[m + 1][n + 1];

        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s.charAt(i - 1) == t.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        lcsLength = dp[m][n];

        // Step 2: Backtrack to find all LCS
        Set<String> lcsSet = new HashSet<>();
        lcsSet.addAll(backtrack(m, n));

        // Convert the set to a list and sort it
        List<String> allLcs = new ArrayList<>(lcsSet);
        Collections.sort(allLcs);

        return allLcs;
    }
}

# python

def all_longest_common_subsequences(self, s, t):
        m, n = len(s), len(t)
        # Step 1: Build the DP table
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if s[i - 1] == t[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        
        lcs_length = dp[m][n]
        
        # Step 2: Backtrack to find all LCS
        from functools import lru_cache
        
        @lru_cache(None)
        def backtrack(i, j):
            if lcs_length == 0:
                return [""]
            
            if i == 0 or j == 0:
                return [""]
            
            if s[i - 1] == t[j - 1]:
                return [x + s[i - 1] for x in backtrack(i - 1, j - 1)]
            else:
                lcs_set = set()
                if dp[i - 1][j] == dp[i][j]:
                    lcs_set.update(backtrack(i - 1, j))
                if dp[i][j - 1] == dp[i][j]:
                    lcs_set.update(backtrack(i, j - 1))
                return sorted(lcs_set)
        
        all_lcs = sorted(set(backtrack(m, n)))
        
        return all_lcs

Approach II:

using binary search lower bound
