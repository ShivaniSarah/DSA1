# Two Sum 

# link : https://leetcode.com/problems/two-sum/

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.


# java

public class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        int[] sortedNums = nums.clone();
        Arrays.sort(sortedNums);

        int left = 0, right = n - 1;
        while (left < right) {
            int summation = sortedNums[left] + sortedNums[right];
            if (summation == target) {
                int l = findIndex(nums, sortedNums[left]);
                int r = findIndex(nums, sortedNums[right]);
                
                if (l != r) {
                    return new int[] {l, r};
                } else {
                    int r1 = findIndex(nums, sortedNums[right], l + 1, n);
                    return new int[] {l, r1};
                }
            } else if (summation < target) {
                left++;
            } else {
                right--;
            }
        }
        return new int[] {}; // No solution found
    }

    private int findIndex(int[] nums, int value) {
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == value) {
                return i;
            }
        }
        throw new IllegalArgumentException("Value not found in array");
    }

    private int findIndex(int[] nums, int value, int start, int end) {
        for (int i = start; i < end; i++) {
            if (nums[i] == value) {
                return i;
            }
        }
        throw new IllegalArgumentException("Value not found in array in the given range");
    }

}

or

public class Solution {
    public int[] twoSum(int[] arr, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < arr.length; i++) {
            int num = arr[i];
            int moreNeeded = target - num;
            
            if (map.containsKey(moreNeeded)) {
                int[] result = {i, map.get(moreNeeded)};
                Arrays.sort(result);
                return result;
            }
            
            map.put(num, i);
        }
        
        return new int[]{}; // Return an empty array if no solution is found
    }
}


# python

# Better Approach - using unordered set hashing approach

class Solution:
    def twoSum(self, arr: List[int], target: int) -> List[int]:
        n=len(arr)
        mpp = {}
        for i in range(n):
            num = arr[i]
            more_needed = target - num
            if more_needed in mpp:
                
                return sorted([i,arr.index(more_needed)])
            mpp[num] = i
        return []

# Optimal Approach - Two Pointers Approach

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        n= len(nums)
        arr=sorted(nums)
        left, right = 0, n - 1
        while left < right:
            summation = arr[left] + arr[right]
            if summation == target:
                l=nums.index(arr[left])
                r=nums.index(arr[right])
                if l!=r:
                    return sorted([l,r])
                try:
                    r1=nums.index(arr[right],l+1,len(nums))
                except:
                    r1 =nums.index(arr[right],0,l)
                return sorted([l,r1])
                
            elif summation < target:
                left += 1
            else:
                right -= 1
        return []

