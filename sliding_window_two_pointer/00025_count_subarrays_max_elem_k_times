Count Subarrays Where Max Element Appears at Least K Times

https://leetcode.com/problems/count-subarrays-where-max-element-appears-at-least-k-times/description/

You are given an integer array nums and a positive integer k.
Return the number of subarrays where the maximum element of nums appears at least k times in that subarray.
A subarray is a contiguous sequence of elements within an array.

Example 1:

Input: nums = [1,3,2,3,3], k = 2
Output: 6
Explanation: The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3].

Example 2:
Input: nums = [1,4,2,1], k = 3
Output: 0
Explanation: No subarray contains the element 4 at least 3 times.

# java

class Solution {
    public long countSubarrays(int[] nums, int k) {
        int maxi = 0, i = 0, j = 0, n = nums.length;

        HashMap<Integer, Integer> map = new HashMap<>();

        long ans = 0;

        for (int el : nums) 
            maxi = Math.max(maxi, el);

        while (j < nums.length) {
            if (nums[j] == maxi) 
                map.put(nums[j], map.getOrDefault(nums[j], 0) + 1);
            while (map.getOrDefault(maxi, 0) >= k) {
                ans += (n - j);
                if (nums[i] == maxi) 
                    map.put(nums[i], map.get(nums[i]) - 1);
                i++;
            }
            j++;
        }
        return ans;
    }
}

or

class Solution {
    public long countSubarrays(int[] nums, int k) {
        
        int n = nums.length;
        int max = Integer.MIN_VALUE;
        for(int i =0;i<n;i++){
            if(nums[i]>max){
                max = nums[i];
            }
        }
        int start =0,end=0,mef=0;
        long count=0;
        while(end<n){
            if(nums[end]==max)
            mef++;
            while(mef>=k){
            count = count +(n-end);
            if(nums[start]== max)
            mef--;
            start++;
        }
         end++;
        }
      return count;
    }
}   
