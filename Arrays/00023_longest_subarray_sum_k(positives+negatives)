https://www.geeksforgeeks.org/problems/longest-sub-array-with-sum-k0809/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=longest-sub-array-with-sum-k

Given an array containing N integers and an integer K., 
Your task is to find the length of the longest Sub-Array with the sum of the elements equal to the given value K.

A[] = {10, 5, 2, 7, 1, 9}
K = 15
Output : 4
Explanation:
The sub-array is {5, 2, 7, 1}.

Input : 
A[] = {-1, 2, 3}
K = 6
Output : 0
Explanation: 
There is no such sub-array with sum 6.

# java

Optimal : (for only positives, for positives, negatives and zero )

class Solution{
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr (int a[], int n, int k) {
        // HashMap to store the cumulative sum and the earliest index it was found at
        HashMap<Integer, Integer> preSumMap = new HashMap<>();
        int sum = 0;
        int maxLen = 0;

        for (int i = 0; i < n; i++) {
            // Calculate the prefix sum till index i
            sum += a[i];

            // If the sum is equal to k, update maxLen
            if (sum == k) {
                maxLen = Math.max(maxLen, i + 1);
            }

            // Calculate the remaining part i.e. sum - k
            int rem = sum - k;

            // If rem is in the map, calculate the length and update maxLen
            if (preSumMap.containsKey(rem)) {
                int length = i - preSumMap.get(rem);
                maxLen = Math.max(maxLen, length);
            }

            // Update the map with the prefix sum and its index
            if (!preSumMap.containsKey(sum)) {
                preSumMap.put(sum, i);
            }
        }

        return maxLen;
    }
}

or

class Solution{
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr (int a[], int n, int k) {
        int length = 0;

        // Loop for starting index
        for (int i = 0; i < n; i++) {
            // Loop for ending index
            for (int j = i; j < n; j++) {
                // Calculate the sum of subarray a[i...j]
                int sum = 0;
                for (int K = i; K <= j; K++) {
                    sum += a[K];
                }

                // Check if the sum of this subarray equals k
                if (sum == k) {
                    length = Math.max(length, j - i + 1);
                }
            }
        }

        return length;
    }
}

or

class Solution{
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr (int a[], int n, int k) {
        int length = 0;

        // Loop for starting index
        for (int i = 0; i < n; i++) {
            int sum = 0; // Initialize sum of subarray

            // Loop for ending index
            for (int j = i; j < n; j++) {
                // Add the current element to the sum
                sum += a[j];

                // Check if the sum of this subarray equals k
                if (sum == k) {
                    length = Math.max(length, j - i + 1);
                }
            }
        }
        return length;
    }
}

Optimal: (only for positive numbers)

class Solution{
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr (int a[], int n, int k) {
        int maxLen = 0;    // Maximum length of subarray with sum k
        int sum = 0;       // Current sum of the subarray

        // HashMap to store (sum, index) pairs
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, -1);  // Base case to handle subarrays starting from index 0

        // Traverse the array
        for (int right = 0; right < n; right++) {
            sum += a[right];  // Update the current sum

            // If (sum - k) is found in the map, update maxLen
            if (map.containsKey(sum - k)) {
                maxLen = Math.max(maxLen, right - map.get(sum - k));
            }

            // Store the current sum with its index if it hasn't been stored
            map.putIfAbsent(sum, right);
        }

        return maxLen;  // Return the maximum length found

    }
}


# python

Optimal : (for only positives, for positives, negatives and zero )

class Solution:
    def lenOfLongSubarr(self, a, n, k):
        # Dictionary to store the cumulative sum and the earliest index it was found at
        preSumMap = {} # store index instead of prefix sum
        Sum = 0
        maxLen = 0
        for i in range(n):
            # calculate the prefix sum till index i:
            Sum += a[i]
    
            # if the sum = k, update the maxLen:
            if Sum == k:
                maxLen = max(maxLen, i + 1)
    
            # calculate the sum of remaining part i.e. x-k:
            rem = Sum - k
    
            # Calculate the length and update maxLen:
            if rem in preSumMap:
                length = i - preSumMap[rem]
                maxLen = max(maxLen, length)
    
            # Finally, update the map checking the conditions:
            if Sum not in preSumMap:
                preSumMap[Sum] = i
    
        return maxLen




Brute:

class Solution:
    def lenOfLongSubarr (self, a, n, k) :
        n = len(a) # size of the array.

        length = 0
        for i in range(n): # starting index
            for j in range(i, n): # ending index
                # add all the elements of
                # subarray = a[i...j]:
                s = 0
                for K in range(i, j+1):
                    s += a[K]
    
                if s == k:
                    length = max(length, j - i + 1)
        return length

Brute II:

class Solution:
    def lenOfLongSubarr (self, a, n, k) : 
        n = len(a) # size of the array.

        length = 0
        for i in range(n): # starting index
            s = 0
            for j in range(i, n): # ending index
                # add the current element to
                # the subarray a[i...j-1]:
                s += a[j]
    
                if s == k:
                    length = max(length, j - i + 1)
        return length




Optimal: (only for positive numbers)

from typing import List

def getLongestSubarray(a: [int], k: int) -> int:
    
    n = len(a) 

    left, right = 0, 0 
    Sum = 0
    maxLen = 0
    
    while right < n:
        if right < n: Sum += a[right]
        while left <= right and Sum > k:
            Sum -= a[left]
            left += 1
            
        if Sum == k:
            maxLen = max(maxLen, right - left + 1)

        right += 1

    return maxLen


if __name__ == "__main__":
	a = [2,2,5,1,1,1,9,2]
	k = 10

	length = getLongestSubarray(a, k)
	print(f"The length of the longest subarray is: {length}")
