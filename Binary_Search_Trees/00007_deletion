https://leetcode.com/problems/delete-node-in-a-bst/description/

Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
 
Example 1:

Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.

# java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null) return root;
        if(root.val==key) return helper(root);
        TreeNode check=root;
        while(root!=null){
            if(root.val>key){
                if(root.left!=null && root.left.val==key){
                    root.left=helper(root.left);
                    break;
                }
                else root=root.left;
            }
            else if(root.val<key){
                if(root.right!=null && root.right.val==key){
                    root.right=helper(root.right);
                    break;
                }
                else root=root.right;
            }
        }
        return check;
    }
    public TreeNode helper(TreeNode root){
        if(root.left==null) return root.right;
        else if(root.right==null) return root.left;
        TreeNode rightChild=root.right;
        TreeNode lastRightChild=findLast(root.left);
        lastRightChild.right=rightChild;
        return root.left;
    }
    public TreeNode findLast(TreeNode root){
        if(root.right==null){
            return root;
        }
        return findLast(root.right);
    }
}

or

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null){
            return null;}
            
        if(root.val>key){
            root.left=deleteNode(root.left,key);
        }
        else if(root.val<key){
            root.right=deleteNode(root.right,key);
        }
         else{//root.val==key

               //case1-> leaf Node
            if(root.left==null && root.right==null){
               return null;
            }

            //case2->single child
            if(root.left==null){
                return root.right;}
            else if(root.right==null){
                return root.left;}

            //case 3->two children
            TreeNode IS=inorderSuccessor(root.right);
            root.val=IS.val;
            root.right=deleteNode(root.right,IS.val);}
        
    return root;}

    private TreeNode inorderSuccessor(TreeNode root){
        while(root.left!=null){
            root=root.left;}
        return root;}
}
