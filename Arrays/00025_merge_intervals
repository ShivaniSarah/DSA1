https://leetcode.com/problems/merge-intervals/

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals,
and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.'[/

# java


class Solution {
    public int[][] merge(int[][] intervals) {
        int n = intervals.length;
        
        // Sort the intervals based on the start time
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        
        List<int[]> merged = new ArrayList<>();
        
        for (int i = 0; i < n; i++) {
            // If merged is empty or current interval does not overlap with the last one
            if (merged.isEmpty() || intervals[i][0] > merged.get(merged.size() - 1)[1]) {
                merged.add(intervals[i]);
            } else {
                // Merge the current interval with the last one
                int[] last = merged.get(merged.size() - 1);
                last[1] = Math.max(last[1], intervals[i][1]);
            }
        }
        
        // Convert List<int[]> to int[][]
        int[][] result = new int[merged.size()][2];
        for (int i = 0; i < merged.size(); i++) {
            result[i] = merged.get(i);
        }
        
        return result;
    }
}


or


class Solution {
    public int[][] merge(int[][] intervals) {
        int n = intervals.length;
        
        // Sort the intervals based on the start time
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        
        List<int[]> merged = new ArrayList<>();
        
        for (int i = 0; i < n; i++) {
            int start = intervals[i][0];
            int end = intervals[i][1];
            
            // Skip all the merged intervals
            if (!merged.isEmpty() && end <= merged.get(merged.size() - 1)[1]) {
                continue;
            }
            
            // Check the rest of the intervals
            for (int j = i + 1; j < n; j++) {
                if (intervals[j][0] <= end) {
                    end = Math.max(end, intervals[j][1]);
                } else {
                    break;
                }
            }
            merged.add(new int[] {start, end});
        }
        
        // Convert List<int[]> to int[][]
        int[][] result = new int[merged.size()][2];
        for (int i = 0; i < merged.size(); i++) {
            result[i] = merged.get(i);
        }
        
        return result;
    }
}


# python

# Optimal :

class Solution(object):
    def merge(self, arr):

        n = len(arr) 
        arr.sort()
        ans = []
        for i in range(n):
            if not ans or arr[i][0] > ans[-1][1]:          # if the current interval does not lie in the last interval
                ans.append(arr[i])    
            else:
                ans[-1][1] = max(ans[-1][1], arr[i][1])    # if the current interval lies in the last interval
            
        return ans

Brute:

class Solution(object):
    def merge(self, arr):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """
        n = len(arr) # size of the array

        # sort the given intervals:
        arr.sort()

        ans = []

        for i in range(n): # select an interval:
            start, end = arr[i][0], arr[i][1]

            # Skip all the merged intervals:
            if ans and end <= ans[-1][1]:
                continue

            # check the rest of the intervals:
            for j in range(i + 1, n):
                if arr[j][0] <= end:
                    end = max(end, arr[j][1])
                else:
                    break
            ans.append([start, end])
        return ans


            
            
            
