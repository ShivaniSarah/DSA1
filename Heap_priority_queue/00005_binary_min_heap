https://www.geeksforgeeks.org/problems/operations-on-binary-min-heap/1

A binary heap is a Binary Tree with the following properties:
1) Its a complete tree (All levels are completely filled except possibly the last level and the last level has all keys as left as possible). This property of Binary Heap makes them suitable to be stored in an array.

2) A Binary Heap is either Min Heap or Max Heap. In a Min Binary Heap, the key at the root must be minimum among all keys present in Binary Heap. The same property must be recursively true for all nodes in Binary Tree. Max Binary Heap is similar to MinHeap.

You are given an empty Binary Min Heap and some queries and your task is to implement the three methods insertKey,  deleteKey,  and extractMin on the Binary Min Heap and call them as per the query given below:
1) 1  x  (a query of this type means to insert an element in the min-heap with value x )
2) 2  x  (a query of this type means to remove an element at position x from the min-heap)
3) 3  (a query like this removes the min element from the min-heap and prints it ).

Example 1:

Input:
Q = 7
Queries:
insertKey(4)
insertKey(2)
extractMin()
insertKey(6)
deleteKey(0)
extractMin()
extractMin()
Output: 2 6 - 1
Explanation: In the first test case for
query 
insertKey(4) the heap will have  {4}  
insertKey(2) the heap will be {2 4}
extractMin() removes min element from 
             heap ie 2 and prints it
             now heap is {4} 
insertKey(6) inserts 6 to heap now heap
             is {4 6}
deleteKey(0) delete element at position 0
             of the heap,now heap is {6}
extractMin() remove min element from heap
             ie 6 and prints it  now the
             heap is empty
extractMin() since the heap is empty thus
             no min element exist so -1
             is printed.

# java

class MinHeap {
    int[] harr;
    int capacity;
    int heap_size;
    MinHeap(int cap) {
        heap_size = 0;
        capacity = cap;
        harr = new int[cap];
    }
    int parent(int i) { return (i - 1) / 2; }
    int left(int i) { return (2 * i + 1); }
    int right(int i) { return (2 * i + 2); }

    //Function to extract minimum value in heap and then to store 
    //next minimum value at first index.
    int extractMin()
    {
        if(heap_size==0){
            return -1;
        }
        if(heap_size==1){
            heap_size--;
            return harr[0];
        }
        int ans=harr[0];
        harr[0]=harr[heap_size-1];
        heap_size--;
        MinHeapify(0);
        return ans;
        // Your code here.
    }

    //Function to insert a value in Heap.
    void insertKey(int k) 
    {
        if(heap_size==capacity){
            return;
        }
        heap_size++;
        harr[heap_size-1]=k;
        int i=heap_size-1;
        while(i!=0 && harr[parent(i)]>harr[i]){
            int temp=harr[i];
            harr[i]=harr[parent(i)];
            harr[parent(i)]=temp;
            i=parent(i);
        }
        
        // Your code here.
    }

    //Function to delete a key at ith index.
    void deleteKey(int i) 
    {
        if(i<0||i>=heap_size){
            return;
        }
        decreaseKey(i,Integer.MIN_VALUE);
        extractMin();
        // Your code here.
    }

    //Function to change value at ith index and store that value at first index.
    void decreaseKey(int i, int new_val) 
    {
        harr[i] = new_val;
        while (i != 0 && harr[parent(i)] > harr[i]) {
            int temp = harr[i];
            harr[i] = harr[parent(i)];
            harr[parent(i)] = temp;
            i = parent(i);
        }
    }

    /* You may call below MinHeapify function in
      above codes. Please do not delete this code
      if you are not writing your own MinHeapify */
    void MinHeapify(int i) {
        int l = left(i);
        int r = right(i);
        int smallest = i;
        if (l < heap_size && harr[l] < harr[i]) smallest = l;
        if (r < heap_size && harr[r] < harr[smallest]) smallest = r;
        if (smallest != i) {
            int temp = harr[i];
            harr[i] = harr[smallest];
            harr[smallest] = temp;
            MinHeapify(smallest);
        }
    }
}

or

// Java program for the above approach 
import java.util.*; 

// A class for Min Heap 
class MinHeap { 
	
	// To store array of elements in heap 
	private int[] heapArray; 
	
	// max size of the heap 
	private int capacity; 
	
	// Current number of elements in the heap 
	private int current_heap_size; 

	// Constructor 
	public MinHeap(int n) { 
		capacity = n; 
		heapArray = new int[capacity]; 
		current_heap_size = 0; 
	} 
	
	// Swapping using reference 
	private void swap(int[] arr, int a, int b) { 
		int temp = arr[a]; 
		arr[a] = arr[b]; 
		arr[b] = temp; 
	} 
	
	
	// Get the Parent index for the given index 
	private int parent(int key) { 
		return (key - 1) / 2; 
	} 
	
	// Get the Left Child index for the given index 
	private int left(int key) { 
		return 2 * key + 1; 
	} 
	
	// Get the Right Child index for the given index 
	private int right(int key) { 
		return 2 * key + 2; 
	} 
	
	
	// Inserts a new key 
	public boolean insertKey(int key) { 
		if (current_heap_size == capacity) { 
			
			// heap is full 
			return false; 
		} 
	
		// First insert the new key at the end 
		int i = current_heap_size; 
		heapArray[i] = key; 
		current_heap_size++; 
		
		// Fix the min heap property if it is violated 
		while (i != 0 && heapArray[i] < heapArray[parent(i)]) { 
			swap(heapArray, i, parent(i)); 
			i = parent(i); 
		} 
		return true; 
	} 
	
	// Decreases value of given key to new_val. 
	// It is assumed that new_val is smaller 
	// than heapArray[key]. 
	public void decreaseKey(int key, int new_val) { 
		heapArray[key] = new_val; 

		while (key != 0 && heapArray[key] < heapArray[parent(key)]) { 
			swap(heapArray, key, parent(key)); 
			key = parent(key); 
		} 
	} 
	
	// Returns the minimum key (key at 
	// root) from min heap 
	public int getMin() { 
		return heapArray[0]; 
	} 
	
	
	// Method to remove minimum element 
	// (or root) from min heap 
	public int extractMin() { 
		if (current_heap_size <= 0) { 
			return Integer.MAX_VALUE; 
		} 

		if (current_heap_size == 1) { 
			current_heap_size--; 
			return heapArray[0]; 
		} 
		
		// Store the minimum value, 
		// and remove it from heap 
		int root = heapArray[0]; 

		heapArray[0] = heapArray[current_heap_size - 1]; 
		current_heap_size--; 
		MinHeapify(0); 

		return root; 
	} 
		
	// This function deletes key at the 
	// given index. It first reduced value 
	// to minus infinite, then calls extractMin() 
	public void deleteKey(int key) { 
		decreaseKey(key, Integer.MIN_VALUE); 
		extractMin(); 
	} 
	
	// A recursive method to heapify a subtree 
	// with the root at given index 
	// This method assumes that the subtrees 
	// are already heapified 
	private void MinHeapify(int key) { 
		int l = left(key); 
		int r = right(key); 

		int smallest = key; 
		if (l < current_heap_size && heapArray[l] < heapArray[smallest]) { 
			smallest = l; 
		} 
		if (r < current_heap_size && heapArray[r] < heapArray[smallest]) { 
			smallest = r; 
		} 

		if (smallest != key) { 
			swap(heapArray, key, smallest); 
			MinHeapify(smallest); 
		} 
	} 
	
	// Increases value of given key to new_val. 
	// It is assumed that new_val is greater 
	// than heapArray[key]. 
	// Heapify from the given key 
	public void increaseKey(int key, int new_val) { 
		heapArray[key] = new_val; 
		MinHeapify(key); 
	} 
	
	// Changes value on a key 
	public void changeValueOnAKey(int key, int new_val) { 
		if (heapArray[key] == new_val) { 
			return; 
		} 
		if (heapArray[key] < new_val) { 
			increaseKey(key, new_val); 
		} else { 
			decreaseKey(key, new_val); 
		} 
	} 
} 

// Driver Code 
class MinHeapTest { 
	public static void main(String[] args) { 
		MinHeap h = new MinHeap(11); 
		h.insertKey(3); 
		h.insertKey(2); 
		h.deleteKey(1); 
		h.insertKey(15); 
		h.insertKey(5); 
		h.insertKey(4); 
		h.insertKey(45); 
		System.out.print(h.extractMin() + " "); 
		System.out.print(h.getMin() + " "); 
		
		h.decreaseKey(2, 1); 
		System.out.print(h.getMin()); 
	} 
} 
