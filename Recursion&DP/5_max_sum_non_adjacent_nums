# Given an array of ‘N’  positive integers, we need to return the maximum sum of the subsequence such that 
# no two elements of the subsequence are adjacent elements in the array.

# Note: A subsequence of an array is a list with elements of the array where some elements are deleted 
# ( or not deleted at all) and the elements should be in the same order in the subsequence as in the array.

# Recursion

class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        def f(n,nums):
            if n==0:
                return nums[0]
            if n==1:
                return max(nums[1],nums[0])
            
            l= f(n-1,nums)+0
            r= f(n-2,nums)+nums[n]
            return max(l,r)

        return f(len(nums)-1,nums)

# DP I

class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        def f(n,nums,dp):
            if n==0:
                dp[0]=nums[0]
                return dp[0]
            if n==1:
                dp[1]=max(nums[1],nums[0])
                return dp[1]
            
            if dp[n]!= -1:
                return dp[n]

            l= f(n-1,nums,dp)+0         # not pick current element
            r= f(n-2,nums,dp)+nums[n]   # pick current element
            dp[n]=max(l,r)

            return dp[n]

        dp = [-1 for i in range(len(nums))]

        return f(len(nums)-1,nums,dp)


  # DP II

  class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        dp = [-1 for i in range(len(nums))]
        n=len(nums)
        if n>=1:
            dp[0]=nums[0]
        if n>=2:
            dp[1]=max(nums[0],nums[1])
        for i in range(2,len(nums)):
            l= dp[i-1]+0       # not pick i
            r= dp[i-2]+nums[i] # pick i
            dp[i]=max(l,r)
        
        return dp[n-1]

# DP III

class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        # dp = [-1 for i in range(len(nums))]
        n=len(nums)
        if n>=1:
            l=nums[0]
            final=l
        if n>=2:
            r=max(nums[0],nums[1])
            final=r
        for i in range(2,len(nums)):
            temp= r+0       # not pick i
            r= l+nums[i] # pick i
            final=max(temp,r)
            l=temp
            r=final
        
        return final

        



