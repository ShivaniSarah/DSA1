https://leetcode.com/problems/coin-change/

You are given an integer array coins representing coins of different denominations and
an integer amount representing a total amount of money.
Return the fewest number of coins that you need to make up that amount. 
If that amount of money cannot be made up by any combination of the coins, return -1.
You may assume that you have an infinite number of each kind of coin.

Example 1:
Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

Example 2:
Input: coins = [2], amount = 3
Output: -1

Example 3:
Input: coins = [1], amount = 0
Output: 0

# java

# DP II:

class Solution {

    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n][amount + 1];
        final int INF = (int)1e9; // Use a large value to represent "infinity"

        // Initialize the first row of the DP table
        for (int i = 0; i <= amount; i++) {
            if (i % coins[0] == 0) {
                dp[0][i] = i / coins[0];
            } else {
                dp[0][i] = INF;
            }
        }

        // Fill the rest of the DP table
        for (int ind = 1; ind < n; ind++) {
            for (int target = 0; target <= amount; target++) {
                int notTake = dp[ind - 1][target];  // Case where we do not take the current coin
                int take = INF;  // Initialize with "infinity"
                if (coins[ind] <= target) {
                    take = 1 + dp[ind][target - coins[ind]];  // Case where we take the current coin
                }
                dp[ind][target] = Math.min(notTake, take);
            }
        }

        int ans = dp[n - 1][amount];
        // If the result is still equal to "infinity", it means it's not possible to achieve the target sum.
        if (ans >= INF) {
            return -1;
        }
        return ans;
    }

}

# DP I:

class Solution {

    private static final int INF = (int)1e9;

    // Helper function to compute minimum elements
    private int minimumElementsUtil(int[] arr, int ind, int T, int[][] dp) {
        if (ind == 0) {
            if (T % arr[0] == 0) {
                return T / arr[0];
            } else {
                return INF;
            }
        }

        if (dp[ind][T] != -1) {
            return dp[ind][T];
        }

        // Calculate not taken case
        int notTaken = minimumElementsUtil(arr, ind - 1, T, dp);

        // Calculate taken case
        int taken = INF;
        if (arr[ind] <= T) {
            taken = 1 + minimumElementsUtil(arr, ind, T - arr[ind], dp);
        }

        dp[ind][T] = Math.min(notTaken, taken);
        return dp[ind][T];
    }

    // Main function to compute minimum elements
    private int minimumElements(int[] arr, int T) {
        int n = arr.length;
        int[][] dp = new int[n][T + 1];
        for (int[] row : dp) {
            java.util.Arrays.fill(row, -1);
        }
        int ans = minimumElementsUtil(arr, n - 1, T, dp);
        return ans >= INF ? -1 : ans;
    }

    // Public function to be called
    public int coinChange(int[] coins, int amount) {
        return minimumElements(coins, amount);
    }
}


# python

# DP II :

class Solution(object):
    def coinChange(self, coins, amount):
        arr=coins
        T=amount
        n = len(arr)
        dp = [[0 for _ in range(T + 1)] for _ in range(n)]

        for i in range(T + 1):
            if i % arr[0] == 0:
                dp[0][i] = i // arr[0]
            else:
                dp[0][i] = int(1e9)

        for ind in range(1, n):
            for target in range(T + 1):
                notTake = dp[ind - 1][target]  
                take = int(1e9)  # a very large value
                if arr[ind] <= target:
                    take = 1 + dp[ind][target - arr[ind]]
                dp[ind][target] = min(notTake, take)

        ans = dp[n - 1][T]
        # If the result is still equal to a very large value, it means it's not possible to achieve the target sum.
        if ans >= int(1e9):
            return -1
        return ans

# DP I:

class Solution(object):
    def coinChange(self, coins, amount):

        def minimumElementsUtil(arr, ind, T, dp):
            
            if ind == 0:
                if T % arr[0] == 0:
                    return T // arr[0]
                else:
                    return int(1e9)

            if dp[ind][T] != -1:
                return dp[ind][T]

            notTaken = 0 + minimumElementsUtil(arr, ind - 1, T, dp)
            taken = int(1e9)

            if arr[ind] <= T:
                taken = 1 + minimumElementsUtil(arr, ind, T - arr[ind], dp)

            dp[ind][T] = min(notTaken, taken)
            return dp[ind][T]

        def minimumElements(arr, T):
            n = len(arr)
            dp = [[-1 for j in range(T + 1)] for i in range(n)]
            ans = minimumElementsUtil(arr, n - 1, T, dp)
            if ans >= int(1e9):
                return -1
            return ans
        
        return minimumElements(coins, amount)
