https://leetcode.com/problems/merge-bsts-to-create-single-bst/description/

You are given n BST (binary search tree) root nodes for n separate BSTs stored in an array trees (0-indexed). Each BST in trees has at most 3 nodes, and no two roots have the same value. In one operation, you can:

Select two distinct indices i and j such that the value stored at one of the leaves of trees[i] is equal to the root value of trees[j].
Replace the leaf node in trees[i] with trees[j].
Remove trees[j] from trees.
Return the root of the resulting BST if it is possible to form a valid BST after performing n - 1 operations, or null if it is impossible to create a valid BST.

A BST (binary search tree) is a binary tree where each node satisfies the following property:

Every node in the node's left subtree has a value strictly less than the node's value.
Every node in the node's right subtree has a value strictly greater than the node's value.
A leaf is a node that has no children.

Example 1:

Input: trees = [[2,1],[3,2,5],[5,4]]
Output: [3,2,5,1,null,4]
Explanation:
In the first operation, pick i=1 and j=0, and merge trees[0] into trees[1].
Delete trees[0], so trees = [[3,2,5,1],[5,4]].

In the second operation, pick i=0 and j=1, and merge trees[1] into trees[0].
Delete trees[1], so trees = [[3,2,5,1,null,4]].

# java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode canMerge(List<TreeNode> trees) {
        
        HashMap <Integer,TreeNode> map = new HashMap <Integer,TreeNode>();

        for(int i = 0; i < trees.size(); i++)
        {
            if(map.containsKey(trees.get(i).val))
            {
                return null;
            }

            map.put(trees.get(i).val, trees.get(i));
        }

        TreeNode root = trees.get(0);

        for(int i = 0; i < trees.size(); i++)
        {
            if(map.containsKey(trees.get(i).val) && dfs(trees.get(i), map))
            {
                root = trees.get(i);

                map.put(root.val, root);
            }
        }

        if(map.size() == 1 && root != null)
        {
            return check(root, Integer.MIN_VALUE, Integer.MAX_VALUE) == true ? root : null;
        }

        return null;
    }
    

    public boolean check(TreeNode root, int leftMin, int rightMin)
    {
        
        if(root == null)
        {
            return true;
        }

        if(root.val <= leftMin || root.val >= rightMin)
        {
            return false;
        }

        return check(root.left, leftMin, root.val) & check(root.right, root.val, rightMin);
    }

    public boolean dfs(TreeNode node, HashMap <Integer,TreeNode> map)
    {
        boolean flag = false;

        if(node.left != null)
        {
            if(map.containsKey(node.left.val))
            {
                node.left = map.get(node.left.val);
                map.remove(node.left.val);
                flag |= dfs(node.left, map);
                flag |= true;
            }
        }
        
        if(node.right != null)
        {
            if(map.containsKey(node.right.val))
            {
                node.right = map.get(node.right.val);
                map.remove(node.right.val);
                flag |= dfs(node.right, map);
                flag |= true;
            }
            
        }

        return flag;
    }
}

or


class Solution {
    public TreeNode canMerge(List<TreeNode> trees) {
        //Map root value to tree
        HashMap<Integer, TreeNode> map = new HashMap<>();
        for(TreeNode t : trees){
            map.put(t.val, t);
        }
        
        // Merge trees
        for(TreeNode t : trees){
            if(map.containsKey(t.val)){
                merger(t, map);
            }
        }

        
        //After merging we should have only one tree left else return null
        if(map.size() != 1) return null;
        else {
            //Return the one tree left after merging
            for(int c : map.keySet()) {
                //Check if final tree is valid else return null
                if(isValidBST(map.get(c))){
                    return map.get(c);
                } else return null;
            }
        }
        
      return null;
        
        
    }
    
    void merger(TreeNode t, HashMap<Integer, TreeNode> map){
        map.remove(t.val); // Remove current tree to prevent cyclical merging For. 2->3(Right) and 3->2(Left)
        //Merge on left
        if(t.left != null && map.containsKey(t.left.val) ){
            // Before merging child node, merge the grandchild nodes
            merger(map.get(t.left.val), map);
            t.left = map.get(t.left.val);
            map.remove(t.left.val);
        }
        
        // Merge on right
        if(t.right!=null &&  map.containsKey(t.right.val)  ){
            // Before merging child node, merge the grandchild nodes
            merger(map.get(t.right.val), map);
            t.right = map.get(t.right.val);
            map.remove(t.right.val);
        }
        // Add tree back to map once right and left merge is complete
        map.put(t.val, t);
    }
    
    // Validate BST
    public boolean isValidBST(TreeNode root) {
        return helper(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    
    public boolean helper(TreeNode root, long min, long max){
        if(root == null) return true;
        if(root.val <= min || root.val >= max) return false;
        return helper(root.left, min, root.val) && helper(root.right, root.val, max);
    }
}

or

class Solution {
    public TreeNode canMerge(List<TreeNode> trees) {
        Map<Integer, TreeNode> root = new HashMap<>(); // root candidates
        Map<Integer, TreeNode> map = new HashMap<>(); // all nodes
        for (TreeNode t : trees){
            root.put(t.val, t);
            map.put(t.val, t);
        }
        for (TreeNode t : trees){ // root candidates can't be a leave of some other nodes
            int L = t.left == null? 0 : t.left.val;
            int R = t.right== null? 0 : t.right.val;
            root.remove(L);
            root.remove(R);
        }
        if (root.size() != 1 || map.size() != trees.size()){ // we must have 1 node and no duplicate root values.
            return null;
        }
        int INF = (int)1e9;
        TreeNode r = root.values().iterator().next(); // this is our root
        return build(-INF, INF, r, map) && map.size() == 1? r : null; // try to build it, in the end, map should only have the root left.
    }
    
    private boolean build(int min, int max, TreeNode cur, Map<Integer, TreeNode> map){
        boolean ok = cur.val > min && cur.val < max; // must hold for BST
        if (cur.left != null){ // replace left node
            cur.left = map.getOrDefault(cur.left.val, cur.left);
            map.remove(cur.left.val);
            ok &= build(min, cur.val, cur.left, map);
        }
        if (cur.right != null){ // replace right node
            cur.right = map.getOrDefault(cur.right.val, cur.right);
            map.remove(cur.right.val);
            ok &= build(cur.val, max, cur.right, map);
        }
        return ok;
    }
}
