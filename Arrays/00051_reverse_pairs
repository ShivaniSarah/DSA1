https://leetcode.com/problems/reverse-pairs/description/

Given an integer array nums, return the number of reverse pairs in the array.
A reverse pair is a pair (i, j) where:
0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 
Example 1:
Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1

Example 2:
Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1

# java

import java.util.*;

public class Solution {
    private static void merge(int[] arr, int low, int mid, int high) {
        ArrayList<Integer> temp = new ArrayList<>(); // temporary array
        int left = low; // starting index of left half of arr
        int right = mid + 1; // starting index of right half of arr

        // Merging elements into the temporary array in a sorted manner
        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left]);
                left++;
            } else {
                temp.add(arr[right]);
                right++;
            }
        }

        // Copy remaining elements from the left half
        while (left <= mid) {
            temp.add(arr[left]);
            left++;
        }

        // Copy remaining elements from the right half
        while (right <= high) {
            temp.add(arr[right]);
            right++;
        }

        // Copy sorted elements from the temporary array back to the original array
        for (int i = low; i <= high; i++) {
            arr[i] = temp.get(i - low);
        }
    }

    // Count pairs (i, j) where arr[i] > 2 * arr[j] and i < j
    private static int countPairs(int[] arr, int low, int mid, int high) {
        int cnt = 0;
        int right = mid + 1;

        // Count valid pairs for elements in the left half of the array
        for (int i = low; i <= mid; i++) {
            while (right <= high && arr[i] > 2L * arr[right]) { // Use long to avoid overflow
                right++;
            }
            cnt += (right - (mid + 1));
        }

        return cnt;
    }

    private static int mergeSort(int[] arr, int low, int high) {
        int cnt = 0;
        if (low < high) {
            int mid = (low + high) / 2;
            cnt += mergeSort(arr, low, mid); // Left half
            cnt += mergeSort(arr, mid + 1, high); // Right half
            cnt += countPairs(arr, low, mid, high); // Count reverse pairs
            merge(arr, low, mid, high); // Merge sorted halves
        }
        return cnt;
    }

    public static int reversePairs(int[] nums) {
        return mergeSort(nums, 0, nums.length - 1);
    }
}

# python

# brute

class Solution:
    def reversePairs(self, nums: List[int]) -> int:
        a=nums
        n=len(a)
        cnt = 0
        for i in range(n):
            for j in range(i + 1, n):
                if a[i] > 2 * a[j]:
                    cnt += 1
        return cnt

# optimal

class Solution:
    def reversePairs(self, nums: List[int]) -> int:
        def merge(arr, low, mid, high):
            temp = []  # temporary array
            left = low  # starting index of left half of arr
            right = mid + 1  # starting index of right half of arr

            # storing elements in the temporary array in a sorted manner
            while left <= mid and right <= high:
                if arr[left] <= arr[right]:
                    temp.append(arr[left])
                    left += 1
                else:
                    temp.append(arr[right])
                    right += 1

            # if elements on the left half are still left
            while left <= mid:
                temp.append(arr[left])
                left += 1

            # if elements on the right half are still left
            while right <= high:
                temp.append(arr[right])
                right += 1

            # transferring all elements from temporary to arr
            for i in range(low, high + 1):
                arr[i] = temp[i - low]

        def countPairs(arr, low, mid, high):
            right = mid + 1
            cnt = 0
            for i in range(low, mid + 1):
                while right <= high and arr[i] > 2 * arr[right]:
                    right += 1
                cnt += (right - (mid + 1))
            return cnt

        def mergeSort(arr, low, high):
            cnt = 0
            if low >= high:
                return cnt
            mid = (low + high) // 2
            cnt += mergeSort(arr, low, mid)  # left half
            cnt += mergeSort(arr, mid + 1, high)  # right half
            cnt += countPairs(arr, low, mid, high)  # Modification
            merge(arr, low, mid, high)  # merging sorted halves
            return cnt

        return mergeSort(nums, 0, len(nums) - 1)

