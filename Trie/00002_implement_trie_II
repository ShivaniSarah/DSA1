https://www.naukri.com/code360/problems/implement-trie_1387095

Problem Statement: Implement a Trie data structure that supports the following methods:

Insert (word): To insert a string `word` in the Trie.
Count Words Equal To (word): Return the count of occurrences of the string word in the Trie.
Count Words Starting With (prefix): Return the count of words in the Trie that have the string “prefix” as a prefix.
Erase (word): Delete one occurrence of the string word from the Trie.
Note:

The Erase(word) function is guaranteed to be called only when a word is present in the Trie.
Release the memory associated with variables using dynamic memory allocation at the end of your solution.
Examples
Example 1:
Input:
Insert: ‘apple’, ‘apps’, ‘apxl’
Count Number of Words Equal to: ‘apple’
Count Number of Words Starting with: ‘app’, ‘ap’
Erase word: ‘apxl’
Output: 
Inserted ‘apple’, Inserted ‘apps’,Inserted, ‘apxl’.
Number of Words Equal to ‘apple’: 1
Number of Words Starting with ‘app’: 2 and ‘ap’: 3
Erased ‘apxl’
Explanation: Insert Operations: “apple”, “apps” and “apxl” are inserted.


import java.util.* ;
import java.io.*; 
public class Trie {
    private Node root;   
    static class Node {
        // Array to store
        // links to child nodes
        Node[] links;
        // Counter for number of
        // words that end at this node
        int cntEndWith;
        // Counter for number of words
        // that have this node as a prefix
        int cntPrefix;

        // Constructor for Node
        Node() {
            links = new Node[26];
            cntEndWith = 0;
            cntPrefix = 0;
        }

        // Function to check if the
        // node contains a specific key
        boolean containsKey(char ch) {
            // Check if the link corresponding
            // to the character exists
            return links[ch - 'a'] != null;
        }

        // Function to get the child
        // node corresponding to a key
        Node get(char ch) {
            // Return the link
            // corresponding to the character
            return links[ch - 'a'];
        }

        // Function to insert a child
        // node with a specific key
        void put(char ch, Node node) {
            // Set the link corresponding to
            // the character to the provided node
            links[ch - 'a'] = node;
        }

        // Function to increment the
        // count of words that end at this node
        void increaseEnd() {
            // Increment the counter
            cntEndWith++;
        }

        // Function to increment the count of
        // words that have this node as a prefix
        void increasePrefix() {
            // Increment the counter
            cntPrefix++;
        }

        // Function to decrement the count
        // of words that end at this node
        void deleteEnd() {
            // Decrement the counter
            cntEndWith--;
        }

        // Function to decrement the count of
        // words that have this node as a prefix
        void reducePrefix() {
            // Decrement the counter
            cntPrefix--;
        }
    }

    public Trie() {
        root = new Node();
    }

    public void insert(String word) {
        // Start from the root node
        Node node = root;
        // Iterate over each
        // character in the word
        for (int i = 0; i < word.length(); i++) {
            // If the character is
            // not already in the trie
            if (!node.containsKey(word.charAt(i))) {
                // Create a new node
                // for the character
                node.put(word.charAt(i), new Node());
            }
            // Move to the child node
            // corresponding to the character
            node = node.get(word.charAt(i));
            // Increment the prefix
            // count for the node
            node.increasePrefix();
        }
        // Increment the end count
        // for the last node of the word
        node.increaseEnd();
    }

    public int countWordsEqualTo(String word) {
        // Start from the root node
        Node node = root;
        // Iterate over each character in the word
        for (int i = 0; i < word.length(); i++) {
            // If the character is found in the trie
            if (node.containsKey(word.charAt(i))) {
                // Move to the child node
                // corresponding to the character
                node = node.get(word.charAt(i));
            } else {
                // Return 0 if the
                // character is not found
                return 0;
            }
        }
        // Return the count of
        // words ending at the node
        return node.cntEndWith;
    }

    public int countWordsStartingWith(String word) {
        // Start from the root node
        Node node = root;
        // Iterate over each character in the prefix
        for (int i = 0; i < word.length(); i++) {
            // If the character is found in the trie
            if (node.containsKey(word.charAt(i))) {
                // Move to the child node
                // corresponding to the character
                node = node.get(word.charAt(i));
            } else {
                // Return 0 if the
                // character is not found
                return 0;
            }
        }
        // Return the count of
        // words with the prefix
        return node.cntPrefix;
    }

    public void erase(String word) {
        // Start from the root node
        Node node = root;
        // Iterate over each
        // character in the word
        for (int i = 0; i < word.length(); i++) {
            // If the character is
            // found in the trie
            if (node.containsKey(word.charAt(i))) {
                // Move to the child node
                // corresponding to the character
                node = node.get(word.charAt(i));
                // Decrement the prefix
                // count for the node
                node.reducePrefix();
            } else {
                // Return if the
                // character is not found
                return;
            }
        }
        // Decrement the end count
        // for the last node of the word
        node.deleteEnd();
    }

}
