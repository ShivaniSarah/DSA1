https://leetcode.com/problems/number-of-substrings-containing-all-three-characters/

Given a string s consisting only of characters a, b and c.
Return the number of substrings containing at least one occurrence of all these characters a, b and c.

Example 1:
Input: s = "abcabc"
Output: 10
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "abc", "abca", "abcab", "abcabc", "bca", "bcab", "bcabc", "cab", "cabc" and "abc" (again). 

Example 2:
Input: s = "aaacb"
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "aaacb", "aacb" and "acb". 

Example 3:
Input: s = "abc"
Output: 1

# App I

class Solution {
    public int numberOfSubstrings(String s) {
        int[] count = new int[3];
        int total = 0, left = 0;

        for (int right = 0; right < s.length(); right++) {
            count[s.charAt(right) - 'a']++;
            while (count[0] > 0 && count[1] > 0 && count[2] > 0) {
                count[s.charAt(left) - 'a']--;
                left++;
            }
            total += left;
        }

        return total;
    }
}

# App II:

class Solution {
    public int numberOfSubstrings(String s) {
        Map<Character, Integer> countMap = new HashMap<>();
        int left = 0, result = 0;

        for (int right = 0; right < s.length(); right++) {
            countMap.put(s.charAt(right), countMap.getOrDefault(s.charAt(right), 0) + 1);
            
            while (countMap.size() == 3) {
                result += s.length() - right;
                countMap.put(s.charAt(left), countMap.get(s.charAt(left)) - 1);
                if (countMap.get(s.charAt(left)) == 0) countMap.remove(s.charAt(left));
                left++;
            }
        }
        return result;
    }
}
