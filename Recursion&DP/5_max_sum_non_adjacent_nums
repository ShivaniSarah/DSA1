# Given an array of ‘N’  positive integers, we need to return the maximum sum of the subsequence such that 
# no two elements of the subsequence are adjacent elements in the array.
# link: https://leetcode.com/problems/house-robber/

# Note: A subsequence of an array is a list with elements of the array where some elements are deleted 
# ( or not deleted at all) and the elements should be in the same order in the subsequence as in the array.

# java

recursion

import java.util.HashMap;
import java.util.Map;

public class Solution {

    private Map<Integer, Integer> memo = new HashMap<>();

    public int rob(int[] nums) {
        return f(nums.length - 1, nums);
    }

    private int f(int n, int[] nums) {
        if (n == 0) {
            return nums[0];
        }
        if (n == 1) {
            return Math.max(nums[0], nums[1]);
        }
        if (memo.containsKey(n)) {
            return memo.get(n);
        }

        int l = f(n - 1, nums); // not pick current house
        int r = f(n - 2, nums) + nums[n]; // pick current house
        int result = Math.max(l, r);
        memo.put(n, result);

        return result;
    }
}

# Dp I:

class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;
        if (n == 1) return nums[0];

        int[] dp = new int[n];

        // Base cases
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);

        for (int i = 2; i < n; i++) {
            // Choose the maximum between not robbing the current house or robbing it
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);
        }

        return dp[n - 1];
    }
}

# Dp II:

class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;
        if (n == 1) return nums[0];

        int[] dp = new int[n];
        
        // Base cases
        dp[0] = nums[0];
        if (n > 1) {
            dp[1] = Math.max(nums[0], nums[1]);
        }

        for (int i = 2; i < n; i++) {
            // Not pick the current house or pick it
            int notPick = dp[i - 1];
            int pick = dp[i - 2] + nums[i];
            dp[i] = Math.max(notPick, pick);
        }

        return dp[n - 1];
    }

}

# DP III:

class Solution {
    public int rob(int[] nums) {
        int n = nums.length;

        if (n == 0) return 0;
        if (n == 1) return nums[0];

        int l = nums[0];
        int r = Math.max(nums[0], nums[1]);
        int finalAmount = r;

        for (int i = 2; i < n; i++) {
            int temp = r;             // Previous maximum amount (not picking current house)
            r = Math.max(r, l + nums[i]); // Maximum amount when considering current house
            l = temp; // Update l to the previous maximum amount
        }

        return r;
    }
}



# python

# Recursion

class Solution(object):
    def rob(self, nums):

        def f(n,nums):
            if n==0:
                return nums[0]
            if n==1:
                return max(nums[1],nums[0])
            
            l= f(n-1,nums)+0
            r= f(n-2,nums)+nums[n]
            return max(l,r)

        return f(len(nums)-1,nums)

# DP I

class Solution(object):
    def rob(self, nums):

        def f(n,nums,dp):
            if n==0:
                dp[0]=nums[0]
                return dp[0]
            if n==1:
                dp[1]=max(nums[1],nums[0])
                return dp[1]
            
            if dp[n]!= -1:
                return dp[n]

            l= f(n-1,nums,dp)+0         # not pick current element
            r= f(n-2,nums,dp)+nums[n]   # pick current element
            dp[n]=max(l,r)

            return dp[n]

        dp = [-1 for i in range(len(nums))]

        return f(len(nums)-1,nums,dp)


  # DP II

  class Solution(object):
    def rob(self, nums):

        dp = [-1 for i in range(len(nums))]
        n=len(nums)
        if n>=1:
            dp[0]=nums[0]
        if n>=2:
            dp[1]=max(nums[0],nums[1])
        for i in range(2,len(nums)):
            l= dp[i-1]+0       # not pick i
            r= dp[i-2]+nums[i] # pick i
            dp[i]=max(l,r)
        
        return dp[n-1]

# DP III

class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        # dp = [-1 for i in range(len(nums))]
        n=len(nums)
        if n>=1:
            l=nums[0]
            final=l
        if n>=2:
            r=max(nums[0],nums[1])
            final=r
        for i in range(2,len(nums)):
            temp= r+0       # not pick i
            r= l+nums[i] # pick i
            final=max(temp,r)
            l=temp
            r=final
        
        return final

        



