Link: https://leetcode.com/problems/remove-outermost-parentheses/description/

A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings,
and + represents string concatenation.
For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.
A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B,
with A and B nonempty valid parentheses strings.
Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk,
where Pi are primitive valid parentheses strings.
Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.

Input: s = "(()())(())"
Output: "()()()"
Explanation:  The input string is "(()())(())", with primitive decomposition "(()())" + "(())".
After removing outer parentheses of each part, this is "()()" + "()" = "()()()".


# Python

Approach I: using stack

class Solution:
    def removeOuterParentheses(self, s: str) -> str:
        i=0
        st=[]
        ans=''
        for j in range(len(s)):
            if s[j]=='(':  
                if st==[]:
                    i=j
                st.append(s[j])
            elif s[j]==')':
                st.pop()
                if j==len(s)-1:
                    ans+= s[i+1:j]
                    return ans
                
            if st==[]:
                ans+= s[i+1:j]

        return ""

Approach II: using a variable

class Solution:
    def removeOuterParentheses(self, s: str) -> str:
        i=0
        c=0
        ans=''
        for j in range(len(s)):
            if s[j]=='(':  
                if c==0:
                    i=j
                c+=1
            elif s[j]==')':
                c-=1
                if j==len(s)-1:
                    ans+= s[i+1:j]
                    return ans
                
            if c==0:
                ans+= s[i+1:j]

        return ""



# Java

class Solution {
    public String removeOuterParentheses(String s) {

        int i = 0;
        Stack<Character> st = new Stack<>();
        StringBuilder ans = new StringBuilder();
        
        for (int j = 0; j < s.length(); j++) {
            if (s.charAt(j) == '(') {
                if (st.isEmpty()) {
                    i = j;
                }
                st.push(s.charAt(j));
            } else if (s.charAt(j) == ')') {
                st.pop();
                if (j == s.length() - 1) {
                    ans.append(s.substring(i + 1, j));
                    return ans.toString();
                }
            }

            if (st.isEmpty()) {
                ans.append(s.substring(i + 1, j));
            }
        }

        return "";
 
    }
}

class Solution {
    public String removeOuterParentheses(String s) {
        int i = 0;
        int c = 0;
        StringBuilder ans = new StringBuilder();
        
        for (int j = 0; j < s.length(); j++) {
            if (s.charAt(j) == '(') {
                if (c == 0) {
                    i = j;
                }
                c += 1;
            } else if (s.charAt(j) == ')') {
                c -= 1;
                if (j == s.length() - 1) {
                    ans.append(s.substring(i + 1, j));
                    return ans.toString();
                }
            }

            if (c == 0) {
                ans.append(s.substring(i + 1, j));
            }
        }

        return "";
    }
}


# C++

class Solution {
public:
    string removeOuterParentheses(string s) {
        int i = 0;
        stack<char> st;
        string ans = "";
        
        for (int j = 0; j < s.length(); ++j) {
            if (s[j] == '(') {
                if (st.empty()) {
                    i = j;
                }
                st.push(s[j]);
            } else if (s[j] == ')') {
                st.pop();
                if (j == s.length() - 1) {
                    ans += s.substr(i + 1, j - i - 1);
                    return ans;
                }
            }

            if (st.empty()) {
                ans += s.substr(i + 1, j - i - 1);
            }
        }

        return "";
    }
};

class Solution {
public:
    string removeOuterParentheses(string s) {
        int i = 0;
        int c = 0;
        string ans = "";
        for (int j = 0; j < s.length(); ++j) {
            if (s[j] == '(') {
                if (c == 0) {
                    i = j;
                }
                c += 1;
            } else if (s[j] == ')') {
                c -= 1;
                if (j == s.length() - 1) {
                    ans += s.substr(i + 1, j - i - 1);
                    return ans;
                }
            }

            if (c == 0) {
                ans += s.substr(i + 1, j - i - 1);
            }
        }

        return "";
    }
};

