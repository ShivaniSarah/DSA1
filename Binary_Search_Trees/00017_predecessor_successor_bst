https://www.geeksforgeeks.org/problems/predecessor-and-successor/1

There is BST given with the root node with the key part as an integer only.
You need to find the in-order successor and predecessor of a given key. 
If either predecessor or successor is not found, then set it to NULL.

Note:- In an inorder traversal the number just smaller than the target is the predecessor and the number 
just greater than the target is the successor. 

Example 1:

Input:
      8
    /   \
   1     9
    \     \
     4    10
    /
   3
key = 8 
Output: 4 9
Explanation: 
In the given BST the inorder predecessor of 8 is 4 and inorder successor of 8 is 9.
Example 2:

Input:
        10
      /   \
     2    11
   /  \ 
  1    5
      /  \
     3    6
      \
       4
key = 11
Output: 10 -1
Explanation:In given BST, the inorder predecessor of 11 is 10 whereas it does not have any inorder successor.

# java

class Solution {
    public static void findPreSuc(Node root, Node[] pre, Node[] suc, int key) {
        // code here.
        // update pre[0] with the predecessor of the key
        // update suc[0] with the successor of the key
        Node x=root;
       sucessor(root,suc,key);
       predecesor(root,pre,key);
    }
    public static void predecesor(Node root,Node[] pre,int key){
        while(root!=null){
            if(root.data>=key){
                root=root.left;
            }
            else{
                pre[0]=root;
                root=root.right;
            }
        }
    }
    public static void sucessor(Node root,Node[] suc,int key){
        while(root!=null){
            if(root.data<=key){
                root=root.right;
            }
            else{
                suc[0]=root;
                root=root.left;
            }
        }
    }
}



