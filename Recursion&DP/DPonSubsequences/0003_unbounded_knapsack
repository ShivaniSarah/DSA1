https://www.geeksforgeeks.org/problems/knapsack-with-duplicate-items4201/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=knapsack-with-duplicate-items

Given a set of N items, each with a weight and a value, represented by the array w and val respectively.
Also, a knapsack with weight limit W.
The task is to fill the knapsack in such a way that we can get the maximum profit. 
Return the maximum profit.
Note: Each item can be taken any number of times.

Example 1:
Input: 
N = 2
W = 3
val = {1, 1}
wt = {2, 1}
Output: 
3
Explanation: 
1.Pick the 2nd element thrice.
2.Total profit = 1 + 1 + 1 = 3. Also the total weight = 1 + 1 + 1  = 3 which is <= 3.

Example 2:
Input: 
N = 4
W = 8
val[] = {6, 1, 7, 7}
wt[] = {1, 3, 4, 5}
Output: 
48
Explanation: 
The optimal choice is to pick the 1st element 8 times.

Expected Time Complexity: O(N*W)
Expected Auxiliary Space: O(W)

# java

class Solution {
    public int knapSack(int n, int W, int[] val, int[] wt) {
        // Create dp table initialized to 0
        int[][] dp = new int[n][W + 1];
        
        // Initialize first row of dp table
        for (int i = wt[0]; i <= W; i++) {
            dp[0][i] = (i / wt[0]) * val[0];
        }

        // Fill the dp table for the rest of the items
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= W; j++) {
                // Not taking the current item
                int notTaken = dp[i - 1][j];
                
                // Taking the current item
                int taken = Integer.MIN_VALUE;
                if (wt[i] <= j) {
                    taken = val[i] + dp[i][j - wt[i]];
                }
                
                // Update the dp table with the maximum value
                dp[i][j] = Math.max(notTaken, taken);
            }
        }
        
        return dp[n - 1][W];
    }
}

or

class Solution {
    
    public int knapSack(int N, int W, int[] val, int[] wt) {
        int[][] dp = new int[N][W + 1];
        for (int[] row : dp) {
            java.util.Arrays.fill(row, -1);
        }
        return f(wt, val, N - 1, W, dp);
    }

    private int f(int[] wt, int[] val, int ind, int W, int[][] dp) {
        if (ind == 0) {
            return (W / wt[0]) * val[0];
        }

        if (dp[ind][W] != -1) {
            return dp[ind][W];
        }

        int notTaken = f(wt, val, ind - 1, W, dp);
        int taken = Integer.MIN_VALUE;

        if (wt[ind] <= W) {
            taken = val[ind] + f(wt, val, ind, W - wt[ind], dp);
        }

        dp[ind][W] = Math.max(notTaken, taken);
        return dp[ind][W];
    }

}


# python

DP II:

import sys
class Solution:
    def knapSack(self, n, W, val, wt):
        
        dp = [[0 for j in range(W + 1)] for i in range(n)]
            
        for i in range(wt[0], W + 1):
            dp[0][i] = ((i // wt[0]) * val[0])
          
        for i in range(1, n):
            for j in range(W + 1):
                
                notTaken = 0 + dp[i - 1][j]
                taken = -sys.maxsize

                if wt[i] <= j:
                    taken = val[i] + dp[i][j - wt[i]]
    
                dp[i][j] = max(notTaken, taken)
    
        return dp[n - 1][W]

DP I:

import sys
class Solution:
    def knapSack(self, N, W, val, wt):
        def f(wt, val,ind, W, dp):        
            if ind == 0:
                return (W // wt[0]) * val[0]
        
            if dp[ind][W] != -1:
                return dp[ind][W]
        
            notTaken = f(wt, val, ind - 1, W, dp)
        
            taken = -sys.maxsize
            if wt[ind] <= W:
                taken = val[ind] + f(wt, val, ind, W - wt[ind], dp)
        
            dp[ind][W] = max(notTaken, taken)
            return dp[ind][W]
        
        dp = [[-1 for _ in range(W + 1)] for _ in range(N)]
        return f(wt, val, N - 1, W, dp)

