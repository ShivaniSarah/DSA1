https://www.geeksforgeeks.org/problems/root-to-leaf-paths/1

Given a Binary Tree of nodes, you need to find all the possible paths from the root node to all the leaf nodes of the binary tree.

Example 1:

Input:
       1
    /     \
   2       3
Output: 
1 2 
1 3 
Explanation: 
All possible paths:
1->2
1->3

# java

class Solution {
    public static void findPaths(Node root, ArrayList<ArrayList<Integer>> result, ArrayList<Integer> temp) {
        if (root == null) {
            return;
        }
        
        if (root.left == null && root.right == null) {
            temp.add(root.data);
            result.add(new ArrayList<>(temp));
            temp.remove(temp.size() - 1);
            return;
        }
        
        temp.add(root.data);
        
        findPaths(root.left, result, temp);
        findPaths(root.right, result, temp);
    
        temp.remove(temp.size() - 1);
    }
    
    public static ArrayList<ArrayList<Integer>> Paths(Node root) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        
        ArrayList<Integer> temp = new ArrayList<>();
        
        findPaths(root, result, temp);
        
        return result;
    }
}

or


https://leetcode.com/problems/binary-tree-paths/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    public List<String> binaryTreePaths(final TreeNode root) {
        final List<String> result = new ArrayList<>();

        helper(result, new StringBuilder(), root);

        return result;
    }

    private void helper(final List<String> result, final StringBuilder sb, final TreeNode root) {
        final int tmp = sb.length();

        if(root.left == null && root.right == null) {
            sb.append(root.val);
            result.add(sb.toString());
        } else {
            sb.append(root.val);
            sb.append("->");

            if(root.right != null)
                helper(result, sb, root.right);

            if(root.left != null)
                helper(result, sb, root.left);
        }

        sb.setLength(sb.length() - (sb.length() - tmp));
    }
}
