https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/description/

Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.

Example 1:
Input: nums = [3,10,5,25,2,8]
Output: 28
Explanation: The maximum result is 5 XOR 25 = 28.

Example 2:
Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]
Output: 127

# java

class Solution {
    class TrieNode {
        TrieNode[] children = new TrieNode[2];
    }

    public int findMaximumXOR(int[] nums) {
        TrieNode root = new TrieNode();

        // Insert all numbers into the Trie
        for (int num : nums) {
            TrieNode node = root;
            for (int i = 31; i >= 0; i--) {
                int bit = (num >> i) & 1;
                if (node.children[bit] == null) {
                    node.children[bit] = new TrieNode();
                }
                node = node.children[bit];
            }
        }

        int maxXOR = 0;

        // Find the maximum XOR for each number
        for (int num : nums) {
            TrieNode node = root;
            int currentXOR = 0;
            for (int i = 31; i >= 0; i--) {
                int bit = (num >> i) & 1;
                // We want to go the opposite bit if possible to maximize XOR
                int oppositeBit = bit == 0 ? 1 : 0;
                if (node.children[oppositeBit] != null) {
                    currentXOR = (currentXOR << 1) | 1;
                    node = node.children[oppositeBit];
                } else {
                    currentXOR = (currentXOR << 1);
                    node = node.children[bit];
                }
            }
            maxXOR = Math.max(maxXOR, currentXOR);
        }

        return maxXOR;
    }

}
