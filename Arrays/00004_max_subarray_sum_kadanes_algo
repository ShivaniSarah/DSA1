 # https://leetcode.com/problems/maximum-subarray/description/

# Maximum Sum of subarray

Given an integer array nums, find the subarray with the largest sum, and return its sum.

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

# java

class Solution {
    public int maxSubArray(int[] arr) {
    int n = arr.length;
       int maxi = Integer.MIN_VALUE; // maximum sum
        int sum = 0;

        for (int i = 0; i < n; i++) {

            sum += arr[i];

            if (sum > maxi) {
                maxi = sum;
            }

            if (sum < 0) {
                sum = 0;
            }
        }
        return maxi; 
    }
}

or

 public int maxSubArray(List<Integer> arr) {
        int n = arr.size();
        int maxi = Integer.MIN_VALUE; // maximum sum
        
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += arr.get(j);
                maxi = Math.max(maxi, sum); // getting the maximum
            }
        }
        
        return maxi;
    }

or

public class Solution {
    public int maxSubArray(List<Integer> arr) {
        int maxi = Integer.MIN_VALUE; // maximum sum
        int n = arr.size();
        
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int sum = 0;
                for (int k = i; k <= j; k++) {
                    sum += arr.get(k);
                }
                maxi = Math.max(maxi, sum);
            }
        }
        
        return maxi;
    }


# printing

import java.util.Arrays;

public class Solution {
    public static void maxSubarraySum(int[] arr, int n) {
        int maxi = Integer.MIN_VALUE; // maximum sum
        int sum = 0;

        int start = 0;
        int ansStart = -1, ansEnd = -1;

        for (int i = 0; i < n; i++) {
            if (sum == 0) {
                start = i; // starting index
            }

            sum += arr[i];

            if (sum > maxi) {
                maxi = sum;
                ansStart = start;
                ansEnd = i;
            }

            // If sum < 0: discard the sum calculated
            if (sum < 0) {
                sum = 0;
            }
        }

        // Printing the subarray
        System.out.print("The subarray is: [");
        for (int i = ansStart; i <= ansEnd; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println("]");
    }

    public static void main(String[] args) {
        int[] arr = {1, -3, 2, 1, -1};
        int n = arr.length;
        maxSubarraySum(arr, n);
    }
}

# python

# Brute Force

import sys
class Solution:
    def maxSubArray(self, arr: List[int]) -> int:
        maxi = -sys.maxsize   # maximum sum
        n= len(arr)
        for i in range(n):
            for j in range(i, n):
                summ = 0
                for k in range(i, j+1):
                    summ += arr[k]
                maxi = max(maxi, summ)
        return maxi

# Better Approach

import sys
class Solution:
    def maxSubArray(self, arr: List[int]) -> int:
        n= len(arr)
        maxi = -sys.maxsize # maximum sum
        for i in range(n):
            sum = 0
            for j in range(i, n):
                sum += arr[j]
                maxi = max(maxi, sum) # getting the maximum

        return maxi

# Optimal Approach -> Kadane's Algo

import sys
class Solution:
    def maxSubArray(self, arr: List[int]) -> int:
        n= len(arr)
        maxi = -sys.maxsize
        sum = 0
        for i in range(n):
            sum += arr[i]

            if sum > maxi:
                maxi = sum

            if sum < 0:
                sum = 0

        return maxi

# printing subaray with max sum

def maxSubarraySum(arr, n):
    maxi = -sys.maxsize - 1  # maximum sum
    sum = 0

    start = 0
    ansStart, ansEnd = -1, -1
    for i in range(n):

        if sum == 0:
            start = i  # starting index

        sum += arr[i]

        if sum > maxi:
            maxi = sum

            ansStart = start
            ansEnd = i

        # If sum < 0: discard the sum calculated
        if sum < 0:
            sum = 0

    # printing the subarray:
    print("The subarray is: [", end="")
    for i in range(ansStart, ansEnd + 1):
        print(arr[i], end=" ")
    print("]")
