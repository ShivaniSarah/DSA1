https://leetcode.com/problems/next-permutation/description/

arr=[3,1,2] 

to  get order of all permutations for 3 nos :
1,2,3 > 1,3,2 > 2,1,3 > 2,3,1 > 3,1,2 > 3,2,1
so next permutation of 3,1,2 is 3,2,1


A permutation of an array of integers is an arrangement of its members into a sequence or linear order.
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, 
if all the permutations of the array are sorted in one container according to their lexicographical order, 
then the next permutation of that array is the permutation that follows it in the sorted container. 
If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).
Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.

For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]


class Solution(object):
    def nextPermutation(self,A):     
        n = len(A) 
        # Step 1: Find the break point:
        ind = -1 # break point 
        for i in range(n-2, -1, -1):
            if A[i] < A[i + 1]   # find ascending order from back to find breaking point
                ind = i # index i is the break point
                break
        # if index is still -1 , means in the above loop, we found the elements are in descending order (3,2,1)
        # means next permutation is the reversal of the elements to get all in ascending order (1,2,3)

        # If break point does not exist:
        if ind == -1:          
            A.reverse() # reverse the whole array:
            return A

        # Step 2: Find the next greater element and swap it with arr[ind]:
        for i in range(n - 1, ind, -1):
            if A[ind] < A[i]:
                A[i], A[ind] = A[ind], A[i]
                break

        # Step 3: reverse the right half:
        A[ind+1:] = reversed(A[ind+1:])

        return A

TC: O(3N)
SC: O(1)
