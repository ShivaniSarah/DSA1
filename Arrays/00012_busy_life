# Busy Life
# return max events that can be attended given the start and end time of each events.
# few test cases will not will need priority queue
# link: https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended/submissions/

You are given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.
You can attend an event i at any day d where startTimei <= d <= endTimei. You can only attend one event at any time d.
Return the maximum number of events you can attend.

Input: events = [[1,2],[2,3],[3,4]]
Output: 3
Explanation: You can attend all the three events.
One way to attend them all is as shown.
Attend the first event on day 1.
Attend the second event on day 2.
Attend the third event on day 3.
Example 2:

Input: events= [[1,2],[2,3],[3,4],[1,2]]
Output: 4

# java

class Solution {
    public int maxEvents(int[][] events) {
        // Sort events by their start day
        Arrays.sort(events, (a, b) -> Integer.compare(a[0], b[0]));

        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        int maxEvents = 0;
        int day = 0;
        int i = 0;
        int n = events.length;

        while (i < n || !minHeap.isEmpty()) {
            // Add all events starting today or earlier to the min-heap
            while (i < n && events[i][0] <= day) {
                minHeap.add(events[i][1]);
                i++;
            }
            // Remove all events that have already ended before today
            while (!minHeap.isEmpty() && minHeap.peek() < day) {
                minHeap.poll();
            }
            // If we have events in the heap, attend the one that ends the earliest
            if (!minHeap.isEmpty()) {
                minHeap.poll(); // Attend the event
                maxEvents++;
            }
            // Move to the next day
            day++;
        }
        return maxEvents;
    }
}

or

class Solution {

    public int findUnsortedSubarray(int[] nums) {
        // Function to find the smallest subarray that needs sorting
        return subarraySort(nums);
    }

    // Helper function to check if an element is out of order
    private boolean outOfOrder(int[] arr, int i) {
        int x = arr[i];
        if (i == 0) {
            return arr.length > 1 && x > arr[1];
        }
        if (i == arr.length - 1) {
            return arr.length > 1 && x < arr[i - 1];
        }
        return x > arr[i + 1] || x < arr[i - 1];
    }

    // Function to find the smallest subarray that needs sorting
    private int subarraySort(int[] arr) {
        int smallest = Integer.MAX_VALUE;
        int largest = Integer.MIN_VALUE;

        // Find the smallest and largest elements that are out of order
        for (int i = 0; i < arr.length; i++) {
            int x = arr[i];
            if (outOfOrder(arr, i)) {
                smallest = Math.min(smallest, x);
                largest = Math.max(largest, x);
            }
        }

        if (smallest == Integer.MAX_VALUE) {
            return 0;
        }

        // Find the correct positions of smallest and largest elements
        int left = 0;
        while (left < arr.length && smallest >= arr[left]) {
            left++;
        }

        int right = arr.length - 1;
        while (right >= 0 && largest <= arr[right]) {
            right--;
        }

        return right - left + 1;
    }
}

or

import java.util.Arrays;
import java.util.Comparator;

class Solution {
    public int maxEvents(int[][] events) {
        
        // Helper method to count non-overlapping events
        int countActivities(int[][] activities) {
            // Sort the activities based on their finish time
            Arrays.sort(activities, Comparator.comparingInt(a -> a[1]));
            
            int count = 1;
            int finish = activities[0][1];
            
            for (int i = 1; i < activities.length; i++) {
                if (activities[i][0] >= finish) {
                    count++;
                    finish = activities[i][1];
                }
            }
            
            return count;
        }

        return countActivities(events);
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[][] events = {{1, 3}, {2, 4}, {3, 5}, {4, 6}};
        System.out.println(sol.maxEvents(events)); // Output: 4
    }
}


# python

# Approach I: Greedy

from typing import List

class Solution:
    def maxEvents(self, events: List[List[int]]) -> int:
        
        def count_activities(activities):
            # Sort the activities based on their finish time
            activities.sort(key=lambda x: x[1])
            # activities.sort( key=lambda x: (x[1], x[0])) # to sort based on second value if it is same, then on first value
            
            count = 1
            finish = activities[0][1]
            
            for i in range(1, len(activities)):
                if activities[i][0] >= finish:
                    count += 1
                    finish = activities[i][1]
            
            return count

        return count_activities(events)

# Example usage
solution = Solution()
events = [[1, 2], [3, 4], [2, 3], [3, 5]]
print(solution.maxEvents(events))  # Output depends on the input events list


# Approach II: Using Priority Queue

import heapq

class Solution:
    def maxEvents(self, events: List[List[int]]) -> int:

        # Sort the events in increasing order of their start times
        events.sort(key=lambda x: x[0])

        count = 0   # Keeps track of how many events we have attended until today
        today = 1   # Current day of the Event Fest [1 .. 100000]

        # Keeps track of currently live events.
        # These contained events may have started earlier, but are still "live" and unattended: all event_end_time >= today
        pq = []

        index = 0        # We'd look at the sorted events one by one
        while pq or index < len(events):
            
            # If there's no event on the current day, skip to the next event's start day
            # Earliest event to start next is events[index] as array is sorted by start time
            if not pq:
                today = events[index][0]

            # The Priority Queue already contains events started before today, and still running
            # We pull in more events from the array which are starting today
            while index < len(events) and events[index][0] == today:
                heapq.heappush(pq, events[index][1])
                index += 1

            # Here we have a simplified version of the problem as we can assume all events in the PriorityQueue have started today
            # If all events started on the same day, we would first attend the event which ends first
            heapq.heappop(pq)
            today += 1
            count += 1

            # It was a fun event yesterday, if there were multiple events ending yesterday, we could've attended just one
            while pq and pq[0] < today:
                heapq.heappop(pq)

        return count



