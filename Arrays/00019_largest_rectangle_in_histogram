https://leetcode.com/problems/largest-rectangle-in-histogram/description/

Given an array of integers heights representing the histogram's bar height
where the width of each bar is 1, return the area of the largest rectangle in the histogram.

Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.

# java

class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack<Integer> stack = new Stack<>();
        int maxArea = 0;
        int index = 0;

        while (index < heights.length) {
            // Push the current bar to the stack if it's higher than the bar at the top of the stack
            if (stack.isEmpty() || heights[index] >= heights[stack.peek()]) {
                stack.push(index++);
            } else {
                // Calculate the area with the bar at the top of the stack as the smallest (or minimum height) bar
                int topOfStack = stack.pop();
                int area = heights[topOfStack] * (stack.isEmpty() ? index : index - stack.peek() - 1);
                maxArea = Math.max(maxArea, area);
            }
        }

        // Now, pop the remaining bars from the stack and calculate area
        while (!stack.isEmpty()) {
            int topOfStack = stack.pop();
            int area = heights[topOfStack] * (stack.isEmpty() ? index : index - stack.peek() - 1);
            maxArea = Math.max(maxArea, area);
        }

        return maxArea;
    }
}

or



class Solution {
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        
        // Calculate NSL (Nearest Smaller to Left) indices
        int[] NSL = new int[n];
        Stack<Integer> stack = new Stack<>();
        
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                NSL[i] = stack.peek();
            } else {
                NSL[i] = -1;
            }
            stack.push(i);
        }
        
        // Calculate NSR (Nearest Smaller to Right) indices
        int[] NSR = new int[n];
        stack = new Stack<>();
        
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                NSR[i] = stack.peek();
            } else {
                NSR[i] = n;
            }
            stack.push(i);
        }
        
        // Calculate the maximum area
        int maxArea = 0;
        for (int i = 0; i < n; i++) {
            int width = NSR[i] - NSL[i] - 1;
            int area = heights[i] * width;
            maxArea = Math.max(maxArea, area);
        }
        
        return maxArea;
    }
}


# python

# using next greater and next smaller elemnt using stack

class Solution(object):
    def largestRectangleArea(self, heights):
        
        n = len(heights)
        
        # Calculate NSL (Nearest Smaller to Left) indices
        NSL = [-1] * n
        stack = []
        for i in range(n):
            while stack and heights[stack[-1]] >= heights[i]:
                stack.pop()
            if stack:
                NSL[i] = stack[-1]
            stack.append(i)
        
        # Calculate NSR (Nearest Smaller to Right) indices
        NSR = [n] * n
        stack = []
        for i in range(n-1, -1, -1):
            while stack and heights[stack[-1]] >= heights[i]:
                stack.pop()
            if stack:
                NSR[i] = stack[-1]
            stack.append(i)
        
        # Calculate the maximum area
        max_area = 0
        for i in range(n):
            width = NSR[i] - NSL[i] - 1
            area = heights[i] * width
            max_area = max(max_area, area)
        
        return max_area

   
# using monotonic stack

class Solution(object):
    def largestRectangleArea(self, heights):
        """
        :type heights: List[int]
        :rtype: int
        """
        n=len(heights)
        st=[]
        max_i=0
        for i in range(n+1):
            while( st and (i==n or heights[i]< heights[st[-1]]) ):
                h = heights[st[-1]]
                st.pop()

                if not st:
                    width = i
                else:
                    width =  i - st[-1] -1

                area_i = h*width
                max_i = max(max_i, area_i)

            st.append(i)
        
        return max_i
        
