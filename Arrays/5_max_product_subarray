# Maximum Product Subarray
#  link: https://leetcode.com/problems/maximum-product-subarray/description/
Given an integer array nums, find a subarray that has the largest product, and return the product.
The test cases are generated so that the answer will fit in a 32-bit integer.

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

# Brute:

class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        result = float('-inf')
        for i in range(len(nums) - 1):
            for j in range(i + 1, len(nums)):
                prod = 1
                for k in range(i, j + 1):
                    prod *= nums[k]
                result = max(result, prod)
        return result


# Better Approach:

import sys
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        result = -sys.maxsize
        for i in range(len(nums) ):
            p = nums[i]
            for j in range(i + 1, len(nums)):
                result = max(result, p)
                p *= nums[j]
            result = max(result, p)  # manages (n-1)th term
        return result

# Optimal I:

import sys
class Solution:
    def maxProduct(self, arr: List[int]) -> int:
        n = len(arr) # size of array.
        pre, suff = 1, 1
        ans = float('-inf')
        for i in range(n):
            if pre == 0:
                pre = 1
            if suff == 0:
                suff = 1
            pre *= arr[i]
            suff *= arr[n - i - 1]
            ans = max(ans, max(pre, suff))
        return ans

# Optimal Approach II:

import sys
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        prod1 = nums[0]
        prod2 = nums[0]
        result = nums[0]

        for i in range(1, len(nums)):
            temp = max(nums[i], prod1 * nums[i], prod2 * nums[i])
            prod2 = min(nums[i], prod1 * nums[i], prod2 * nums[i])
            prod1 = temp

            result = max(result, prod1)

        return result

