Trapping rainwater

https://leetcode.com/problems/trapping-rain-water/description/
https://www.geeksforgeeks.org/trapping-rain-water/

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

# Using left max and right max approach
class Solution:
    def trap(self, height: List[int]) -> int:
        n=len(height)
        left = [height[0]]
        right =[height[n-1]]
        
        for i in range(1,n):
            left.append(max(left[-1],height[i]))
            right.append(max(right[-1],height[n-i-1]))
        right.reverse()
        water=0
        for i in range(n):
            water += min(left[i],right[i]) - height[i]
        return water


# Using monotonic stack

class Solution:
    def trap(self, height: List[int]) -> int:
        stack = [] 
  
        # size of the array 
        n = len(height) 
    
        # Stores the final result 
        ans = 0
    
        # Loop through the each bar 
        for i in range(n): 
    
            # Remove bars from the stack 
            # until the condition holds 
            while(len(stack) != 0 and (height[stack[-1]] < height[i])): 
    
                # store the height of the top 
                # and pop it. 
                pop_height = height[stack[-1]] 
                stack.pop() 
    
                # If the stack does not have any 
                # bars or the popped bar 
                # has no left boundary 
                if(len(stack) == 0): 
                    break
    
                # Get the distance between the 
                # left and right boundary of 
                # popped bar 
                distance = i - stack[-1] - 1
    
                # Calculate the min. height 
                min_height = min(height[stack[-1]], height[i])-pop_height 
    
                ans += distance * min_height 
    
            # If the stack is either empty or 
            # height of the current bar is less than 
            # or equal to the top bar of stack 
            stack.append(i) 
    
        return ans 
        
 	
