Given a triangle array, return the minimum path sum from top to bottom.

# link: https://leetcode.com/problems/triangle/

For each step, you may move to an adjacent number of the row below. 
More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

# java

public class Solution {

    public int minimumTotal(List<List<Integer>> triangle) {
        int m = triangle.size();
        if (m == 0) return 0;

        int n = triangle.get(m - 1).size();
        int[][] dp = new int[m][n];

        // Initialize the top of the triangle
        dp[0][0] = triangle.get(0).get(0);

        // Fill the first column of dp table
        for (int i = 1; i < m; i++) {
            dp[i][0] = dp[i - 1][0] + triangle.get(i).get(0);
        }

        // Fill the rest of the dp table
        for (int i = 1; i < m; i++) {
            List<Integer> currentRow = triangle.get(i);
            for (int j = 1; j < currentRow.size(); j++) {
                if (j < i) {
                    dp[i][j] = Math.min(dp[i - 1][j - 1], dp[i - 1][j]) + currentRow.get(j);
                } else {
                    dp[i][j] = dp[i - 1][j - 1] + currentRow.get(j);
                }
            }
        }

        // Find the minimum value in the last row
        int min_i = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            min_i = Math.min(min_i, dp[m - 1][i]);
        }

        return min_i;
    }
}

# python

# DP II:

import sys
class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        # Fixed starting point variable ending point

        m= len(triangle)
        n= len(triangle[m-1])
        dp =[[0 for i in range(n)] for j in range(m)]
        if m>=0:
            dp[0][0] = triangle[0][0]
        for i in range(1,m):
            dp[i][0] = dp[i-1][0]  + triangle[i][0]
        
        for i in range(1,m):
            for j in range(1,n):
                if i>=j:
                    if j <= (i-1) :
                        dp[i][j] =  min( dp[i-1][j-1] , dp[i-1][j]) + triangle[i][j]
                    else:
                        dp[i][j] =  dp[i-1][j-1] + triangle[i][j]

        min_i = sys.maxsize       
        for i in range(n):
            min_i = min(min_i, dp[m-1][i])
        return min_i

