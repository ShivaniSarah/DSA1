# count squares submatrices with all ones

Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.
# link : https://leetcode.com/problems/count-square-submatrices-with-all-ones/description/

Example 1:

Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.


# DP II solution 

class Solution:
    def countSquares(self, matrix: List[List[int]]) -> int:
        m= len(matrix)
        n= len(matrix[0])
        dp = [ [0 for i in range(n)] for j in range(m) ]
        for i in range(n):
            dp[0][i]= matrix[0][i]
        for i in range(1,m):
            dp[i][0] = matrix[i][0]

        for i in range(1,m):
            for j in range(1,n):
                if matrix[i][j] == 1:
                    dp[i][j] = min( dp[i][j-1], dp[i-1][j-1], dp[i-1][j] ) + matrix[i][j]
                
        s=0    
        for i in range(m):
            for j in range(n):
                s+=dp[i][j]
 
        return s
