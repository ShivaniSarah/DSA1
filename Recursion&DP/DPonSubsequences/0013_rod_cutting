https://www.geeksforgeeks.org/problems/rod-cutting0840/1

Given a rod of length N inches and an array of prices, price[]. 
price[i] denotes the value of a piece of length i. 
Determine the maximum value obtainable by cutting up the rod and selling the pieces.
Note: Consider 1-based indexing.

Example 1:
Input:
N = 8
Price[] = {1, 5, 8, 9, 10, 17, 17, 20}
Output:
22
Explanation:
The maximum obtainable value is 22 by 
cutting in two pieces of lengths 2 and 
6, i.e., 5+17=22.

Example 2:
Input:
N=8
Price[] = {3, 5, 8, 9, 10, 17, 17, 20}
Output: 
24
Explanation: 
The maximum obtainable value is 
24 by cutting the rod into 8 pieces 
of length 1, i.e, 8*price[1]= 8*3 = 24. 

# java

# DP II:

class Solution {
    public int cutRod(int price[], int n) {
        int[][] dp = new int[n + 1][n + 1];
        
        // Initialize dp array
        for (int i = 0; i < n; i++) {
            dp[i][0] = 0;
        }
        
        // Fill the dp table
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                int taken = 0;
                if (j >= i) {
                    taken = price[i - 1] + dp[i][j - i];
                }
                int notTaken = dp[i - 1][j];
                
                dp[i][j] = Math.max(taken, notTaken);
            }
        }
        
        return dp[n][n];
    }

}


# DP I:


class Solution {
     
     // Helper function to compute maximum profit
        int f(int i, int[] price, int T, int[][] dp) {
            if (T <= 0) {
                return 0;
            }
            if (i == 0) {
                dp[0][T] = price[0] * T;
                return dp[0][T];
            }

            if (dp[i][T] != -1) {
                return dp[i][T];
            }

            int taken = 0;
            if (T >= (i + 1)) {
                taken = price[i] + f(i, price, T - (i + 1), dp);
            }
            int notTaken = f(i - 1, price, T, dp);

            dp[i][T] = Math.max(taken, notTaken);
            return dp[i][T];
        }
    public int cutRod(int[] price, int N) {
        // Create the dp array to store results of subproblems
        int n = price.length;
        int[][] dp = new int[n][N + 1];
        
        

        // Initialize dp array with -1
        for (int[] row : dp) {
            java.util.Arrays.fill(row, -1);
        }

        // Compute the maximum profit
        return f(n - 1, price, N, dp);
    }
}



# python

# DP II

dp=[[-1]*(n+1) for _ in range(n+1)]
        
        for i in range(n):
            dp[i][0] = 0
            
        for i in range(1,n+1):
            for j in range(n+1):
                taken=0
                if j>=i:
                    taken = price[i-1] + dp[i][j-i]
                notTaken = 0+ dp[i-1][j]
                
                dp[i][j] = max(taken,notTaken)
                
        return dp[n][n]

# DP I

class Solution:
    def cutRod(self, price, N):
        
        def f(i,price,T,dp):
            if T<=0:
                return 0
            if i==0:
                dp[0][T]=price[0]*T
                return dp[0][T]
                
            if dp[i][T]!=-1:
                return dp[i][T]
                
            taken=0
            if T>=(i+1):
                taken= price[i]+f(i,price,T-(i+1),dp)
            notTaken = 0 + f(i-1,price,T,dp)
            
            dp[i][T]=max(taken,notTaken)
            return dp[i][T]
            
        n=len(price)
        dp=[[-1]*(N+1) for _ in range(n)]
        return f(n-1,price,N,dp)

# Recursion

class Solution:
    def cutRod(self, price, N):
        
        def f(i,price,T):
            if T<0:
                return 0
            if i==0:
                return price[0]*T
            taken=0
            if T>=(i+1):
                taken= price[i]+f(i,price,T-(i+1))
            notTaken = 0 + f(i-1,price,T)
            
            return max(taken,notTaken)
            
        n=len(price)
        return f(n-1,price,N)
