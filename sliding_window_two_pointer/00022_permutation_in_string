https://leetcode.com/problems/permutation-in-string/description/

Permutation in String

Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
In other words, return true if one of s1's permutations is the substring of s2.

Example 1:
Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:
Input: s1 = "ab", s2 = "eidboaoo"
Output: false

# java

class Solution {
    public boolean checkInclusion(String s1, String s2) {
    // to sort easily, convert into array
        char[] s1c = s1.toCharArray();
        char[] s2c = s2.toCharArray();
       //Perform sorting for easy comparison of s1c in s2c instead of finding all possible permutations of s1c and checking if any of them are found in s2c
        Arrays.sort(s1c);
        
        for (int i = 0; i <= s2c.length - s1c.length; i++) {
          // sub is a portion from s2c and will vary for each iteration, it should be of the same size of s1c for checking if s1c is in s2c
            char[] sub = Arrays.copyOfRange(s2c, i, i + s1c.length);
            // sort sub array for comparison with s1c
            Arrays.sort(sub);
           //if in any iteration, the sub array matches with s1c, then it means that a permutaion of s1c is found in s2c 
            if (Arrays.equals(s1c, sub)) {
                return true;
            }
        }
     // After checking entirely , the permutation of s1c is not in s2c so return false
        return false;
    }
}

or

class Solution {
    public boolean checkInclusion(String s1, String s2) {
         HashMap<Character, Integer> map = new HashMap<>();
         for (int i = 0; i < s1.length(); i++) {
             map.put(s1.charAt(i), map.getOrDefault(s1.charAt(i), 0) + 1);
         }
         HashMap<Character, Integer> copyMap = new HashMap<Character, Integer>();
         copyMap.putAll(map);
         int pointer = 0;
         int counter = 0;
         while (pointer < s2.length()) {
             if (copyMap.containsKey(s2.charAt(pointer)) && copyMap.get(s2.charAt(pointer)) != 0) {
                    copyMap.put(s2.charAt(pointer), copyMap.get(s2.charAt(pointer)) - 1);
                    counter++;
                    if (counter == s1.length()) {
                        return true;
                    }
             }
             else {
                 counter = 0;
                 copyMap.clear();
                 copyMap.putAll(map);
                 int newPointer = pointer;
                 while (newPointer >= 0 && copyMap.containsKey(s2.charAt(newPointer)) && copyMap.get(s2.charAt(newPointer)) != 0) {
                        copyMap.put(s2.charAt(newPointer), copyMap.get(s2.charAt(newPointer))- 1);
                        counter++;
                        if (counter == s1.length()) {
                            return true;
                        }
                        newPointer--;
                 }

             }
             pointer++;
         }
         return false;
    }
}

or

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s1.length() > s2.length()){
            return false;
        }
        int[] freq = new int[26];
        for(int i = 0; i < s1.length(); i++){
            freq[s1.charAt(i) - 'a']++;
        }
        for(int i = 0; i < s2.length(); i++){
            freq[s2.charAt(i) - 'a']--;
            if(i - s1.length() >= 0){
                freq[s2.charAt(i - s1.length()) - 'a']++;
            }
            if(allZeros(freq)){
                return true;
            }
        }
        return false;
    }
    private boolean allZeros(int[] f){
        for(int i = 0; i < 26; i++){
            if(f[i] != 0){
                return false;
            }
        }
        return true;
    }
}

or

public class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if (s1.length() > s2.length())
            return false;
        int[] s1map = new int[26];
        for (int i = 0; i < s1.length(); i++)
            s1map[s1.charAt(i) - 'a']++;
        for (int i = 0; i <= s2.length() - s1.length(); i++) {
            int[] s2map = new int[26];
            for (int j = 0; j < s1.length(); j++) {
                s2map[s2.charAt(i + j) - 'a']++;
            }
            if (matches(s1map, s2map))
                return true;
        }
        return false;
    }
    
    public boolean matches(int[] s1map, int[] s2map) {
        for (int i = 0; i < 26; i++) {
            if (s1map[i] != s2map[i])
                return false;
        }
        return true;
    }
}
