https://leetcode.com/problems/longest-turbulent-subarray/

Given an integer array arr, return the length of a maximum size turbulent subarray of arr.

A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

More formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:

For i <= k < j:
arr[k] > arr[k + 1] when k is odd, and
arr[k] < arr[k + 1] when k is even.
Or, for i <= k < j:
arr[k] > arr[k + 1] when k is even, and
arr[k] < arr[k + 1] when k is odd.
 
Example 1:
Input: arr = [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]

Example 2:
Input: arr = [4,8,12,16]
Output: 2

Example 3:
Input: arr = [100]
Output: 1

# java

class Solution {
    public int maxTurbulenceSize(int[] arr) {
        int sign = 1;
        int length = 0;
        int count = 0;
        int i = 0, n = arr.length-1;
        if(n==0) return 1;
        while(i<n){
            if(arr[i]*sign>arr[i+1]*sign){
                count++;
                sign*=-1;
                i++;
            }else if (arr[i]==arr[i+1]){
                sign*=-1;
                i++;
                if(length<count+1){
                    length = count+1;
                }
                count = 0;
            }
            else{
                sign*=-1;
                if(length<count+1){
                    length = count+1;
                }
                count = 0;
            }
        }
        if(length<count+1) return count+1;
        return length;
    }
}
