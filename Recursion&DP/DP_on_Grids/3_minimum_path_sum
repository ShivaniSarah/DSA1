We are given an “N*M” matrix of integers.
We need to find a path from the top-left corner to the bottom-right corner of the matrix, such that
there is a minimum cost past that we select.

# link: https://leetcode.com/problems/minimum-path-sum/

At every cell, we can move in only two directions: right and bottom. 
The cost of a path is given as the sum of values of cells of the given matrix.


# DP II:

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        m=len(grid)
        n=len(grid[0])
        dp = [[0 for j in range(n)] for i in range(m)]
        dp[0][0]=grid[0][0]
        for i in range(1,n):
            dp[0][i] = dp[0][i-1] + grid[0][i]

        for i in range(1,m):
            dp[i][0] = dp[i-1][0] + grid[i][0]
        
        for i in range(1,m):
            for j in range(1,n):
                dp[i][j] = min(dp[i-1][j],dp[i][j-1]) + grid[i][j]
        
        return dp[m-1][n-1]


