https://leetcode.com/problems/remove-duplicates-from-sorted-array/

Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once.
The relative order of the elements should be kept the same. Then return the number of unique elements in nums.
Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:
Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially.
The remaining elements of nums are not important as well as the size of nums.

Example 1:
Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

Example 2:
Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

# java

import java.util.*;

public class Solution {
    public int removeDuplicates(int[] arr) {
        Set<Integer> st = new HashSet<>();
        List<Integer> l = new ArrayList<>();
        
        // Add elements to the set to remove duplicates
        for (int num : arr) {
            st.add(num);
        }

        // Create a list with unique elements
        for (int num : arr) {
            if (st.contains(num)) {
                l.add(num);
                st.remove(num);
            }
        }

        // Copy unique elements back to the original array
        int k = l.size();
        for (int i = 0; i < k; i++) {
            arr[i] = l.get(i);
        }

        return k;
    }
}

or

public class Solution {
    public int removeDuplicates(int[] arr) {
        if (arr.length == 0) return 0;
        
        int i = 0;
        for (int j = 1; j < arr.length; j++) {
            if (arr[i] != arr[j]) {
                i++;
                arr[i] = arr[j];
            }
        }
        return i + 1;
    }
}

or

public class Solution {
    public int removeDuplicates(int[] nums) {
        if (nums.length == 0) return 0;
        
        int k = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1]) {
                nums[k] = nums[i];
                k++;
            }
        }
        return k;
    }
}

# python

# Brute:

class Solution(object):
    def removeDuplicates(self, arr):
        st = set()
        for i in range(len(arr)):
            st.add(arr[i])

        l=[]
        for i in range(len(arr)):
            if arr[i] in st:
                l.append(arr[i])
                st.remove(arr[i])
    
        k = len(l)
        j = 0
        for x in l:
            arr[j] = x
            j += 1
        return k

# better

class Solution(object):
    def removeDuplicates(self, arr):
        i = 0
        for j in range(1, len(arr)):
            if arr[i] != arr[j]:
                i += 1
                arr[i] = arr[j]
        return i + 1

# better

class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        k=1
        for i in range(1,len(nums)):
            if nums[i]>nums[i-1]:
                nums[k]=nums[i]
                k=k+1
        return k  
