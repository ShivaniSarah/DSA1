Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is 
either directly below or diagonally left/right. 
Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

# link: https://leetcode.com/problems/minimum-falling-path-sum/

# Variable Starting Point and Variable Ending Point

# java

# DP II:

class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        int[][] dp = new int[n][n];

        // Initialize the dp array with the first row of the matrix
        for (int i = 0; i < n; i++) {
            dp[0][i] = matrix[0][i];
        }

        // Fill the dp array from the second row to the last row
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int left = Integer.MAX_VALUE;
                int right = Integer.MAX_VALUE;

                // Check the cell to the left
                if (j - 1 >= 0) {
                    left = dp[i - 1][j - 1];
                }

                // Check the cell to the right
                if (j + 1 < n) {
                    right = dp[i - 1][j + 1];
                }

                // Update the dp value for the current cell
                dp[i][j] = Math.min(left, Math.min(dp[i - 1][j], right)) + matrix[i][j];
            }
        }

        // Find the minimum value in the last row of the dp array
        int minPathSum = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            minPathSum = Math.min(minPathSum, dp[n - 1][i]);
        }

        return minPathSum;
    }
}

# python

# DP II:

import sys
class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        n= len(matrix)        
        dp =[[0 for i in range(n)] for i in range(n)]
        for i in range(n):
            dp[0][i]=matrix[0][i]
        for i in range(1,n):
            for j in range(n):
                l=r=sys.maxsize
                if  j-1>=0 :
                    l=dp[i-1][j-1]
                if j+1<n:
                    r=dp[i-1][j+1]
                dp[i][j] = min( l , dp[i-1][j], r ) + matrix[i][j]

        min_i = sys.maxsize
        for i in range(n):
            min_i = min(dp[n-1][i],min_i)
        
        return min_i
