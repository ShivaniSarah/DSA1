https://www.geeksforgeeks.org/problems/left-view-of-binary-tree/1

Given a Binary Tree, return Left view of it. Left view of a Binary Tree is set of nodes visible when tree is visited from Left side. The task is to complete the function leftView(), which accepts root of the tree as argument. If no left view is possible, return an empty tree.

Left view of following tree is 1 2 4 8.

          1
       /     \
     2        3
   /     \    /    \
  4     5   6    7
   \
     8   

Example 1:

Input:
   1
 /  \
3    2
Output: 1 3


# java

* A Binary Tree node
class Node
{
    int data;
    Node left, right;

    Node(int item)
    {
        data = item;
        left = right = null;
    }
}*/

class Tree {
    ArrayList<Integer> leftView(Node root) {
        ArrayList<Integer> ans = new ArrayList<>();

        if (root == null) {
            return ans;
        }

        Queue<AbstractMap.SimpleEntry<Node, Integer>> queue = new LinkedList<>();
        Map<Integer, Integer> map = new TreeMap<>();
        queue.add(new AbstractMap.SimpleEntry<>(root, 0));

        while (!queue.isEmpty()) {
            AbstractMap.SimpleEntry<Node, Integer> p = queue.poll();
            Node node = p.getKey();
            int rows = p.getValue();

            if (!map.containsKey(rows)) {
                map.put(rows, node.data);
            }

            if (node.left != null) {
                queue.add(new AbstractMap.SimpleEntry<>(node.left, rows + 1));
            }
            if (node.right != null) {
                queue.add(new AbstractMap.SimpleEntry<>(node.right, rows + 1));
            }
        }

        for (int i : map.values()) {
            ans.add(i);
        }

        return ans;
    }
}

or

class Tree
{   
     HashMap<Integer,Integer>map;
     void recur(Node root,int count){
         if(root==null) return;
         
         if(!map.containsKey(count)){
             map.put(count,root.data);
         }
         
         recur(root.left,count+1);
         recur(root.right,count+1);
     }
    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root)
    {
      // Your code here
      map=new HashMap<>();
      ArrayList<Integer>list=new ArrayList<>();
       recur(root,0);
     for(int i=0;i<=map.size();i++){
         if(map.containsKey(i))
         list.add(map.get(i));
     }
      
      return list;
    }
}

or

class Tree
{
    ArrayList<Integer> leftView(Node root)
    {
         ArrayList<Integer> l=new ArrayList<>();
         if(root==null) return l;
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int lev=q.size();
            int[] arr=new int[lev];
            for(int i=0;i<lev;i++){
                Node ele=q.remove();
                arr[i]=ele.data;
                if(ele.left!=null)  q.add(ele.left);
                if(ele.right!=null)  q.add(ele.right);
            }
            if(arr.length!=0)
                l.add(arr[0]);
        }
         return l;
    }
}

or

class Tree
{
    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root)
    {
      // Your code here
      ArrayList<Integer> res = new ArrayList<>();
      if(root == null){
          return res;
      }
      Queue<Node> q = new LinkedList<>();
      q.add(root);
      while(!q.isEmpty()){
          int n = q.size();
          for(int i=1; i<=n; i++){
              Node tmp = q.poll();
              if(i == 1){
                  res.add(tmp.data);
              }
              if(tmp.left != null){
                  q.add(tmp.left);
              }
              if(tmp.right!=null){
                  q.add(tmp.right);
              }
          }
      }
      return res;
    }
}


or


class Tree
{
    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root)
    {
        ArrayList<Integer> result = new ArrayList<>();
        LinkedList<Node> helper = new LinkedList<>();
        helper.add(root);
        helper.add(null);
        
        while(helper.peek() != null) {
            boolean isFirst = true;
            while (helper.peek() != null) {
                Node temp = helper.remove();
                if(isFirst) {
                    result.add(temp.data);
                    isFirst = false;
                }
                if (temp.left != null) helper.add(temp.left);
                if(temp.right != null) helper.add(temp.right);
            }
            helper.remove();
            helper.add(null);
        }
        return result;
      // Your code here
    }
}


or


class Tree
{
    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root)
    {
        if(root==null)return new ArrayList<>();
        
      // Your code here
      ArrayList<Integer>list=new ArrayList<>();
      Queue<Node> q=new LinkedList<>();
      q.add(root);
      int c=0;
      while(!q.isEmpty()){
          int level=q.size();
          for(int i=0;i<level;i++){
              Node x=q.remove();
              if(i==0){
                  c=1;
              }
              else{
                  c=0;
              }
              if(c==1){
                  list.add(x.data);
              }
              if(x.left!=null){
                  q.add(x.left);
              }
              if(x.right!=null){
                  q.add(x.right);
              }
          }
      }
      return list;
    }
