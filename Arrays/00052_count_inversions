https://www.geeksforgeeks.org/problems/inversion-of-array-1587115620/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=inversion-of-array

Given an array of integers. Find the Inversion Count in the array.  Two array elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.
Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 

Examples:

Input: n = 5, arr[] = {2, 4, 1, 3, 5}
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).

Input: n = 5, arr[] = {2, 3, 4, 5, 6}
Output: 0
Explanation: As the sequence is already sorted so there is no inversion count.

Input: n = 3, arr[] = {10, 10, 10}
Output: 0
Explanation: As all the elements of array are same, so there is no inversion count.

# brute

class Solution:
    def inversionCount(self, a, n):
        cnt = 0
        for i in range(n):
            for j in range(i+1, n):
                if a[i] > a[j]:
                    cnt += 1
        return cnt

# optimal

import math
class Solution:
    def inversionCount(self, a, n):
        def merge(arr, low, mid , high) -> int:
            temp = []   # temporary array
            left = low  # starting index of left half of arr
            right = mid + 1 # starting index of right half of arr
        
            cnt = 0     # Modification 1: cnt variable to count the pairs
        
            # storing elements in the temporary array in a sorted manner
            while (left <= mid and right <= high):
                if (arr[left] <= arr[right]):
                    temp.append(arr[left])
                    left += 1
                else:
                    temp.append(arr[right])
                    cnt += (mid - left + 1)  # Modification 2
                    right += 1
        
            # if elements on the left half are still left
            while (left <= mid):
                temp.append(arr[left])
                left += 1
        
            # if elements on the right half are still left
            while (right <= high):
                temp.append(arr[right])
                right += 1
        
            # transfering all elements from temporary to arr
            for i in range(low, high + 1):
                arr[i] = temp[i - low]
        
            return cnt   # Modification 3
        
        def mergeSort(arr , low, high ) -> int:
            cnt = 0
            if low >= high:
                return cnt
            mid = math.floor((low + high) / 2)
            cnt += mergeSort(arr, low, mid)    # left half
            cnt += mergeSort(arr, mid + 1, high)  # right half
            cnt += merge(arr, low, mid, high)  # merging sorted halves
            return cnt
            
        return mergeSort(a, 0, n - 1)
