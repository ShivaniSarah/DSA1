# Get Grid Unique Paths
# Given two values M and N, which represent a matrix[M][N]. 
# We need to find the total unique paths from the top-left cell (matrix[0][0]) to the rightmost cell (matrix[M-1][N-1]).
# At any cell we are allowed to move in only two directions:- bottom and right.

# DP II:

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        # dp=[[-1]*n]*m
        # l=[-1 for _ in range(n)]
        # dp= [ l for _ in range(m) ]
        dp = [[-1 for j in range(n)] for i in range(m)]
        for i in range(n):
            dp[0][i]=1
        for i in range(m):
            dp[i][0]=1
        
        for i in range(1,m):
            for j in range(1,n):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]

        return dp[m-1][n-1]

        
