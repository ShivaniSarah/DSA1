# Minimal Cost geeks for geeks
# link : https://www.geeksforgeeks.org/problems/minimal-cost/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=minimal-cost

Frog Jump with K Distance/ Learn to write 1D DP
This is a follow-up question to “Frog Jump” discussed in the previous article. In the previous question, 
the frog was allowed to jump either one or two steps at a time. In this question,
the frog is allowed to jump up to ‘K’ steps at a time. If K=4, the frog can jump 1,2,3, or 4 steps at every index.

# Java
Dp II:

class Solution {
    public int minimizeCost(int[] height, int k) {
        int n= height.length;
        if (n == 0) return 0;

        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;

        if (n > 1) {
            dp[1] = Math.abs(height[1] - height[0]);
        }

        for (int i = 2; i < n; i++) {
            int min_i = Integer.MAX_VALUE;
            if (k >= 1) {
                for (int j = 1; j <= k; j++) {
                    if (i - j >= 0) {
                        int l = dp[i - j] + Math.abs(height[i] - height[i - j]);
                        min_i = Math.min(min_i, l);
                    }
                }
            }
            dp[i] = min_i;
        }

        return dp[n - 1];
    }
}


# python

# DP II
import sys
class Solution:
    def minimizeCost(self, height, n, k):
        dp=[-1 for i in range(n)]
        if n> 0:
            dp[0]=0
        if n>1:
            dp[1]=abs(height[1]-height[0])
            
        for i in range(2,n):
            min_i=sys.maxsize
            if k>=1:
                for j in range(1,k+1):
                    if i-j>=0:
                        
                        l= dp[i-j]+abs(height[i]-height[i-j])
                        min_i=min(min_i,l)
            
            dp[i] = min_i
        
        return dp[n-1]

# Space optimised DP III is not possible / difficult to maintain array of len k



