# link: https://leetcode.com/problems/fibonacci-number/

# Recursion
# TC : O(2^n)
# SC : O(n)
class Solution:
    
    def fib(self, n: int) -> int:
        def f(n):
            if n==0 or n==1 :  # base case
                return n
            l= f(n-1)          # get left value from recursion
            r= f(n-2)          # get right value from recursion
            return l+r         # return sum of l And r
        return f(n)            # return final recursion value


# DP-I (Memoization - Top Down - recursion+storage)
# TC: O(N)
# SC: O(N+N) for recursion and dp
class Solution:
    
    def fib(self, n: int) -> int:
        def f(n,dp):                   # function declaration  of recursion with dp
            if n==0 or n==1 :          # base case 
                dp[n]=n
                return dp[n]
            if dp[n]!= -1:             # PREVIOUS VALUE FROM dp[n]
                return dp[n]
            l= f(n-1,dp)
            r= f(n-2,dp)
            dp[n]=l+r                  # store in dp[n]
            return dp[n]               # return dp[n]

        dp=[-1 for i in range(n+1)]    # initialize dp
        return f(n,dp)                 # call recursion with dp


# DP-II (Tabulation - Bottom Up - only storage use loop)
# TC: O(N) for loop
# SC: O(N) Only for dp
class Solution:
    
    def fib(self, n: int) -> int:

        dp=[-1 for i in range(n+1)]   # initialize dp
        for i in range(n+1):          # base case 
            if i<=1:
                dp[i]=i               # base case with dp[i]
             
        for i in range(2,n+1):
            l= dp[i-1]                # replace with terms of dp[i]
            r= dp[i-2]                #  replace with terms of dp[i]
            dp[i]=l+r                 # set dp[i] value with l and r

        return dp[n]                  # return dp[n]


# DP-III (Space Optimised DP )
TC: O(N) for loop
SC: O(3) for 3 varaibles
class Solution:
    
    def fib(self, n: int) -> int:
        if n<=1:                              # if n is base case return final value
            return n

        prev1=0                               # base case with variable
        prev2=1                               # base case with variable
        final=0                               # final variable
        for i in range(2,n+1):
            
            final=prev1+prev2                 # use formula
            prev1=prev2                       # use swapping method
            prev2=final

        return final                          # return final


  
