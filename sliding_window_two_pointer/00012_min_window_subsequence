https://www.geeksforgeeks.org/problems/minimum-window-subsequence/0

Given strings str1 and str2, find the minimum (contiguous) substring W of str1, so that str2 is a subsequence of W.
If there is no such window in str1 that covers all characters in str2, return the empty string "". If there are multiple such minimum-length windows, return the one with the left-most starting index.

Example 1:
Input: 
str1: geeksforgeeks
str2: eksrg
Output: 
eksforg
Explanation: 
"eksforg" satisfies all required conditions. str2 is its subsequence and it is longest and leftmost among all possible valid substrings of str1.

Example 2:
Input: 
str1: abcdebdde 
str2: bde 
Output:  bcde 
Explanation:  "bcde" is the answer and "deb" is not a smaller window because the elements in the window must occur in order.

# java

class Solution {
    static String minWindow(String str1, String str2) {
        if (str1.length() < str2.length()) return "";

        int n = str1.length();
        int m = str2.length();
        int minLength = Integer.MAX_VALUE;
        String minWindow = "";

        // Iterate over each starting position in str1
        for (int start = 0; start <= n - m; start++) {
            int i = start;
            int j = 0;
            
            // Expand the window to find a valid substring
            while (i < n && j < m) {
                if (str1.charAt(i) == str2.charAt(j)) {
                    j++;
                }
                i++;
            }

            // If all characters of str2 are found
            if (j == m) {
                // Current window is from start to i - 1
                if (i - start < minLength) {
                    minLength = i - start;
                    minWindow = str1.substring(start, i);
                }
            }
        }

        return minWindow;
    }

}
