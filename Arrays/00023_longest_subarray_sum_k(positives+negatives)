https://www.geeksforgeeks.org/problems/longest-sub-array-with-sum-k0809/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=longest-sub-array-with-sum-k

Given an array containing N integers and an integer K., 
Your task is to find the length of the longest Sub-Array with the sum of the elements equal to the given value K.

A[] = {10, 5, 2, 7, 1, 9}
K = 15
Output : 4
Explanation:
The sub-array is {5, 2, 7, 1}.

Input : 
A[] = {-1, 2, 3}
K = 6
Output : 0
Explanation: 
There is no such sub-array with sum 6.

Brute:

class Solution:
    def lenOfLongSubarr (self, a, n, k) :
        n = len(a) # size of the array.

        length = 0
        for i in range(n): # starting index
            for j in range(i, n): # ending index
                # add all the elements of
                # subarray = a[i...j]:
                s = 0
                for K in range(i, j+1):
                    s += a[K]
    
                if s == k:
                    length = max(length, j - i + 1)
        return length

Brute II:

class Solution:
    def lenOfLongSubarr (self, a, n, k) : 
        n = len(a) # size of the array.

        length = 0
        for i in range(n): # starting index
            s = 0
            for j in range(i, n): # ending index
                # add the current element to
                # the subarray a[i...j-1]:
                s += a[j]
    
                if s == k:
                    length = max(length, j - i + 1)
        return length


Optimal : (for only positives, for positives, negatives and zero )

class Solution:
    def lenOfLongSubarr(self, a, n, k):
        # Dictionary to store the cumulative sum and the earliest index it was found at
        preSumMap = {}
        Sum = 0
        maxLen = 0
        for i in range(n):
            # calculate the prefix sum till index i:
            Sum += a[i]
    
            # if the sum = k, update the maxLen:
            if Sum == k:
                maxLen = max(maxLen, i + 1)
    
            # calculate the sum of remaining part i.e. x-k:
            rem = Sum - k
    
            # Calculate the length and update maxLen:
            if rem in preSumMap:
                length = i - preSumMap[rem]
                maxLen = max(maxLen, length)
    
            # Finally, update the map checking the conditions:
            if Sum not in preSumMap:
                preSumMap[Sum] = i
    
        return maxLen

Optimal: (only for positive numbers)

from typing import List

def getLongestSubarray(a: [int], k: int) -> int:
    
    n = len(a) 

    left, right = 0, 0 
    Sum = 0
    maxLen = 0
    
    while right < n:
        if right < n: Sum += a[right]
        while left <= right and Sum > k:
            Sum -= a[left]
            left += 1
            
        if Sum == k:
            maxLen = max(maxLen, right - left + 1)

        right += 1

    return maxLen


if __name__ == "__main__":
	a = [2,2,5,1,1,1,9,2]
	k = 10

	length = getLongestSubarray(a, k)
	print(f"The length of the longest subarray is: {length}")
