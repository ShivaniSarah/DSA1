Problem Statement: Given a number of stairs. Starting from the 0th stair we need to climb to the “Nth” stair. 
At a time we can climb either one or two steps. We need to return the total number of distinct ways to reach from 0th to Nth stair.

link: https://leetcode.com/problems/climbing-stairs/description/

Solution: Follow fibonacci with base case 1 and 1 instead of 0 and 1.

# java

DP I:

class Solution {

    public int climbStairs(int n) {
        int[] dp = new int[n + 1]; // Create a dp array of size n+1
        for (int i = 0; i <= n; i++) {
            dp[i] = -1; // Initialize dp array with -1
        }
        return f(n, dp); // Call the helper function
    }

    private int f(int n, int[] dp) {
        if (n == 0) {
            dp[0] = 1; // Base case: 1 way to stay at the ground (0th step)
            return dp[0];
        }
        if (n == 1) {
            dp[1] = 1; // Base case: 1 way to reach the 1st step
            return dp[1];
        }

        if (dp[n] != -1) {
            return dp[n]; // Return already computed result
        }

        dp[n] = f(n - 2, dp) + f(n - 1, dp); // Compute the number of ways for the nth step
        return dp[n];
    }
}


DP II:

class Solution {

    public int climbStairs(int n) {
        if (n == 0) return 1;
        if (n == 1) return 1;

        int[] dp = new int[n + 1]; // Create a dp array of size n+1
        dp[0] = 1; // Base case: 1 way to stay at the ground (0th step)
        dp[1] = 1; // Base case: 1 way to reach the 1st step

        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2]; // Calculate the number of ways to reach the ith step
        }

        return dp[n]; // Return the number of ways to reach the nth step
    }
}


DP III:

class Solution {

    public int climbStairs(int n) {
        if (n == 0 || n == 1) return 1; // Base case: 1 way to stay at ground or reach the 1st step

        int prev2 = 1; // Represents the number of ways to reach (i-2)th step
        int prev = 1;  // Represents the number of ways to reach (i-1)th step
        int cur_i = 0; // Current number of ways to reach the ith step

        for (int i = 2; i <= n; i++) {
            cur_i = prev2 + prev; // Number of ways to reach ith step
            prev2 = prev;         // Update prev2 to the previous value of prev
            prev = cur_i;         // Update prev to the current value of cur_i
        }

        return prev; // The number of ways to reach the nth step
    }
}



# python

# Recursion

class Solution:

    def climbStairs(self, n: int) -> int:
        def f(n):
            if n==0:
                return 1
            if n==1:
                return 1

            return f(n-1)+f(n-2)

        return f(n)

# DP I:

class Solution:

    def climbStairs(self, n: int) -> int:
        def f(n,dp):
            if n==0:
                dp[0]=1
                return dp[0]
            if n==1:
                dp[1]=1
                return dp[1]

            if dp[n]!=-1:
                return dp[n]

            dp[n]=f(n-2,dp)+f(n-1,dp)
            
            return dp[n]

        dp = [-1 for i in range(n+1)]
        return f(n,dp)


# DP II:

class Solution:

    def climbStairs(self, n: int) -> int:
        
        
        dp = [-1] * (n + 1)
        dp[0] = 1
        dp[1] = 1

        for i in range(2, n+1):
          dp[i] = dp[i-1] + dp[i-2]
        return(dp[n])

DP III:

class Solution:

    def climbStairs(self, n: int) -> int:
    prev2 = 1
    prev = 1

    for i in range(2, n+1):
        cur_i = prev2 + prev
        prev2 = prev
        prev = cur_i

    return(prev)


