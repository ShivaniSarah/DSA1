https://leetcode.com/problems/longest-increasing-subsequence/description/

Given an integer array nums, return the length of the longest strictly increasing subsequence.

Example 1:
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:
Input: nums = [7,7,7,7,7,7,7]
Output: 1

# DP II:





# DP I:

class Solution(object):
    def lengthOfLIS(self, nums):
        
        def f(arr, n, ind, prev_index, dp):
            
            if ind == n:
                return 0

            if dp[ind][prev_index + 1] != -1:
                return dp[ind][prev_index + 1]

            not_take = 0 + f(arr, n, ind + 1, prev_index, dp)

            take = 0

            if prev_index == -1 or arr[ind] > arr[prev_index]:
                take = 1 + f(arr, n, ind + 1, ind, dp)

            dp[ind][prev_index + 1] = max(not_take, take)

            return dp[ind][prev_index + 1]

        n = len(nums)

        dp = [[-1 for _ in range(n + 1)] for _ in range(n)]

        return f(nums, n, 0, -1, dp)

