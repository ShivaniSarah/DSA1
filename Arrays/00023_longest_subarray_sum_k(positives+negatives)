https://www.geeksforgeeks.org/problems/longest-sub-array-with-sum-k0809/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=longest-sub-array-with-sum-k

Given an array containing N integers and an integer K., 
Your task is to find the length of the longest Sub-Array with the sum of the elements equal to the given value K.

A[] = {10, 5, 2, 7, 1, 9}
K = 15
Output : 4
Explanation:
The sub-array is {5, 2, 7, 1}.

Input : 
A[] = {-1, 2, 3}
K = 6
Output : 0
Explanation: 
There is no such sub-array with sum 6.

Brute:

class Solution:
    def lenOfLongSubarr (self, a, n, k) :
        n = len(a) # size of the array.

        length = 0
        for i in range(n): # starting index
            for j in range(i, n): # ending index
                # add all the elements of
                # subarray = a[i...j]:
                s = 0
                for K in range(i, j+1):
                    s += a[K]
    
                if s == k:
                    length = max(length, j - i + 1)
        return length

Brute II:

class Solution:
    def lenOfLongSubarr (self, a, n, k) : 
        n = len(a) # size of the array.

        length = 0
        for i in range(n): # starting index
            s = 0
            for j in range(i, n): # ending index
                # add the current element to
                # the subarray a[i...j-1]:
                s += a[j]
    
                if s == k:
                    length = max(length, j - i + 1)
        return length


Better:

n = len(a) # size of the array.

    preSumMap = {}
    Sum = 0
    maxLen = 0
    for i in range(n):
        # calculate the prefix sum till index i:
        Sum += a[i]

        # if the sum = k, update the maxLen:
        if Sum == k:
            maxLen = max(maxLen, i + 1)

        # calculate the sum of remaining part i.e. x-k:
        rem = Sum - k

        # Calculate the length and update maxLen:
        if rem in preSumMap:
            length = i - preSumMap[rem]
            maxLen = max(maxLen, length)

        # Finally, update the map checking the conditions:
        if Sum not in preSumMap:
            preSumMap[Sum] = i

    return maxLen


Optimal:

