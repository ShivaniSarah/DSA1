https://www.geeksforgeeks.org/problems/longest-common-substring1452/1

Given two strings. The task is to find the length of the longest common substring.

Example 1:
Input: S1 = "ABCDGH", S2 = "ACDGHR", n = 6, m = 6
Output: 4
Explanation: The longest common substring
is "CDGH" which has length 4.

Example 2:
Input: S1 = "ABC", S2 "ACB", n = 3, m = 3
Output: 1
Explanation: The longest common substrings
are "A", "B", "C" all having length 1.

# java

class Solution {
    
    public int longestCommonSubstr(String s1, String s2, int n, int m) {
        // int n = s1.length();
        // int m = s2.length();
        
        // Initialize the DP table
        int[][] dp = new int[n + 1][m + 1];
        
        int ans = 0;
        
        // Fill the DP table
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    int val = 1 + dp[i - 1][j - 1];
                    dp[i][j] = val;
                    ans = Math.max(ans, val);
                } else {
                    dp[i][j] = 0;
                }
            }
        }
        
        // Return the length of the Longest Common Substring
        return ans;
    }
}

or

class Solution {

    // Helper function to find the length of the longest common substring
    private int lcs(int i, int j, int count, String s1, String s2) {
        if (i == 0 || j == 0) {
            return count;
        }
        
        // If characters match, increment the count and continue
        if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
            count = lcs(i - 1, j - 1, count + 1, s1, s2);
        }
        
        // Check for other possibilities
        count = Math.max(count, Math.max(lcs(i, j - 1, 0, s1, s2),
                                         lcs(i - 1, j, 0, s1, s2)));
        
        return count;
    }
    
    public int longestCommonSubstr(String s1, String s2,int n,int m) {
        
        return lcs(n, m, 0, s1, s2);
    }

}


# python

DP II:

class Solution:
    def longestCommonSubstr(self, s1, s2, n, m):
        n = len(s1)
        m = len(s2)
        
        dp = [[0] * (m + 1) for _ in range(n + 1)]
    
        ans = 0
        
        for i in range(1, n + 1):
            for j in range(1, m + 1):
                if s1[i - 1] == s2[j - 1]:
                    val = 1 + dp[i - 1][j - 1]
                    dp[i][j] = val
                    ans = max(ans, val)
                else:
                    dp[i][j] = 0
        
        return ans

# DP I :

class Solution:
    def longestCommonSubstr(self, s1, s2, n, m):
        def lcs(i, j, count):
 
            if (i == 0 or j == 0):
                return count
         
            if (s1[i - 1] == s2[j - 1]):
                count = lcs(i - 1, j - 1, count + 1)
         
            count = max(count, max(lcs(i, j - 1, 0),
                                   lcs(i - 1, j, 0)))
         
            return count
            
        n = len(s1)
        m = len(s2)
     
        return lcs(n, m, 0)
