https://leetcode.com/problems/rotate-image/description/

You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. 
DO NOT allocate another 2D matrix and do the rotation.

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Example 2:
Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]

# java

public class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        int[][] rot = new int[n][n];
        
        // Perform the rotation
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rot[j][n - 1 - i] = matrix[i][j];
            }
        }
        
        // Copy the rotated matrix back to the original matrix
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = rot[i][j];
            }
        }
    }
}

or

public class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        
        // Transposing the matrix
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                // Swap matrix[i][j] with matrix[j][i]
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        
        // Reversing each row of the matrix
        for (int i = 0; i < n; i++) {
            int left = 0;
            int right = n - 1;
            while (left < right) {
                // Swap matrix[i][left] with matrix[i][right]
                int temp = matrix[i][left];
                matrix[i][left] = matrix[i][right];
                matrix[i][right] = temp;
                left++;
                right--;
            }
        }
    }
}


# Brute:

class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        n = len(matrix)
        rot = [[0 for _ in range(n)] for _ in range(n)]
        for i in range(n):
            for j in range(n):
                rot[j][n-1 - i ] = matrix[i][j]
        for i in range(n):
            for j in range(n):
                matrix[i][j]=rot[i][j]
        
# optimal

class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        n = len(matrix)
        # transposing the matrix
        for i in range(n):
            for j in range(i):
                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # swap
        # reversing each row of the matrix
        for i in range(n):
            matrix[i].reverse()
