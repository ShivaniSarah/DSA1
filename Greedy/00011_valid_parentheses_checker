https://leetcode.com/problems/valid-parenthesis-string/

Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.
The following rules define a valid string:
Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".
 
Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "(*)"
Output: true

Example 3:
Input: s = "(*))"
Output: true


class Solution {
    public boolean checkValidString(String s) {
        // int low = 0;
        // int high = 0;
        // for(Character c : s.toCharArray()) {
        //     low += c == '(' ? 1 : -1;
        //     high += c != ')' ? 1 : -1;
        //     if(high < 0)
        //         break;
        //     low = Math.max(low, 0);
        // }
        // return low == 0;
        char[] arr = s.toCharArray();
        int countLeft = 0, countStar = 0, n = s.length();
        for(int i = 0; i < n; i++) {
            if(arr[i] == '*') {
                countStar++;
            } else if(arr[i] == '(') {
                countLeft++;
            } else if(arr[i] == ')') {
                if(countLeft == 0 && countStar == 0) {
                    return false;
                } else if(countLeft == 0) {
                    countStar--;
                } else {
                    countLeft--;
                }
            }
        }
        System.out.println(countLeft);
        if(countLeft>0 && countLeft==countStar ) return true;
        

        // countStar = 0;
        // countLeft = 0; //as countRight
        // for(int i = n - 1; i >= 0; i--) {
        //     if(arr[i] == '*') {
        //         countStar++;
        //     } else if(arr[i] == ')') {
        //         countLeft++;
        //     } else if(arr[i] == '(') {
        //         if(countLeft == 0 && countStar == 0) {
        //             return false;
        //         } else if(countLeft == 0) {
        //             countStar--;
        //         } else {
        //             countLeft--;
        //         }
        //     }
        // }
        return true;
    }
}

or 

class Solution {
    public boolean checkValidString(String s) {
        int minOpen = 0, maxOpen = 0;

        for (char c : s.toCharArray()) {
            if (c == '(') {
                minOpen++;
                maxOpen++;
            } else if (c == ')') {
                minOpen--;
                maxOpen--;
            } else if (c == '*') {
                minOpen--;
                maxOpen++;
            }
            if (maxOpen < 0) {
                return false;
            }
            if (minOpen < 0) {
                minOpen = 0;
            }
        }

        return minOpen == 0;
    }
}

