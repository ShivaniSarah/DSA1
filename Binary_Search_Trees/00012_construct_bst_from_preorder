https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/

Construct Binary Search Tree from Preorder Traversal

Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree 
and return its root.
It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.
A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and
any descendant of Node.right has a value strictly greater than Node.val.
A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.

Example 1:
Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]
Example 2:

Input: preorder = [1,3]
Output: [1,null,3]

# java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        // call helper function with initial parameters
        return bstFromPreorder(preorder, Integer.MAX_VALUE, new int[]{0});
    }

    public TreeNode bstFromPreorder(int[] preorder, int bound, int[] i){
        // check if there are no more nodes to add or if current node value exceeds bound
        if(i[0] == preorder.length || preorder[i[0]] > bound){
            return null;
        }

        // create new TreeNode with current node value
        TreeNode root = new TreeNode(preorder[i[0]++]);

        // recursively call helper for left and right subtrees
        // left subtree bound: current node value
        root.left = bstFromPreorder(preorder, root.val, i);
        // right subtree bound: parent node bound
        root.right = bstFromPreorder(preorder, bound, i);

        return root;
    }
}

or

class Solution {
    private TreeNode build(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd, HashMap<Integer, Integer> map){
        //base condition
        if(preStart > preEnd || inStart > inEnd){
            return null;
        }
        //getting root from first element of preorder(root, left, right).
        TreeNode root = new TreeNode(preorder[preStart]);
        //finding that element in inorder.
        int inMap = map.get(root.val);
        //left part in inorder.
        int numsLeft = inMap - inStart;
        //main logic
        root.left = build(preorder, preStart+1, preStart + numsLeft, inorder, inStart, inMap-1, map);
        root.right = build(preorder, preStart + numsLeft + 1, preEnd, inorder, inMap + 1, inEnd, map);

        return root;

    }

    public TreeNode bstFromPreorder(int[] preorder) {
        int n = preorder.length;
        //getting inorder from preorder by sorting the preorder.
        int[] inorder = preorder.clone();
        Arrays.sort(inorder);
        //storing values of inorder in a map.
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < inorder.length; i++){
            map.put(inorder[i], i);
        }
        TreeNode root = build(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1, map);
        return root;

    }
}

or

class Solution {
    private TreeNode recur(int []pre,int i,int j)
    {
        if(i > j)
        {
            return null;
        }
        TreeNode root = new TreeNode(pre[i],null,null);
        int mid = i+1;
        while(mid <= j)
        {
            if(pre[mid] <= pre[i])
            {
                mid++;
            }
            else
            {
                break;
            }
        } 
        root.left = recur(pre,i+1,mid-1);
        root.right = recur(pre,mid,j);
        return root;
    }
    public TreeNode bstFromPreorder(int[] preorder) {
        return recur(preorder,0,preorder.length-1);
    }
}

or

class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        TreeNode root = new TreeNode(preorder[0]);

        for(int i=1;i<preorder.length;i++)
        {
            constructTree(root,preorder[i]);
        }
        return root;
    }
    public void constructTree(TreeNode root, int data)
    {
        if(root.val > data )
        { 
            if(root.left == null)
            {
                root.left = new TreeNode(data,null,null);    
            }
            else{
                constructTree(root.left,data);
            }
        }
        else if(root.val < data )
        {
            if(root.right==null)
            {
                root.right = new TreeNode(data,null,null);
            }
            else{
                constructTree(root.right,data);
            }
        }
    }
}
