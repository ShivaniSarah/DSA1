https://www.geeksforgeeks.org/problems/implementing-ceil-in-bst/1

Given a BST and a number X, find Ceil of X.
Note: Ceil(X) is a number that is either equal to X or is immediately greater than X.

If Ceil could not be found, return -1.

Example 1:

Input:
      5
    /   \
   1     7
    \
     2 
      \
       3
X = 3
Output: 3
Explanation: We find 3 in BST, so ceil
of 3 is 3.
Example 2:

Input:
     10
    /  \
   5    11
  / \ 
 4   7
      \
       8
X = 6
Output: 7
Explanation: We find 7 in BST, so ceil
of 6 is 7.

# java

class Tree {
    // Function to return the ceil of given number in BST.
    int findCeil(Node root, int key) {
        if (root == null) return -1;
        // Code here
        if(key<root.data) {
            int left  = findCeil(root.left,key);
            return left==-1?root.data:left;
        }else if(key== root.data){
            return root.data;
        }else{
            return findCeil(root.right,key);
        }
    }
}

or

class Tree {
    // Function to return the ceil of given number in BST.
    int findCeil(Node root, int key) {
        if (root == null) return -1;
        Node temp=root;
        // Code here
        int ceil=-1;
        while(temp!=null){
           if(key==temp.data){
               return temp.data;
           }
           else if(key>temp.data){
               temp=temp.right;
               
           }else{
               ceil=temp.data;
               temp=temp.left;
               
           } 
        }
        return ceil;
    }
}
