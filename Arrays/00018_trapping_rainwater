Trapping rainwater

https://leetcode.com/problems/trapping-rain-water/description/
https://www.geeksforgeeks.org/trapping-rain-water/

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

# java


# 2 array

class Solution {
    public int trap(int[] height) {
        int n = height.length;
        if (n == 0) return 0;

        int[] left = new int[n];
        int[] right = new int[n];

        // Initialize the left and right arrays
        left[0] = height[0];
        right[n - 1] = height[n - 1];

        // Fill the left array
        for (int i = 1; i < n; i++) {
            left[i] = Math.max(left[i - 1], height[i]);
        }

        // Fill the right array
        for (int i = n - 2; i >= 0; i--) {
            right[i] = Math.max(right[i + 1], height[i]);
        }

        // Calculate the total trapped water
        int water = 0;
        for (int i = 0; i < n; i++) {
            water += Math.min(left[i], right[i]) - height[i];
        }

        return water;
    }
}

or

class Solution {
    public int trap(int[] height) {
        Stack<Integer> stack = new Stack<>();
        int n = height.length;
        int ans = 0;

        // Loop through each bar
        for (int i = 0; i < n; i++) {
            // Remove bars from the stack while the condition holds
            while (!stack.isEmpty() && height[stack.peek()] < height[i]) {
                // Store the height of the top and pop it
                int popHeight = height[stack.pop()];

                // If the stack is empty, break
                if (stack.isEmpty()) {
                    break;
                }

                // Get the distance between the left and right boundary of the popped bar
                int distance = i - stack.peek() - 1;

                // Calculate the minimum height
                int minHeight = Math.min(height[stack.peek()], height[i]) - popHeight;

                // Calculate the water trapped
                ans += distance * minHeight;
            }

            // If the stack is empty or height of the current bar is less than or equal to the top bar of stack
            stack.push(i);
        }

        return ans;
    }
}

# two pointer approach

class Solution {
    public int trap(int[] height) {
        int i=0,left_max=height[0],sum=0;
        int j=height.length-1,right_max=height[j];
        while (i<j)
        {
            if(left_max <= right_max)
            {
                sum+=(left_max-height[i]);
                i++;
                left_max=Math.max(left_max,height[i]);
            }
            else 
            {
                sum+=(right_max-height[j]);
                j--;
                right_max=Math.max(right_max,height[j]);
            }
        }
        return sum;
        
    }
}


# python

# Using left max and right max approach
class Solution:
    def trap(self, height: List[int]) -> int:
        n=len(height)
        left = [height[0]]
        right =[height[n-1]]
        
        for i in range(1,n):
            left.append(max(left[-1],height[i]))
            right.append(max(right[-1],height[n-i-1]))
        right.reverse()
        water=0
        for i in range(n):
            water += min(left[i],right[i]) - height[i]
        return water


# Using monotonic stack

class Solution:
    def trap(self, height: List[int]) -> int:
        stack = [] 
  
        # size of the array 
        n = len(height) 
    
        # Stores the final result 
        ans = 0
    
        # Loop through the each bar 
        for i in range(n): 
    
            # Remove bars from the stack 
            # until the condition holds 
            while(len(stack) != 0 and (height[stack[-1]] < height[i])): 
    
                # store the height of the top 
                # and pop it. 
                pop_height = height[stack[-1]] 
                stack.pop() 
    
                # If the stack does not have any 
                # bars or the popped bar 
                # has no left boundary 
                if(len(stack) == 0): 
                    break
    
                # Get the distance between the 
                # left and right boundary of 
                # popped bar 
                distance = i - stack[-1] - 1
    
                # Calculate the min. height 
                min_height = min(height[stack[-1]], height[i])-pop_height 
    
                ans += distance * min_height 
    
            # If the stack is either empty or 
            # height of the current bar is less than 
            # or equal to the top bar of stack 
            stack.append(i) 
    
        return ans 
        
 	
