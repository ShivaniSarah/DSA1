https://leetcode.com/problems/majority-element-ii/description/

Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. floor function
At max there can be 2 elements appearing > n/3 times.

Example 1:
Input: nums = [3,2,3]
Output: [3]

Example 2:
Input: nums = [1]
Output: [1]

Example 3:
Input: nums = [1,2]
Output: [1,2]

# Optimal Approach:

class Solution(object):
    def majorityElement(self, arr):
        n = len(arr) 
        cnt1, cnt2 = 0, 0 # counts
        el1, el2 = float('-inf'), float('-inf') # element 1 and element 2

        # applying the Extended Boyer Moore’s arroting Algorithm:
        for i in range(n):
            if cnt1 == 0 and el2 != arr[i]:
                cnt1 = 1
                el1 = arr[i]
            elif cnt2 == 0 and el1 != arr[i]:
                cnt2 = 1
                el2 = arr[i]
            elif arr[i] == el1:
                cnt1 += 1
            elif arr[i] == el2:
                cnt2 += 1
            else:
                cnt1 -= 1
                cnt2 -= 1

        ls = [] # list of answers

        # Manually check if the stored elements in
        # el1 and el2 are the majority elements:
        cnt1, cnt2 = 0, 0
        for i in range(n):
            if arr[i] == el1:
                cnt1 += 1
            if arr[i] == el2:
                cnt2 += 1

        mini = int(n / 3) + 1
        if cnt1 >= mini:
            ls.append(el1)
        if cnt2 >= mini:
            ls.append(el2)

        # Uncomment the following line
        # if it is told to sort the answer array:
        #ls.sort() #TC --> O(2*log2) ~ O(1);

        return ls


TC: O(n)+O(n)
SC: O(1)

# Brute:

class Solution(object):
    def majorityElement(self, nums):
        n = len(nums) # size of the list
        ls = [] # list of answers as there can 2 elements appearing > n/3 times

        for i in range(n):
            # selected element is nums[i]:
            # Checking if nums[i] is not already
            # a part of the answer:
            if len(ls) == 0 or ls[0] != nums[i]:
                cnt = 0
                for j in range(n):
                    # counting the frequency of nums[i]
                    if nums[j] == nums[i]:
                        cnt += 1

                # check if frquency is greater than n/3:
                if cnt > (n // 3):
                    ls.append(nums[i])

            if len(ls) == 2:
                break

        return ls

TC: O(n^2)
SC: O(1)

# Better Approach:

from collections import Counter
class Solution(object):
    def majorityElement(self, arr):
        n = len(arr)
        l=[]
        # Count the occurrences of each element using Counter
        counter = Counter(arr)

        # Searching for the majority element
        for num, count in counter.items():
            if count > (n // 3):
                l.append(num)
        return l


class Solution(object):
    def majorityElement(self, arr):
        n = len(arr)
        # declaring a dictionary
        mpp = {}
        l=[]
        # storing the elements with their occurrences
        for num in arr:
            mpp[num] = mpp.get(num,0)+1

        # searching for the majority element
        for key, value in mpp.items():
            if value > n // 3:
                l.append(key)

        return l

TC: O(nlogn)
SC: O(n) to store hashmap
