https://www.geeksforgeeks.org/problems/two-numbers-with-odd-occurrences5846/1

Two numbers with odd occurrences

Given an unsorted array, Arr[] of size N and that contains even number of occurrences for all numbers except two numbers. Find the two numbers in decreasing order which has odd occurrences.

Example 1:

Input:
N = 8
Arr = {4, 2, 4, 5, 2, 3, 3, 1}
Output: {5, 1} 
Explaination: 5 and 1 have odd occurrences.

Example 2:

Input:
N = 8
Arr = {1 7 5 7 5 4 7 4}
Output: {7, 1}
Explaination: 7 and 1 have odd occurrences.


# java

class Solution {
    public int[] twoOddNum(int Arr[], int N) {
        int xor = Arr[0];
        for (int i = 1; i < N; i++) {
            xor ^= Arr[i];
        }
        
        int last_set_bit = xor & -xor;
        
        int x = 0;
        int y = 0;
        
        // Separating the array elements into two groups based on the position of the last set bit
        for (int i = 0; i < N; i++) {
            if ((Arr[i] & last_set_bit) == 0) {
                x ^= Arr[i];
            } else {
                y ^= Arr[i];
            }
        }
        
        return new int[]{Math.max(x, y), Math.min(x, y)};
    }
}

or

class Solution
{
    public int[] twoOddNum(int Arr[], int N)
    {
        // code here
        int xorAll = 0;
        for (int num : Arr) {
            xorAll ^= num;
        }

        // Step 2: Find the rightmost set bit
        int rightmostSetBit = xorAll & -xorAll;

        // Step 3: Partition the array into two groups and find the unique elements
        int unique1 = 0, unique2 = 0;
        for (int num : Arr) {
            if ((num & rightmostSetBit) == 0) {
                unique1 ^= num;
            } else {
                unique2 ^= num;
            }
        }

       return new int[] {Math.max(unique1, unique2), Math.min(unique1, unique2)};
    }
    }
