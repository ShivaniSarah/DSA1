https://leetcode.com/problems/longest-palindromic-subsequence/

Given a string s, find the longest palindromic subsequence's length in s.
A subsequence is a sequence that can be derived from another sequence by deleting some or no elements
without changing the order of the remaining elements.

Example 1:
Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".

Example 2:
Input: s = "cbbd"
Output: 2
Explanation: One possible longest palindromic subsequence is "bb".

class Solution(object):
    def longestPalindromeSubseq(self, s):
        def lcs(s1, s2):
            n = len(s1)
            m = len(s2)

            # Initialize a 2D array to store the length of the LCS
            dp = [[-1] * (m + 1) for i in range(n + 1)]

            # Initialize the first row and first column with 0
            for i in range(n + 1):
                dp[i][0] = 0
            for i in range(m + 1):
                dp[0][i] = 0

            # Fill in the dp array using dynamic programming
            for ind1 in range(1, n + 1):
                for ind2 in range(1, m + 1):
                    if s1[ind1 - 1] == s2[ind2 - 1]:
                        dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1]
                    else:
                        dp[ind1][ind2] = max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1])

            # The final value in dp will be the length of the LCS
            return dp[n][m]

        t = s
        s = s[::-1]

        return lcs(s, t)
